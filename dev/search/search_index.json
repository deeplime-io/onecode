{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>OneCode, your gateway to Python application deployment on the Cloud! Pssst, if you're not into rolling out your App but simply using them, check out the OneCode Cloud user doc.</p> <ul> <li>OneCode in One Minute</li> <li>Deploy on OneCode Cloud</li> <li>Getting Started with the OneCode API</li> <li>Upgrading from 0.x</li> <li>Work in Progress</li> <li>Getting Help</li> </ul>"},{"location":"#onecode-in-one-minute","title":"OneCode in One Minute","text":""},{"location":"#install-onecode","title":"Install OneCode","text":"<pre><code>pip install onecode\n</code></pre>"},{"location":"#create-your-first-onecode-project","title":"Create your first OneCode project","text":"<pre><code>onecode-create\n\n# then follow the prompts\n? Enter the path where to create OneCode project: ~/\n? Enter your OneCode project name: HelloWorld\n\n\u280b Creating new OneCode project\n\u2705 Created HelloWorld OneCode project\n</code></pre>"},{"location":"#add-your-first-onecode-element","title":"Add your first OneCode Element","text":"<p>Edit the file <code>HelloWorld/flows/helloworld.py</code> such as <pre><code>from onecode import Logger, text_input\n\n\ndef run():\n    Logger.info(f\"Hello {text_input('your name', 'OneCoder')}!\")\n</code></pre></p>"},{"location":"#running-your-onecode-project","title":"Running your OneCode project","text":"<pre><code>cd HelloWorld\npython main.py\n\n# You should see the following printed\n[INFO] helloworld - |OneCode|.helloworld.py:5 - Hello OneCoder!\n</code></pre> <p>By default, the OneCode text input is <code>OneCoder</code> but now can take any other values without having to change the code.</p> <p> Congratulations, you now are a OneCoder! </p>"},{"location":"#deploy-on-onecode-cloud","title":"Deploy on OneCode Cloud","text":"<p>The following steps will show you how to get setup for the 1st time:</p> <ol> <li> <p>Ensure you install at least <code>onecode &gt;= 1.0.0</code> and have a GitHub account</p> <ul> <li>If you have an app with a previous <code>onecode</code> version, upgrade from 0.x.</li> <li>Create your OneCode App (or use an existing one) and push it to your GitHub account.</li> </ul> </li> <li> <p>Request a beta-tester access here.</p> </li> <li> <p>Once you received your confirmation email, login on onecode.rocks.</p> </li> <li> <p>Register your first app</p> <ul> <li>From the dashboard, navigate to Apps in the top menubar.</li> </ul> <p></p> <ul> <li>Click on Register New App.</li> </ul> <p></p> <ul> <li>On your first visit, you'll need to Link GitHub Account to your OneCode account.</li> </ul> <p></p> <ul> <li>As you are redirected to GitHub, login to your GitHub account.</li> </ul> <p></p> <ul> <li>Authorize OneCode.</li> </ul> <p></p> <ul> <li> <p>Upon authorization, you will be redirected back to OneCode with your GitHub identity. You now need to decide which repositories OneCode may access in order to build your app by clicking on GitHub App. </p> </li> <li> <p>Choose which repositories should be accessible by OneCode. Note that you can change these permissions at anytime.</p> </li> </ul> <p></p> <ul> <li>Select the repository and the branch corresponding to the OneCode App you want to deploy. Choose if needed a different image and Python version than the default one.</li> </ul> <p></p> </li> <li> <p>The App will then appear in your personal Apps Workspace and be automatically built. Each new commit that you push to the registered branch will automatically trigger a new build</p> </li> </ol> <p>  Congratulations, you now are an Cloud OneCoder!  </p>"},{"location":"#getting-started-with-the-onecode-api","title":"Getting Started with the OneCode API","text":"<p>OneCode relies on the following principles:</p> <ul> <li> <p>no-disruption: OneCode doesn't force you to change the way you code. No matter what your code structure and Python files hierarchy, OneCode can seamlessly be integrated with it.</p> </li> <li> <p>controllable input parameters: simply replace your hard-coded parameters with OneCode functions (called Elements) so that their value can change without having to change the code. One Code, many ways to run!</p> </li> <li> <p>automated interface: OneCode push on the cloud, the interface will automatically be generated from the OneCode Elements</p> </li> <li> <p>easy deployment: no need to change the code between your local machine and the cloud. Simply push your code as-is on your synchronized GitHub account and your App (environment and UI!) will build automatically!</p> </li> </ul> <p>The most important part of the API are Input and Output Elements. They can be inlined within your code or not, that's up to you (no-disruption!), see examples below:</p> <ul> <li> <p>use Input Elements whenever you need to expose a parameter with a specific widget. For example: <pre><code># instead of: df = pd.read_csv('test.csv')\ndf = csv_reader('your df', 'test.csv')\n\n# instead of: for i in range(5):\nfor i in range(slider('N', 5, min=0, max=10)):  # inlined\n    # do stuff\n\n# instead of: choice = 'cat'\nchoice = dropdown('your choice', 'cat', options=['dog', 'cat', 'fish']) # not inlined\nLogger.info(f'Your choice is {choice}')\n</code></pre></p> </li> <li> <p>use Output Elements whenever an output should be returned. For example: <pre><code># instead of: plt.savefig('stuff.png')\nplt.savefig(file_output('stuff', 'stuff.png'))  # inlined\n\n# instead of: filepath = 'test.txt'\nfilepath = file_output('test', 'test.txt')  # not inlined\nwith open(filepath, 'w') as f:\n    # do stuff\n</code></pre></p> </li> </ul> <p>Check out the full API documentation here!</p>"},{"location":"#upgrading-from-0x","title":"Upgrading from 0.x","text":"<ul> <li> <p>Ensure there is <code>requirements.txt</code> file at the root of your App and that it contains at least <code>onecode&gt;=1,&lt;2</code>.</p> </li> <li> <p>Change all Output Elements (e.g. <code>image_output()</code>, <code>text_output()</code>, etc.) to simply <code>file_output()</code>.</p> </li> <li> <p>Remove any <code>section_header()</code> element.</p> </li> <li> <p>Check out the work in progress section in case you were using advanced features.</p> </li> </ul>"},{"location":"#work-in-progress","title":"Work in Progress","text":"<p>As <code>onecode</code> is still transitioning to OneCode Cloud, early versions of the OneCode Cloud don't yet support completely the following features:</p> <ul> <li> <p>Multi-steps: adding more than one flow to your App will eventually be supported. In the meantime, either split your app (one app per step) or merge all steps under a single one (you may directly update the <code>.onecode.json</code> file or create a new app and move the code to it).</p> </li> <li> <p>Folder Inputs: as the cloud doesn't really have directory structures, it needs some special work. In the meantime, replace with multiple selection <code>file_input</code> instead.</p> </li> <li> <p>Custom Elements (in custom plugin or <code>onecode_ext</code>): extra security precautions must be taken to allow custom UI on the Cloud. It has therefore been disabled for now.  Replace them with regular elements until the Cloud is ready for them.</p> </li> <li> <p>Dynamic <code>options</code>: dynamic expressions in <code>options</code> of the <code>dropdown</code> element) is not fully supported yet. You can still use it, in that case, the elements will ask user to fill out values as regular text input (e.g. CSV column names, etc.).</p> </li> <li> <p>Dynamic <code>optional</code>: <code>optional</code> as <code>True/False</code> (static) works as expected, however dynamnic expressions will be ignored for now. As a consequence, <code>hide_when_disabled</code> attribute is obsolete until dynamic <code>optional</code> are supported again.</p> </li> <li> <p>Attribute <code>count</code>: we go back-and-forth with this one on bringing this one to the Cloud. In the meantime, switch back to non-dynamic elements, e.g. multiple dropdown, text input collecting list of values, etc.</p> </li> <li> <p>Running <code>onecode-start</code>: getting a local UI is in the works, it's a pretty big feature, thanks for your patience on that one.</p> </li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<p>If you are a OneCode customer, you may directly email our support team. Feel free as well to browse the GitHub Issues and reach out to the community by posting bug reports, questions and suggestions.</p>"},{"location":"#credits","title":"Credits","text":"<p>Credits to all open-source libraries that helped build this project. Special thanks to:</p> <ul> <li>PyCG and its contributors for making the Call Graph algos essential to the OneCode mechanism.</li> <li>Geode Solutions and Spotlight Earth for testing the open-source library and providing invaluable feedback.</li> </ul>"},{"location":"faq/","title":"FAQs","text":""},{"location":"faq/#faq","title":"FAQ","text":"<p>Why did you take Streamlit out of OneCode?</p> <p>As Streamlit evolves rapidly, it is difficult to maintain and always run behind API changes. Especially for community packages that we relied on and are barely or no longer maintained. Streamlit is a great tool, period. However for our use case, it started to become difficult to make OneCode evolve and keep Streamlit along, especially as our cloud platform has its own way of working. You can actually still use Streamlit in Onecode: checkout the <code>onecode-streamlit</code> project.</p> <p>Why do I need OneCode at all, I could just build my application with Streamlit?</p> <p>That's absolutely true, Streamlit or other alternatives are perfectly suitable for that. However beware of the limitations you can hit (file size handling, data caching, server overload, etc.). There are scenarios that can work out without OneCode and that's definitely ok: pick the right tool for your use case. When it comes to deploying your application for different purposes (batch, interactive, long process, large file processing, etc.) or in different environments, you may find handy to not have to adapt your original code: it will definitely save you time and frustration and let you focus on the gist of the work rather than the deployment work.</p>"},{"location":"organizing_data/","title":"Organizing data","text":"<p>It is strongly advised to setup your input/output data files hierarchy relative to a root folder, so that when you deploy your application, experts can simply specify a different root data path and things will work out great. For instance:</p> <p><pre><code>import os\nfrom onecode import file_input, Project, Mode\n\nproject = Project()\nproject.mode = Mode.EXECUTE\n\nfile =  os.path.join('region', 'model.h5')\nx = file_input('x', file)\n</code></pre> will automatically append the path <code>region/model.h5</code> to your Project data path. <pre><code>print(f'Are path equals? {x == os.path.join(project.data_root, file)}')\n</code></pre></p> Output<pre><code>Are path equals? True\n</code></pre> <p>From there, any experts can have a data folder with the same hierarchy anywhere on their disk and launch the script by simply changing the data path at runtime: <pre><code>ONECODE_PROJECT_DATA=/path/to/my/data python main.py\n</code></pre> Without changing the code, the OneCode project can execute properly on different machines.</p> <p>On the other hand, as soon as you specify an absolute path for your input files, the Project data path is ignored. There could be some special cases for doing that, but most of the time you should use relative paths.</p> <p>Note</p> <p>Input elements such as <code>csv_reader</code> and <code>file_input</code> make the path relative to <code>Project().data_root</code>.</p> <p>Output elements such as <code>csv_output</code>, <code>file_output</code>, <code>image_output</code> and <code>text_output</code> make the path relative to <code>{Project().data_root}/{Project.current_flow}/outputs</code>.</p> <p>Tip</p> <p>How is the Project data path determined? The data path is initialized according to the following rules ordered by priority:</p> <ol> <li>to <code>ONECODE_PROJECT_DATA</code> if provided in the Environment variables</li> <li>to the <code>data</code> folder located in the same directory from where the project is run if existing (typically the OneCode project data folder)</li> <li>to the current working directory for all other cases</li> </ol>"},{"location":"changelogs/0.1.0/","title":"0.1.0","text":"<p>Initial release, checkout the documentation</p> <p>Elements featured: * checkbox * csv_reader * dropdown * file_input * number_input * radio_button * slider * text_input * csv_output * file_output * image_output * text_output</p> <p>CLI featured: * <code>onecode-create</code> * <code>onecode-add</code> * <code>onecode-extract</code> * <code>onecode-start</code></p>"},{"location":"changelogs/0.2.0/","title":"0.2.0","text":""},{"location":"changelogs/0.2.0/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description 9 Correct <code>gatherUsageStats</code> env variable <code>onecode-start</code> used wrong variable name to prevent sending stats. [No ref] <code>kind</code> is now a property of the <code>InputElement</code> and <code>OutputElement</code> <code>kind</code> would have potentially been overwritten while extracting element through <code>onecode-extract</code>."},{"location":"changelogs/0.2.0/#enhancements","title":"Enhancements","text":"Issue Ref  Summary  Description 5 Improving DeepLearning example Allow initialization of <code>NeuralNetInput</code> custom element with different layer specs. 10 Allow for custom import and init statements in InputElement and OutputElement Streamlit <code>app.py</code> generated through <code>onecode-start</code> now has placeholders for import and init statements. See <code>imports()</code> and <code>init()</code> static methods in <code>InputElement</code> and <code>OutputElement</code>. [No ref] Allow meta-data for elements Meta-data can now be attached to any Input/Output element through <code>**kwargs</code>. [No ref] Namespace logging Logger (info, warning, critical and debug) now uses a namespace <code>|OneCode|</code> rather than the root logging."},{"location":"changelogs/0.2.0/#new-features","title":"New Features","text":"Issue Ref  Summary  Description 1 New input element <code>FolderInput</code> <code>FolderInput</code> allows folder selection. <code>LASConverter</code> example showcases it. 2 New output element <code>PlotlyOutput</code> <code>PlotlyOutput</code> allows to visualize Plotly charts. <code>ExperimentalVariography</code> example showcases it. [No ref] Setup Project configuration through environment variables Allow additional way to setup Project configuration options from command line."},{"location":"changelogs/0.2.0/#breaking-changes","title":"Breaking changes","text":"<ul> <li> <p>10 introduces a potential breaking change if you have custom <code>InputElement</code> or <code>OutputElement</code> where the <code>streamlit()</code> method relies on one of these statements being present in <code>app.py</code>: <pre><code>import tkinter as tk\nfrom tkinter import filedialog\nimport numpy as np\nfrom pyarrow import csv as pacsv\n_root = tk.Tk()\n</code></pre> If this is the case, simply inherit <code>import()</code> and/or <code>init()</code> static methods so that they return the relevant statements. See <code>FileInput.imports()</code> and <code>FileInput.init()</code> as examples.</p> </li> <li> <p>Custom <code>InputElement</code> or <code>OutputElement</code> can no longer initialized with an argument named <code>kind</code>: it now is a reserved attribute. This change was triggered by a bug fix as <code>kind</code> was potentially overwritten when extracting element through <code>onecode-extract</code>. Upgrade your custom element by changing your argument name.</p> </li> </ul>"},{"location":"changelogs/0.2.1/","title":"0.2.1","text":""},{"location":"changelogs/0.2.1/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description 21 [Bug]: Streamlit error message 'setIn' cannot be called on an ElementNode when re-running application Log stream handlers were accumulated in root logging namespace at each run as Streamlit kept the Logger instance active."},{"location":"changelogs/0.3.0/","title":"0.3.0","text":""},{"location":"changelogs/0.3.0/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description [No ref] Fix missing typing CLI function <code>get_import_statements()</code> was missing return type. [No ref] Fixing links in documentation Fixed wrong reference for some documentation internal hyperlinks. [No ref] Fix <code>PlotlyOutput</code> missing import <code>import plotly</code> was missing from the <code>imports()</code> statements in <code>PlotlyOutput</code>."},{"location":"changelogs/0.3.0/#enhancements","title":"Enhancements","text":"Issue Ref  Summary  Description [No ref] Update onecode-pycg version Allow versions greater than 0.0.7. [No ref] [CLI] add option to only generate the Streamlit app file without starting the server Use <code>onecode-start --dump</code> to generate app.py: useful to avoid restarting the Streamlit server every time. [No ref] [CLI] add verbosity option when processing files Use <code>--verbose</code> option on <code>onecode-start</code> or <code>onecode-extract</code> to print information about functions being processed."},{"location":"changelogs/0.3.0/#new-features","title":"New Features","text":"Issue Ref  Summary  Description"},{"location":"changelogs/0.3.0/#breaking-changes","title":"Breaking changes","text":"<p>None</p>"},{"location":"changelogs/0.4.0/","title":"0.4.0","text":""},{"location":"changelogs/0.4.0/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description [No ref] Changes in traceback API in Python 3.10 was not properly handling exceptions in Streamlit Using parameter position rather than name to allow backward compatibility with previous python versions."},{"location":"changelogs/0.4.0/#enhancements","title":"Enhancements","text":"Issue Ref  Summary  Description [No ref] Doc enhancements Add more examples and info to documentation of output elements. [No ref] Rebranding Update logo, main color and pictures."},{"location":"changelogs/0.4.0/#new-features","title":"New Features","text":"Issue Ref  Summary  Description [No ref] Adding new output element VRML file Visualize 3D scene with PyVista through VRML output. [No ref] Adding new output element MP4 file Visualize video through an embedded video player. [No ref] Adding new input element for Section Header Display a section header. [No ref] Adding new output element HTML file Open HTML file through hyperlink in a new tab."},{"location":"changelogs/0.4.0/#breaking-changes","title":"Breaking changes","text":"<p>None</p>"},{"location":"changelogs/1.0.0/","title":"1.0.0","text":""},{"location":"changelogs/1.0.0/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description [No Ref] Fix filename in <code>Logger</code> message when typechecking is on When typechecking is on, decorator filename was printed out instead of the actual filename from where the Logging originates from."},{"location":"changelogs/1.0.0/#enhancements","title":"Enhancements","text":"Issue Ref  Summary  Description [No Ref] Python versions 3.11 and 3.12 now supported All Python versions ranging from 3.8 through 3.12 are now supported. [No Ref] <code>Slider</code> returns integers when possible When min/max/step are integers, value is necessary an integer and returned as such. [No Ref] Refactor all file type output elements under <code>FileOutput</code> No longer necessary to have one class per FileOutput type. [No Ref] <code>FileOutput</code> to optionally create output path Use <code>make_path</code> in <code>file_output()</code> to automatically make the path if doesn't exists."},{"location":"changelogs/1.0.0/#new-features","title":"New Features","text":"Issue Ref  Summary  Description [No Ref] OneCode Cloud compatibility Rework and Streamlit extraction to make OneCode Apps deployable on OneCode Cloud. [No Ref] New CLI <code>onecode-build</code> Extract the GUI JSON file used to build the UI on OneCode Cloud. [No Ref] New CLI <code>onecode-zip</code> Archive all output data in a zip file. [No Ref] Add element dependency Retrieve elements dependencies when attributes are dynamic."},{"location":"changelogs/1.0.0/#breaking-changes","title":"Breaking changes","text":"<p>While it has been nice to get started with, Streamlit app generation is no longer part of OneCode. See <code>onecode-streamlit</code> for more information on backward-compatibility.</p> <p>Checkout this guide to upgrade from <code>0.x</code>.</p>"},{"location":"changelogs/1.0.0/#notes","title":"Notes","text":"<ul> <li><code>pyarrow</code> no longer a direct dependency of <code>onecode</code>. As a consequence, <code>CsvReader</code> element no longer read CSV through <code>pyarrow.read_csv()</code> but <code>pandas.read_csv()</code></li> <li><code>pydantic</code> no longer a strong dependency, it was moved to the <code>developer</code> dependencies. Therefore using the variable <code>ONECODE_DO_TYPECHECK=1</code> requires the <code>pydantic</code> installation.</li> </ul>"},{"location":"reference/base/enums/","title":"Enumerations","text":"<p>How to use Enums</p> <p>Enums can be used in functions as Python object (int, float or strings) or as OneCode attribute.</p> <p>For example <pre><code>from oncode import file_input, FileFilter\n\nwidget = file_input(\n    key=\"FileInput\",\n    value=\"/path/to/file1.txt\",\n    types=[FileFilter.IMAGE]\n)\n</code></pre></p> <p>is equivalent to <pre><code>from oncode import file_input, FileFilter\n\nwidget = file_input(\n    key=\"FileInput\",\n    value=\"/path/to/file1.txt\",\n    types=[(\"Image\", \".jpg .png .jpeg\")]\n)\n</code></pre></p>"},{"location":"reference/base/enums/#onecode.base.enums.ConfigOption","title":"<code>ConfigOption</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Available options to control the configuration of the project.</p> <ul> <li><code>FLUSH_STDOUT</code>: to force flushing the logger  <code>\"FLUSH_STDOUT\": False</code></li> <li><code>LOGGER_COLOR</code>: to color the logs by default when resetting the logger      <code>\"LOGGER_COLOR\": True</code></li> <li><code>LOGGER_TIMESTAMP</code>: to timestamp the logs  <code>\"LOGGER_TIMESTAMP\": True</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.ElementType","title":"<code>ElementType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Available element type variables. These element types are typically used by specific modes (e.g. <code>EXTRACT</code> and <code>EXTRACT_ALL</code> modes).</p> <ul> <li><code>INPUT</code>: <code>InputElement</code> type  <code>\"INPUT\"</code></li> <li><code>OUTPUT</code>: <code>OutputElement</code> Type  <code>\"OUTPUT\"</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.Env","title":"<code>Env</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Available environment variables for OneCode projects:</p> <ul> <li><code>ONECODE_PROJECT_DATA</code>: use this variable to overwrite default data location  <code>\"ONECODE_PROJECT_DATA\"</code></li> <li><code>ONECODE_CONFIG_FILE</code>: name of the file containing OneCode project configurations  <code>\".onecode.json\"</code></li> <li><code>ONECODE_DO_TYPECHECK</code>: set to 1 to force runtime type-checking with Pydantic  <code>\"ONECODE_DO_TYPECHECK\"</code></li> <li><code>ONECODE_LOGGER_NAME</code>: base logger name to avoid logging conflict with other loggers  <code>|OneCode|</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.FileFilter","title":"<code>FileFilter</code>","text":"<p>               Bases: <code>tuple</code></p> <p>Available file filters, typically used by FileInput Element. It allows to filter file selection within the Open File Dialog. File filters are a Tuple made of 2 parts: <code>(name of the filter, file extensions separated by whitespaces)</code>.</p> <ul> <li><code>CSV</code> <code>(\"CSV\", \".csv\")</code></li> <li><code>PYTHON</code> <code>(\"Python\", \".py\")</code></li> <li><code>IMAGE</code> <code>(\"Image\", \".jpg .png .jpeg\")</code></li> <li><code>ZIP</code> <code>(\"ZIP\", \".zip .gz .tar.gz .7z\")</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.Mode","title":"<code>Mode</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Available modes to run OneCode projects:</p> <ul> <li><code>CONSOLE</code>: return the initial element class. Typically used in the interactive Python console.     It is the default <code>Project()</code> mode.  <code>\"_console\"</code></li> <li><code>EXECUTE</code>: run the project with the default provided values. Typically used for running the     Python scripts from the command line: <code>python main.py</code> <code>\"_execute\"</code></li> <li><code>LOAD_THEN_EXECUTE</code>: read parameters previously loaded in <code>Project().data</code>. Typically used for     running the Python scripts from the command line: <code>python main.py params.json</code> <code>\"_load_then_execute\"</code></li> <li><code>EXTRACT</code>: extract parameters and their default value to JSON. It may be used either through     regular Python scripts or the CLI.  <code>\"_extract\"</code></li> <li><code>EXTRACT_ALL</code>: extract parameters, their default value and all their attributes     (kind, name, etc.) to JSON. It may be used either through regular Python scripts or the CLI.      <code>\"_extract_all\"</code></li> <li><code>BUILD_GUI</code>: write the UI file (JSON format) readable by OneCode Cloud to build the     graphical user interface  <code>\"_build_gui\"</code></li> </ul> <p>These modes correspond to the function names of the Input/Output Element objects (e.g. <code>InputElement._execute()</code>). Therefore you can easily extend Input/Output Element with new modes by simply implement new methods in a derived class and set the mode to it.</p> <p>Example</p> <pre><code>from onecode import InputElement, process_call_graph, Project\n\n\nclass MyElement(InputElement):\n    # ... inherit InputElement methods as needed\n\n    def _my_new_mode(self):\n        # implement the gist of your new mode here\n        # ...\n\n\ndef do_my_new_mode(onecode_project_path: str):\n    Project().mode = '_my_new_mode'\n    result = process_call_graph(onecode_project_path)\n\n    # do something with result\n    # ...\n</code></pre>"},{"location":"reference/base/logger/","title":"Logger","text":""},{"location":"reference/base/logger/#onecode.base.logger.ColoredFormatter","title":"<code>ColoredFormatter</code>","text":"<p>               Bases: <code>Formatter</code></p> <p>Logger class formatting messages in a specific way with colors interpretable by the terminal/console according to the log level:</p> <ul> <li><code>DEBUG</code> and <code>INFO</code>: grey</li> <li><code>WARNING</code>: yellow</li> <li><code>ERROR</code>: red</li> <li><code>CRITICAL</code>: bold red</li> </ul> <p>Message is formatted like this: <pre><code>timestamp [log_level] current_flow_name - filename:LOC - actual_message\n</code></pre></p>"},{"location":"reference/base/logger/#onecode.base.logger.ColoredFormatter.format","title":"<code>format(record)</code>","text":"<p>Format the given record</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>Record passing through the formatter. See Python logging for more info.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The formatted text.</p>"},{"location":"reference/base/logger/#onecode.base.logger.Logger","title":"<code>Logger</code>","text":"<p>Single Logger object to handle Python logging within OneCode projects. The default logging level is INFO. See <code>set_level()</code> to change it. Use the static methods <code>debug()</code>, <code>info()</code>, <code>warning()</code>, <code>error()</code>, and <code>critical()</code> to conveniently log your messages with the corresponding logging level.</p> <p>By default, the ColoredFormatter is used. You may add other logging handlers using <code>add_handler()</code>, for instance to redirect logs to a file.</p> <p>Example</p> <pre><code>import logging\nfrom onecode import Logger\n\nLogger().set_level(logging.DEBUG)\n\nLogger.debug(\"debug\")\nLogger.info(\"info\")\nLogger.warning(\"warning\")\nLogger.error(\"error\")\nLogger.critical(\"critical\")\n</code></pre>"},{"location":"reference/base/logger/#onecode.base.logger.Logger._flush","title":"<code>_flush()</code>  <code>staticmethod</code>","text":"<p>Force flush to stdout if <code>ConfigOption.FLUSH_STDOUT</code> is True. See     Project.config for more information.</p>"},{"location":"reference/base/logger/#onecode.base.logger.Logger.add_handler","title":"<code>add_handler(handler=None, root_logger=True)</code>","text":"<p>Add an extra handler in addition to the default console stream one. Nothing is done if handler is None.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Optional[Handler]</code> <p>New handler to add.</p> <code>None</code> <code>root_logger</code> <code>bool</code> <p>If True, add the handler at the root logging, otherwise as a child of the <code>|OneCode|</code> logger.</p> <code>True</code> <p>Example</p> <pre><code>import logging\n\nfrom onecode import Logger\n\n\nhandler = logging.FileHandler(\"debug.log\")\nLogger().add_handler(handler)\nLogger.error('oops!')   # will print to console in red and to file \"debug.log\"\n</code></pre>"},{"location":"reference/base/logger/#onecode.base.logger.Logger.critical","title":"<code>critical(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log a critical message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Any</code> <p>Message to log.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.debug","title":"<code>debug(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log a debug message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Any</code> <p>Message to log.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.error","title":"<code>error(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log an error message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Any</code> <p>Message to log.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.info","title":"<code>info(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log an info message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Any</code> <p>Message to log.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.logger","title":"<code>logger(stacklevel=1)</code>","text":"<p>Get the Python Logger object corresponding to the given stack level. Preferentially use convenience methods <code>debug()</code>, <code>info()</code>, <code>warning()</code>, <code>error()</code>, and <code>critical()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>stacklevel</code> <code>int</code> <p>Number of hops back in the function call stack to tie the logger to. By default, it is the last function calling this logger() method.</p> <code>1</code> <p>Returns:</p> Type Description <code>Logger</code> <p>Python Logger object.</p>"},{"location":"reference/base/logger/#onecode.base.logger.Logger.reset","title":"<code>reset(root_logger=True)</code>","text":"<p>Remove all added handlers attached to the OneCode logger and optionally the root logger if specified (see <code>logging.removeHandler()</code> for more info). OneCode logger is then reset to the default console stream handler with the ColoredFormatter with <code>INFO</code> level.</p> <p>Parameters:</p> Name Type Description Default <code>root_logger</code> <code>bool</code> <p>If True, remove the handlers from the root logger too, in addition to removing the handlers from OneCode logger.</p> <code>True</code>"},{"location":"reference/base/logger/#onecode.base.logger.Logger.set_level","title":"<code>set_level(level)</code>","text":"<p>Set the OneCode logger level. Default logging is INFO.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Numerical value to set the logging level to. See logging levels for more information.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.warning","title":"<code>warning(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log a warning message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Any</code> <p>Message to log.</p> required"},{"location":"reference/base/project/","title":"Project","text":"<p>Single Project object to centralize OneCode project data, such as the data path, parameter values, registered elements, flow currently running, current running mode, etc.</p> <p>See <code>reset()</code> for Project default's initialization.</p> <p>Attributes:</p> Name Type Description <code>registered_elements</code> <code>Set[str]</code> <p>List of elements registered for processing.</p> <code>mode</code> <code>Union[Mode, str]</code> <p>Control how elements are processed.</p> <code>current_flow</code> <code>Optional[str]</code> <p>ID of the flow currently running.</p> <code>data_root</code> <code>str</code> <p>Path to the data folder.</p> <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionnary containing the data values from interpreted elements.</p> <code>config</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionnary containing the project configuration.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.config","title":"<code>config: Optional[Dict[str, Any]]</code>  <code>property</code>","text":"<p>Get the Project current configuration options.</p> <p>Config is simply a key-value dictionnary.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.current_flow","title":"<code>current_flow: Optional[str]</code>  <code>property</code> <code>writable</code>","text":"<p>Get the currently running flow. If no flow is running, None is returned. It is automatically set when OneCode project is run through the main entry point (i-e <code>python main.py</code> or <code>onecode-start</code>)</p>"},{"location":"reference/base/project/#onecode.base.project.Project.data","title":"<code>data: Optional[Dict[str, Any]]</code>  <code>property</code> <code>writable</code>","text":"<p>Get the Project current data. Data is typically set either at the start when running in mode <code>LOAD_THEN_EXECUTE</code> or incrementaly after each call to any input element.</p> <p>Data is simply a key-value dictionnary.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.data_root","title":"<code>data_root: str</code>  <code>property</code>","text":"<p>Get the path to the root of the data folder. See <code>reset()</code> to know how the data path is initialized.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.mode","title":"<code>mode: Union[Mode, str]</code>  <code>property</code> <code>writable</code>","text":"<p>Get the currently set mode for the OneCode Project. A string is returned in case of custom modes. See Mode for more information.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.registered_elements","title":"<code>registered_elements: Set[str]</code>  <code>property</code>","text":"<p>Get the list of registered elements (<code>InputElement</code> and <code>OutputElement</code>). Once a library is registered, it is required to register the elements that need to be processed.</p> <p>By default, it returns all Input/Output Elements of <code>onecode</code> library.</p>"},{"location":"reference/base/project/#onecode.base.project.Project._set_data_root","title":"<code>_set_data_root(data_path)</code>","text":"<p>Protected method to set the data root path. It is unsafe to use this method and change the data path while running the OneCode project.</p> <p>Parameters:</p> Name Type Description Default <code>data_path</code> <code>str</code> <p>Path to the data root.</p> required <p>Raises:</p> Type Description <code>NotADirectoryError</code> <p>if the data path does not exist or is not a directory.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.add_data","title":"<code>add_data(key, value)</code>","text":"<p>Add a key-value pair to the data dictionnary.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Unique key to set the attach the value to.</p> required <code>value</code> <code>Any</code> <p>Value corresponding to the given key.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the key is empty or None.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.get_config","title":"<code>get_config(key)</code>","text":"<p>Get the value corresponding to the key config.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Union[ConfigOption, str]</code> <p>Unique key to get the value from.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the key does not exists.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.get_input_path","title":"<code>get_input_path(filepath)</code>","text":"<p>Get the constructed input path for the given file path. If the file path is absolute or null, the path is left unchanged, otherwise the path is considered relative to the data root path.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>filename of file path to construct the input path from.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The constructed input path to the file.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.get_output_manifest","title":"<code>get_output_manifest()</code>","text":"<p>Get the path to the current flow manifest file, typically <code>&lt;data_root&gt;/outputs/&lt;flow&gt;/MANIFEST.txt</code>. If the path does not exist, it is automatically created.</p> <p>The manifest file is a collection of output data attributes: there would typically be one entry per output file, each entry containing attributes information. Each line is a JSON entry but the entire file is not a JSON.</p> <p>Example</p> <pre><code>{\"key\": \"x\", \"value\": \"file1.csv\", \"kind\": \"FileOutput\", \"tags\": [\"CSV\"],\n    \"mimetype\": \"text/csv\" }\n{\"key\": \"y\", \"value\": \"file2.txt\", \"kind\": \"FileOutput\", \"tags\": [\"TXT\"],\n    \"mimetype\": \"text/plain\" }\n...\n</code></pre> <p>Returns:</p> Type Description <code>str</code> <p>Path to the output MANIFEST.txt file for the currently running flow.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.get_output_path","title":"<code>get_output_path(filepath)</code>","text":"<p>Get the constructed output path for the given file path. The path is always considered relative to the data output path (typically <code>&lt;data_root&gt;/outputs/</code>).</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>filename of file path to construct the output path from.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The constructed output path to the file.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.register_element","title":"<code>register_element(element_name)</code>","text":"<p>Register the given element as part of the elements to be processed. The element must be of the form '.', e.g. <code>onecode_ext.MyInput</code> <p>Parameters:</p> Name Type Description Default <code>element_name</code> <code>str</code> <p>Python name of the element (i-e class name).</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if element is not of the form '.' of if the class name is already snake case."},{"location":"reference/base/project/#onecode.base.project.Project.reset","title":"<code>reset(keep_registered_elements=False)</code>","text":"<p>Reset the project to its default values: - the data path is initialized in priority to <code>ONECODE_PROJECT_DATA</code> if provided in the Environment variables, otherwise to the <code>data</code> folder located in the same directory from where the project is run if existing (typically the OneCode project data folder), otherwise to the current working directory. - mode is <code>Mode.CONSOLE</code>. - currently running flow and data are None. - registered elements default to the OneCode ones unless <code>keep_registered_elements</code> is True.</p> <p>Parameters:</p> Name Type Description Default <code>keep_registered_elements</code> <code>bool</code> <p>keep previously registered elements.</p> <code>False</code>"},{"location":"reference/base/project/#onecode.base.project.Project.set_config","title":"<code>set_config(key, value)</code>","text":"<p>Add a key-value pair to the config dictionnary.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Union[ConfigOption, str]</code> <p>Unique key to set the attach the value to.</p> required <code>value</code> <code>Any</code> <p>Value corresponding to the given key.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the key is empty or None.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.write_output","title":"<code>write_output(output)</code>","text":"<p>Write data to the output manifest file corresponding to the currently running flow. This function is thread and process-safe, i-e if there is concurrent writing to the manifest file (e.g. parallelization through multiprocessing), writing will be queued so that there is no overwrite or other side-effect. The file will therefore be valid and without data loss.</p> <p>Although typically this function is automatically called during the OutputElement execution, it is possible to manully call it too to output custom data.</p> <p>Parameters:</p> Name Type Description Default <code>output</code> <code>Dict</code> <p>Output data to write to the manifest file.</p> required"},{"location":"reference/cli/cli/","title":"CLI","text":""},{"location":"reference/cli/cli/#create-a-new-project","title":"Create a new project","text":"<p>Start a user-interactive CLI to create a new OneCode project. <pre><code>onecode-create\n</code></pre></p> <p>Example</p> <pre><code>? Enter the path where to create OneCode project: ~/\n? Enter your OneCode project name: HelloWorld\n\n\u280b Creating new OneCode project\n\u2705 Created HelloWorld OneCode project\n</code></pre>"},{"location":"reference/cli/cli/#extract-project-parameters","title":"Extract project parameters","text":"<pre><code>usage: onecode-extract [-h] [--all] [--modules [MODULES [MODULES ...]]] [--path PATH]\n    [--verbose] output_file\n\nExtract OneCode project parameters to JSON file\n\npositional arguments:\n  output_file           Path to the output JSON file\n\noptional arguments:\n  -h, --help            Show this help message and exit\n  --all                 Extract parameters with their full info set\n  --modules [MODULES [MODULES ...]]\n                        Optional list of modules to import first\n  --path PATH           Path to the project root directory if not the current working directory\n  --verbose             Print verbose information when processing files\n</code></pre> <p>Example</p> <pre><code># extract project parameters from the root folder\nonecode-extract params.json\n</code></pre>"},{"location":"reference/cli/cli/#archive-project-output-data","title":"Archive project output data","text":"<pre><code>usage: onecode-zip [-h] [--output-file FILE] [--path PATH]\n    [--data PATH] [--compression INT] [--verbose]\n\nArchive the outputs in a zip file\n\noptional arguments:\n  -h, --help            Show this help message and exit\n  --output-file FILE    Path to the output zip file, defaults to data.zip\n  --path PATH           Path to the project root directory if not the current working directory\n  --data PATH           Path to the data root directory if not the default data directory\n  --compression INT     Compression level from 0 (no compresssion) to 9 (highest compression),\n                            defaults to 6\n  --verbose             Print verbose information when processing files\n</code></pre> <p>Example</p> <pre><code># archive project output data\nonecode-zip\n</code></pre>"},{"location":"reference/elements/element_list/","title":"Elements","text":"<p>There are 2 kinds of Elements in OneCode:</p> <ul> <li>Input Elements: use them to expose your input parameters.</li> <li>Output Elements: use them to expose your output data.</li> </ul>"},{"location":"reference/elements/element_list/#input-elements","title":"Input Elements","text":"<p>On OneCode Cloud, the interface (UI) is automatically created from these elements. All Input Elements have at least the following attributes:</p> <ul> <li><code>key</code>: pick a name that is unique across your App.</li> <li><code>value</code>: the default value (typically used when running your local code without parameter file).</li> <li><code>label</code>: the label displayed in the interface (if not provided, the <code>key</code> will be used instead).</li> <li><code>optional</code>: whether <code>None</code> is possible value.</li> </ul> <p>Available input elements for OneCode projects:</p> <ul> <li>checkbox</li> <li>csv_reader</li> <li>dropdown</li> <li>file_input</li> <li>number_input</li> <li>radio_button</li> <li>slider</li> <li>text_input</li> </ul> <p>Below are some examples on how to call these elements. The full API is available here.</p>"},{"location":"reference/elements/element_list/#checkbox","title":"checkbox","text":"<pre><code>do_something = checkbox(\n    key=\"do_something\",\n    value=True,\n    label=\"Do Something?\"\n)\n\nif do_something:\n    # do something here\n</code></pre>"},{"location":"reference/elements/element_list/#csv_reader","title":"csv_reader","text":"<pre><code>df = csv_reader(\n    key=\"my_csv\",\n    value=\"model/data.csv\",\n    label=\"Choose a CSV file\"\n)\n\n# df is a pd.DataFrame!\nprint(df.describe())\n</code></pre>"},{"location":"reference/elements/element_list/#dropdown","title":"dropdown","text":"<pre><code># single choice\nmy_choice = dropdown(\n    key=\"my_choice\",\n    value=\"cat\",\n    label=\"Choose an animal\",\n    options=[\"dog\", \"cat\", \"fish\"]\n)\n\nprint(f\"my choice is: {my_choice}\")\n\n\n# multiple choice\nmy_multi_choice = dropdown(\n    key=\"my_multi_choice\",\n    value=[\"cat\"],\n    label=\"Choose several animals\",\n    options=[\"dog\", \"cat\", \"fish\"],\n    multiple=True\n)\n\nprint(f\"my multiple choices are: {my_multi_choice}\")\n</code></pre>"},{"location":"reference/elements/element_list/#file_input","title":"file_input","text":"<pre><code># single file\nimage = file_input(\n    key=\"my_file\",\n    value=\"images/my_image.png\",\n    label=\"Select an image\",\n    types=[FileFilter.IMAGE]\n)\n\nimg = PIL.Image.open(image)\n\n\n# multiple files\nmultifiles = file_input(\n    key=\"my_file\",\n    value=[\"model/test.csv\", \"model/test.json\"],\n    label=\"Select several files\",\n    types=[(\"Data\", \".csv .tsv\"), (\"Config\", \".json .yaml .yml\")],\n    multiple=True\n)\n\nfor file in multifiles:\n    with open(file) as f:\n        # ...\n</code></pre>"},{"location":"reference/elements/element_list/#number_input","title":"number_input","text":"<pre><code>magic_number = number_input(\n    key=\"magic_number\",\n    value=42,\n    label=\"Choose a magic number\",\n    min=0,\n    max=None,\n    step=2\n)\n\nprint(f\"Your magic number is {magic_number}\")\n</code></pre>"},{"location":"reference/elements/element_list/#radio_button","title":"radio_button","text":"<pre><code>animal = radio_button(\n    key=\"my_choice\",\n    value=\"fish\",\n    label=\"Choose an animal\",\n    options=[\"dog\", \"cat\", \"fish\"],\n    horizontal=False\n)\n\nprint(f\"Your animal of choice is {animal}\")\n</code></pre>"},{"location":"reference/elements/element_list/#slider","title":"slider","text":"<pre><code>magic_number = slider(\n    key=\"magic_number\",\n    value=42,\n    label=\"Choose a magic number\",\n    min=0,\n    max=50,\n    step=0.5\n)\n\nprint(f\"Your magic number is {magic_number}\")\n</code></pre>"},{"location":"reference/elements/element_list/#text_input","title":"text_input","text":"<pre><code>name = text_input(\n    key=\"your_name\",\n    value=\"OneCoder\",\n    label=\"What is your name?\",\n    max_chars=30,\n    placeholder=\"Type your name here!\"\n)\n\nprint(f\"Your name is {name}\")\n</code></pre>"},{"location":"reference/elements/element_list/#output-elements","title":"Output Elements","text":"<p>On OneCode Cloud, only file explicitly flagged as output are push back to the storage. All Output Elements have at least the following attributes:</p> <ul> <li><code>key</code>: pick a meaningful name - it doesn't have to be unique across your App.</li> <li><code>value</code>: the default value (typically used when running your local code without parameter file).</li> </ul> <p>Available output elements for OneCode projects:</p> <ul> <li>file_output</li> </ul> <p>Below is an example on how to call this element. The full API is available here.</p>"},{"location":"reference/elements/element_list/#file_output","title":"file_output","text":"<pre><code>image = file_output(\n    key=\"output_image\",\n    value=\"model/my_image.png\",\n    make_path=True  # will create the model folder if doesn't exist\n)\n\nplt.savefig(image)\n</code></pre>"},{"location":"reference/elements/input_elements_api/","title":"Input Elements API","text":"<p>Available input elements for OneCode projects:</p> <ul> <li>checkbox</li> <li>csv_reader</li> <li>dropdown</li> <li>file_input</li> <li>number_input</li> <li>radio_button</li> <li>slider</li> <li>text_input</li> </ul>"},{"location":"reference/elements/input_elements_api/#checkbox","title":"checkbox","text":"<p><pre><code>def checkbox(\n    key: str,\n    value: Optional[Union[bool, List[bool]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False\n)\n</code></pre> </p> <p>A simple checkbox with a label. Value is either True, False or None.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[bool, List[bool]]]</code> <p>Initial check status: True, False or None.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display next to the checkbox.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Placeholder, ignore until we activate this feature.</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the <code>value</code> may be None.</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Placeholder, ignore until we activate this feature.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import checkbox, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = checkbox(\n    key=\"Checkbox\",\n    value=True,\n    label=\"My Checkbox\"\n)\nprint(widget)\n</code></pre> Output<pre><code>True\n</code></pre>"},{"location":"reference/elements/input_elements_api/#csv_reader","title":"csv_reader","text":"<p><pre><code>def csv_reader(\n    key: str,\n    value: Optional[Union[str, List[str]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>A CSV-file reader returning a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Path to the CSV file. CSV file must exists.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the table.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Placeholder, ignore until we activate this feature.</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the <code>value</code> may be None.</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Placeholder, ignore until we activate this feature.</p> <code>False</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used by the <code>Mode.EXTRACT_ALL</code> when dumping attributes to JSON.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import pandas as pd\nfrom onecode import csv_reader, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = csv_reader(\n    key=\"CsvReader\",\n    value=\"/path/to/file.csv\",\n    label=\"My CSV Reader\",\n    tags=['CSV']\n)\n\npd.testing.assert_frame_equal(widget, pd.read_csv(\"/path/to/file.csv\"))\n</code></pre>"},{"location":"reference/elements/input_elements_api/#dropdown","title":"dropdown","text":"<p><pre><code>def dropdown(\n    key: str,\n    value: Optional[Union[str, List[str], List[List[str]]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    options: Union[List, str] = [],\n    multiple: bool = False\n)\n</code></pre> </p> <p>A single or multipe choice dropdown menu.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[Union[str, int, float], List[Union[str, int, float]], List[List[Union[str, int, float]]]]]</code> <p>Pre-selected value(s) among the options.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display left of the dropdown menu.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Placeholder, ignore until we activate this feature.</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the <code>value</code> may be None.</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Placeholder, ignore until we activate this feature.</p> <code>False</code> <code>options</code> <code>Union[List, str]</code> <p>List all possible options available in the dropdown menu.</p> <code>[]</code> <code>multiple</code> <code>bool</code> <p>Set to True if multiple choice is allowed, otherwise only a single element can be selected.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <p>Fixed options: <pre><code>from onecode import dropdown, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = dropdown(\n    key=\"Dropdown\",\n    value=[\"A\", \"C\"],\n    options=[\"A\", \"B\", \"C\"],\n    multiple=True\n)\nprint(widget)\n</code></pre></p> Output<pre><code>[\"A\", \"C\"]\n</code></pre> <p>Dynamic options: <pre><code>from onecode import csv_reader, dropdown, Mode, Project\n\nProject().mode = Mode.EXECUTE\n\ndf = csv_reader(\"csv\", \"/path/to/file.csv\")\n\nwidget = dropdown(\n    key=\"Dynamic Dropdown\",\n    value=None,\n    options='$csv$.columns',\n    optional=True\n)\nprint(widget)\n</code></pre></p> Output<pre><code>None\n</code></pre>"},{"location":"reference/elements/input_elements_api/#file_input","title":"file_input","text":"<p><pre><code>def file_input(\n    key: str,\n    value: Optional[Union[str, List[str], List[List[str]]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    types: List[Tuple[str, str]] = None,\n    multiple: bool = False,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>A single or multiple file selector.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str], List[List[str]]]]</code> <p>Path to file(s). Files' existence will be checked at execution time. If paths are not absolute, then they are considered relative to the data root folder. See Organizing Data for more information.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display left of the file selector.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Placeholder, ignore until we activate this feature.</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the <code>value</code> may be None.</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Placeholder, ignore until we activate this feature.</p> <code>False</code> <code>types</code> <code>List[Tuple[str, str]]</code> <p>List of filters allowing to narrow file selection in the UI mode. Each filter must be a pair of (name, list of allowed extensions), e.g. <code>(\"Image\", \".jpg .png .jpeg\")</code>. You may use the FileFilter enums for convenience.</p> <code>None</code> <code>multiple</code> <code>bool</code> <p>Set to True if multiple choice is allowed, otherwise only a single element can be selected.</p> <code>False</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used by the <code>Mode.EXTRACT_ALL</code> when dumping attributes to JSON.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import file_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = file_input(\n    key=\"FileInput\",\n    value=[\"/path/to/file1.txt\", \"/path/to/file2.csv\"],\n    multiple=True,\n    tags=['MyTags']\n)\nprint(widget)\n</code></pre> Output<pre><code>[\"/path/to/file1.txt\", \"/path/to/file2.csv\"]\n</code></pre>"},{"location":"reference/elements/input_elements_api/#number_input","title":"number_input","text":"<p><pre><code>def number_input(\n    key: str,\n    value: Optional[Union[float, List[float]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    min: float = None,\n    max: float = None,\n    step: float = None\n)\n</code></pre> </p> <p>A field for numerical values.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[float, List[float]]]</code> <p>Initial numerical value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Placeholder, ignore until we activate this feature.</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the <code>value</code> may be None.</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Placeholder, ignore until we activate this feature.</p> <code>False</code> <code>min</code> <code>float</code> <p>Optionally limit the possible values with a lower bound.</p> <code>None</code> <code>max</code> <code>float</code> <p>Optionally limit the possible values with an upper bound.</p> <code>None</code> <code>step</code> <code>float</code> <p>Optionally set a step used when increment/decrement button are used.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import number_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = number_input(\n    key=\"Number Input\",\n    value=5.1,\n    min=5,\n    max=6\n)\nprint(widget)\n</code></pre> Output<pre><code>5.1\n</code></pre>"},{"location":"reference/elements/input_elements_api/#radio_button","title":"radio_button","text":"<p><pre><code>def radio_button(\n    key: str,\n    value: Optional[Union[str, List[str]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    options: List[str] = [],\n    horizontal: bool = False\n)\n</code></pre> </p> <p>A single choice represented as a group of exclusive radio buttons.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Radio button initially selected.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Placeholder, ignore until we activate this feature.</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the <code>value</code> may be None.</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Placeholder, ignore until we activate this feature.</p> <code>False</code> <code>options</code> <code>List[str]</code> <p>List all possible options available.</p> <code>[]</code> <code>horizontal</code> <code>bool</code> <p>Set to True to have radio buttons displayed horizontally, otherwise radio buttons will be displayed vertically.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <p>Fixed options: <pre><code>from onecode import radio_button, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = radio_button(\n    key=\"RadioButton\",\n    value=\"A\",\n    options=[\"A\", \"B\", \"C\"]\n)\nprint(widget)\n</code></pre></p> Output<pre><code>\"A\"\n</code></pre> <p>Dynamic options: <pre><code>from onecode import csv_reader, radio_button, Mode, Project\n\nProject().mode = Mode.EXECUTE\n\ndf = csv_reader(\"csv\", \"/path/to/file.csv\")\n\nwidget = radio_button(\n    key=\"Dynamic RadioButton\",\n    value=None,\n    options='$csv$.columns',\n    optional=True\n)\n\nassert widget is None\n</code></pre></p>"},{"location":"reference/elements/input_elements_api/#slider","title":"slider","text":"<p><pre><code>def slider(\n    key: str,\n    value: Optional[Union[float, List[float]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    min: float = 0.,\n    max: float = 1.,\n    step: float = 0.1\n)\n</code></pre> </p> <p>A slider for numerical values.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[float, List[float]]]</code> <p>Initial numerical value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Placeholder, ignore until we activate this feature.</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the <code>value</code> may be None.</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Placeholder, ignore until we activate this feature.</p> <code>False</code> <code>min</code> <code>float</code> <p>Mandatory lower bound, defaults to 0.</p> <code>0.0</code> <code>max</code> <code>float</code> <p>Mandatory upper bound, defaults to 1.</p> <code>1.0</code> <code>step</code> <code>float</code> <p>Mandatory step used when incrementing/decrementing the slider, defaults to 0.1.</p> <code>0.1</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import slider, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = slider(\n    key=\"Slider\",\n    value=5.1,\n    min=5,\n    max=6\n)\nprint(widget)\n</code></pre> Output<pre><code>5.1\n</code></pre>"},{"location":"reference/elements/input_elements_api/#text_input","title":"text_input","text":"<p><pre><code>def text_input(\n    key: str,\n    value: Optional[Union[str, List[str]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    max_chars: int = None,\n    placeholder: str = None\n)\n</code></pre> </p> <p>A simple text field.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Initial text value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the text area.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Placeholder, ignore until we activate this feature.</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the <code>value</code> may be None.</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Placeholder, ignore until we activate this feature.</p> <code>False</code> <code>max_chars</code> <code>int</code> <p>Maximum number of characters allowed for this text field.</p> <code>None</code> <code>placeholder</code> <code>str</code> <p>Placeholder text shown whenever there is no value.</p> <code>None</code> <code>multiline</code> <code>Union[bool, int]</code> <p>Set to True or a height in pixels to make it multiline text area.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import text_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = text_input(\n    key=\"TextInput\",\n    value=\"OneCode rocks!\",\n    label=\"My TextInput\"\n)\nprint(widget)\n</code></pre> Output<pre><code>\"OneCode rocks!\"\n</code></pre>"},{"location":"reference/elements/output_elements_api/","title":"Output Elements API","text":"<p>Available output elements for OneCode projects:</p> <ul> <li>file_output</li> </ul>"},{"location":"reference/elements/output_elements_api/#file_output","title":"file_output","text":"<p><pre><code>def file_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None,\n    make_path: bool = False\n)\n</code></pre> </p> <p>Basic information about the file, such as size and file path.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in execution mode. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output file. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>make_path</code> <code>bool</code> <p>True to create the directory structure of the given file path.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>_validate</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import file_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nfile = file_output(\n    key=\"FileOutput\",\n    value=\"/path/to/file.txt\",\n    label=\"My FileOutput\",\n    tags=['TXT'],\n    make_path=True\n)\n\nwith open(file, 'w') as f:\n    f.write('Hello OneCode!')\n\nprint(file)\n</code></pre> Output<pre><code># create /path/to folders\n\"/path/to/file.txt\"\n</code></pre>"}]}