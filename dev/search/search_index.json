{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Manifesto \u00b6 Whether we are in the industry, academia, or simply in our everyday-life, we find ourselves encountering 3 categories of profiles no matter what the topic: people who love to write code but don\u2019t necessarily have an application for it (a.k.a. the developers ). Their pain point is usually finding something useful to create as well as a mass of people to actually use it on a regular basis (a.k.a. the developers\u2019 dream). people who actually have problems to solve but don\u2019t even know how it\u2019s possible to do something about it computerwise-speaking (a.k.a. the experts ). Most of the time a simple solution (e.g. an Excel macro) does the trick: they may be mind-blown and very grateful about it for \u201csaving their life\u201d (a.k.a. the developers\u2019 greatest disappointment, as developers would have loved to create a brand-new cloud-based fully automated web-app synchronized with your phone ready to welcome a million users). Their pain point is finding someone who can identify the root cause of the issues and solve it. people who started as experts and have an affinity for technology (a.k.a. the tech-savvy/data scientists ). They are genuinely interested in programming and usually start with high-level languages such as Python or JavaScript. Very quickly, they write applications that solve their problems and are super happy to share what they have done and how. They have a foot in both worlds: eventually go further and further down to the dark-side... Their pain point? Writing low-hanging fruit solutions may seem easy at first, but when it comes to create a complete application, deploy it and scale it, things get out-of-hands. actually we have a 4 th category, people who don\u2019t care at all about it (a.k.a. the vast majority, e.g. my spouse). Developers can\u2019t stop themselves for trying and trying to convince they should be in the experts or tech-savvy/data scientists category (believe me, I keep trying every time, and 10 years later, it still doesn\u2019t work). Do yourself a favor, just accept it and move on. So, if you\u2019re in that bucket, I guess you can close this page and skip the reading unless you want to know why developers suffer from not being understood. Getting started \u00b6 Well, well, which profile are you? expert tech-savvy/data scientist developer OneCode Overview \u00b6 OneCode for Experts \u00b6 Installation \u00b6 Hosted with by PyPI , simply install with pip : pip install onecode [ tech-expert ] Running a OneCode Project \u00b6 You just received a OneCode Project and would like to run it? In a terminal, go to the root of the OneCode Project (e.g. cd /path/to/onecode/project ), then run it: interactively through the web interface: onecode-start in command line with the default parameter set: python main.py Tip Advanced usage Run with your own dataset: extract the default parameter set: onecode-extract parameters.json update the parameters.json file with your values, preferentially relative to a root data folder (see Best Practices With Data ). run with it: either python main.py parameters.json if your data is located in the ./data folder. or ONECODE_PROJECT_DATA=/path/to/data python main.py parameters.json if your data is located under another folder. Run a specific flow instead of the whole project: python main.py --flow <flow_id> Get the full instructions set: python main.py --help OneCode for Tech-Savvies/Data Scientists \u00b6 Installation \u00b6 Hosted with by PyPI , simply install with pip : pip install onecode [ tech-expert ] Creating a new OneCode Project \u00b6 Installing a new OneCode skeleton to start from onecode-create # then follow the prompts ? Enter the path where to create OneCode project /path/to/examples ? Enter your OneCode project name: HelloWorld ? Pick a name for your main flow: hello_world \u280b Creating new OneCode project Initialized empty Git repository in /path/to/examples/HelloWorld/.git/ \u2705 Created HelloWorld OneCode project To ensure everything is ok, run your project: cd /path/to/examples/HelloWorld python main.py # You should see the following printed [ INFO ] hello_world - hello_world.py:15 - ##################################################################### ###> Hello from hello_world! ###> Fill in this run() function with something awesome! ##################################################################### Read onto the next section to now add some code. Tip Advanced usage Add a new flow to an existing OneCode project Re-organize your project flows Adding code to your project \u00b6 The created Project is a skeleton with a built-in mechanism to run it within the different possible environments. It is therefore preferable not to tamper with the files at the root of the Project, such as main.py , app.py , .onecode.json . Instead, consider your working area as being under the flows folder: feel free to put your own script architecture in there and call your Python code from the run() function. Danger Be aware these 3 important points though: Do not change the flow filenames Do not change the function name run() in the flow Python file Do not change the folder name onecode_ext located in the flows folder nor the the existing files in it. Long explanation a flow is recognized by the project through its filename (matching the flow ID) and the entry point is the run() defined function. So, you can put anything in your flow file, just make sure you keep the default defined function run() and the flow filename untouched. onecode_ext is dedicated to extend/customize OneCode elements, so you can add new files under the onecode_ext folder, however don't edit the existing content and filenames. See the Developers section if you feel adventurous. So, what type of code should you be adding? Basically almost anything you want, the questions to ask yourself are: what input files and parameters should be controllable by the experts? what output files should be made available to the experts? Any of theses files or parameters can be exposed using the OneCode Elements . Here is a quickstart from scratch, asking for a name and output Hello <name> in the console and a file: # HelloWorld/flows/hello_world.py from onecode import Logger , text_input , text_output from slugify import slugify def run (): name = text_input ( key = 'name' , value = '' , label = 'What is your name?' , placeholder = \"Type in your name\" ) if not name : Logger . error ( 'Please type in your name!' ) else : out_string = f 'Hello { name } ' Logger . info ( out_string ) with open ( text_output ( 'output' , f 'hello_ { slugify ( name , separator = \"_\" ) } .txt' ), 'w' ) as f : f . write ( out_string ) Great, how do you test that now? According to the Running a OneCode project section , you have several options: Run it interactively with Streamlit: onecode-start Run it from the command line: python main.py . Wait a minute, you get: [ ERROR ] hello_world - hello_world.py:14 - Please type in your name! Of course, the default value is an empty string '' : name = text_input ( key = 'name' , value = '' , label = 'What is your name?' , placeholder = \"Type in your name\" ) How can you input your own parameter from the command line? You only need a JSON file made of the key-values required by this process. You could create it manually which is ok for this example, however for more complex projects, it could become tedious. Well, there is a magic command for that: onecode-extract params.json will make this JSON for you populated with the default values: { \"name\" : \"\" } Use your favorite text editor to write the values. This command is quite useful, especially when you have multiple parameter sets, simply keep them in a JSON file and run them as needed. From there, run the project with a given parameters set: echo '{\"name\": \"OneCode\"}' > params.json python main.py params.json You should get: [ INFO ] hello_world - hello_world.py:17 - Hello OneCode Congratulations! With the same piece of code, you were able to run it in 3 different ways without having to change the code! That's the spirit of OneCode. Check out the other examples to keep going. Example More examples can be found here : HelloWorld : most basic example demonstrating an input text field and a process returning \"Hello <name>\" in the console logger as well as in a file of the same name hello_<name>.txt . CSV to JSON Converter : example demonstrating simple input/output file fields and converting a CSV file to JSON. Experimental Variography : example demonstrating a diversity of fields through a real geological use case. DeepLearning : example demonstrating some advanced capabilities such as: - multiple steps / flows : ( 1 ) train a neural net ( 2 ) predict . - conditional input : a number field dynamically controls the number of neural network layer parameters to input through the `count` parameter . - creating a custom `InputElement` as part of the `onecode_ext` modules . OneCode for Developers \u00b6 Installation \u00b6 Hosted with by PyPI , simply install with pip : pip install onecode [ developer ] # optionally if you would like to build the documentation locally pip install onecode [ docs ] Checkout the tech-savvy part to get started coding OneCode projects. Extending OneCode \u00b6 There are 2 ways to extend OneCode: within a Project, using the onecode_ext mechanism. It allows to contain the customization specific to a Project. For instance the DeepLearning example , has an element specific to Neural Network definition by combining sliders and dropdown menus to allow experts to easily choose the Neural Network Dense Layers parameters. as a library: add new input/output elements that would be useful for many projects. add new modes to interpret elements in a different ways, e.g. output your custom input parameters format that your cloud platform can ingest, generate code for Panel or Dash, etc. In any case, see Extending OneCode for details on how to do that. Run OneCode self-tests \u00b6 There are several types of tests: unit-tests: check the result validity of elementary operations. regressions: ensure the result of a function does not change through time, regardless of the validity of the result. emulations: check result validity by emulating command line execution (e.g. python main.py ). These tests are made for Linux only. # note: for all these commands, you may add '-n auto' to parallelize tests execution. # run unit and regressions tests python -m pytest tests # run unit and regressions tests in parallel with Pydantic runtime type-checking ONECODE_DO_TYPECHECK=1 python -m pytest tests -n auto # run unit, regressions and emulation tests (Linux only) python -m pytest tests --with-emulations # run tests with coverage: this one is not compatible with the optional '-n auto' coverage run -m pytest tests # display the coverage report: note that it will not reach 100% because of some occasional # platform-specific block code. Our CI runs the coverage on both Linux and Windows platforms, # the reported coverage by our badge on top this page comes from these merged reports. coverage report -m --omit=\"tests/*,*/**/__init__.py\" Contributing to OneCode \u00b6 OneCode is still in its early stages, so it is not opened to external contributions yet. We would prefer to get feedback through GitHub issues and see how OneCode is used and adopted first. CI guidelines, coding standards and best practices will be provided once the repository is opened to contributions. FAQ \u00b6 Why did you choose Streamlit for interfacing OneCode? Are there any alternatives? There are some really good tools out there such as Panel and Dash. Technically, if you're up for it, you can extend OneCode add a Panel mode or a Dash mode. As long as you know the logic of these libraries and are able to determine the code to be generated, OneCode allows you to plug it in. We chose Streamlit for several of reasons: its functioning is the closest one to the envisionned OneCode logic it is simple enough to do everything without involving any explicit callback mechanism it is easier for tech-savvies/data scientists to get started with, especially when it comes to create and customize new elements Why do I need OneCode at all, I could just build my application with Streamlit? That's absolutely true, Streamlit or other alternatives are perfectly suitable for that and as a matter of fact, you can make a more custom application. It is possible your scenario can work out without OneCode and that's definitely ok: pick the right tool for your use case. When it comes to deploying your application for different purposes (batch, interactive, etc.) or in different environments, you may find handy to not have to adapt your original code: it will definitely save you time and frustration and let you focus on the gist of the work rather than the deployment work. You talked about extending OneCode, what does it mean? How do I do that? If you would like to add new elements or customize some elements' behavior, check out the developer section Are there any collaborative platform that run OneCode projects? There is one in the works called GeoLand , centralizing data and OneCode projects. It's at the Proof of Concept (POC) stage. Contact us if you would like be part of the beta-testers cohort. Credits \u00b6 Credits to all open-source libraries that helped build this project and a special thanks to Streamlit and its contributors for making such a great tool on which we can rely.","title":"Getting Started"},{"location":"#manifesto","text":"Whether we are in the industry, academia, or simply in our everyday-life, we find ourselves encountering 3 categories of profiles no matter what the topic: people who love to write code but don\u2019t necessarily have an application for it (a.k.a. the developers ). Their pain point is usually finding something useful to create as well as a mass of people to actually use it on a regular basis (a.k.a. the developers\u2019 dream). people who actually have problems to solve but don\u2019t even know how it\u2019s possible to do something about it computerwise-speaking (a.k.a. the experts ). Most of the time a simple solution (e.g. an Excel macro) does the trick: they may be mind-blown and very grateful about it for \u201csaving their life\u201d (a.k.a. the developers\u2019 greatest disappointment, as developers would have loved to create a brand-new cloud-based fully automated web-app synchronized with your phone ready to welcome a million users). Their pain point is finding someone who can identify the root cause of the issues and solve it. people who started as experts and have an affinity for technology (a.k.a. the tech-savvy/data scientists ). They are genuinely interested in programming and usually start with high-level languages such as Python or JavaScript. Very quickly, they write applications that solve their problems and are super happy to share what they have done and how. They have a foot in both worlds: eventually go further and further down to the dark-side... Their pain point? Writing low-hanging fruit solutions may seem easy at first, but when it comes to create a complete application, deploy it and scale it, things get out-of-hands. actually we have a 4 th category, people who don\u2019t care at all about it (a.k.a. the vast majority, e.g. my spouse). Developers can\u2019t stop themselves for trying and trying to convince they should be in the experts or tech-savvy/data scientists category (believe me, I keep trying every time, and 10 years later, it still doesn\u2019t work). Do yourself a favor, just accept it and move on. So, if you\u2019re in that bucket, I guess you can close this page and skip the reading unless you want to know why developers suffer from not being understood.","title":"Manifesto"},{"location":"#getting-started","text":"Well, well, which profile are you? expert tech-savvy/data scientist developer","title":"Getting started"},{"location":"#onecode-overview","text":"","title":"OneCode Overview"},{"location":"#onecode-for-experts","text":"","title":"OneCode for Experts"},{"location":"#installation","text":"Hosted with by PyPI , simply install with pip : pip install onecode [ tech-expert ]","title":"Installation"},{"location":"#running-a-onecode-project","text":"You just received a OneCode Project and would like to run it? In a terminal, go to the root of the OneCode Project (e.g. cd /path/to/onecode/project ), then run it: interactively through the web interface: onecode-start in command line with the default parameter set: python main.py Tip Advanced usage Run with your own dataset: extract the default parameter set: onecode-extract parameters.json update the parameters.json file with your values, preferentially relative to a root data folder (see Best Practices With Data ). run with it: either python main.py parameters.json if your data is located in the ./data folder. or ONECODE_PROJECT_DATA=/path/to/data python main.py parameters.json if your data is located under another folder. Run a specific flow instead of the whole project: python main.py --flow <flow_id> Get the full instructions set: python main.py --help","title":"Running a OneCode Project"},{"location":"#onecode-for-tech-savviesdata-scientists","text":"","title":"OneCode for Tech-Savvies/Data Scientists"},{"location":"#installation_1","text":"Hosted with by PyPI , simply install with pip : pip install onecode [ tech-expert ]","title":"Installation"},{"location":"#creating-a-new-onecode-project","text":"Installing a new OneCode skeleton to start from onecode-create # then follow the prompts ? Enter the path where to create OneCode project /path/to/examples ? Enter your OneCode project name: HelloWorld ? Pick a name for your main flow: hello_world \u280b Creating new OneCode project Initialized empty Git repository in /path/to/examples/HelloWorld/.git/ \u2705 Created HelloWorld OneCode project To ensure everything is ok, run your project: cd /path/to/examples/HelloWorld python main.py # You should see the following printed [ INFO ] hello_world - hello_world.py:15 - ##################################################################### ###> Hello from hello_world! ###> Fill in this run() function with something awesome! ##################################################################### Read onto the next section to now add some code. Tip Advanced usage Add a new flow to an existing OneCode project Re-organize your project flows","title":"Creating a new OneCode Project"},{"location":"#adding-code-to-your-project","text":"The created Project is a skeleton with a built-in mechanism to run it within the different possible environments. It is therefore preferable not to tamper with the files at the root of the Project, such as main.py , app.py , .onecode.json . Instead, consider your working area as being under the flows folder: feel free to put your own script architecture in there and call your Python code from the run() function. Danger Be aware these 3 important points though: Do not change the flow filenames Do not change the function name run() in the flow Python file Do not change the folder name onecode_ext located in the flows folder nor the the existing files in it. Long explanation a flow is recognized by the project through its filename (matching the flow ID) and the entry point is the run() defined function. So, you can put anything in your flow file, just make sure you keep the default defined function run() and the flow filename untouched. onecode_ext is dedicated to extend/customize OneCode elements, so you can add new files under the onecode_ext folder, however don't edit the existing content and filenames. See the Developers section if you feel adventurous. So, what type of code should you be adding? Basically almost anything you want, the questions to ask yourself are: what input files and parameters should be controllable by the experts? what output files should be made available to the experts? Any of theses files or parameters can be exposed using the OneCode Elements . Here is a quickstart from scratch, asking for a name and output Hello <name> in the console and a file: # HelloWorld/flows/hello_world.py from onecode import Logger , text_input , text_output from slugify import slugify def run (): name = text_input ( key = 'name' , value = '' , label = 'What is your name?' , placeholder = \"Type in your name\" ) if not name : Logger . error ( 'Please type in your name!' ) else : out_string = f 'Hello { name } ' Logger . info ( out_string ) with open ( text_output ( 'output' , f 'hello_ { slugify ( name , separator = \"_\" ) } .txt' ), 'w' ) as f : f . write ( out_string ) Great, how do you test that now? According to the Running a OneCode project section , you have several options: Run it interactively with Streamlit: onecode-start Run it from the command line: python main.py . Wait a minute, you get: [ ERROR ] hello_world - hello_world.py:14 - Please type in your name! Of course, the default value is an empty string '' : name = text_input ( key = 'name' , value = '' , label = 'What is your name?' , placeholder = \"Type in your name\" ) How can you input your own parameter from the command line? You only need a JSON file made of the key-values required by this process. You could create it manually which is ok for this example, however for more complex projects, it could become tedious. Well, there is a magic command for that: onecode-extract params.json will make this JSON for you populated with the default values: { \"name\" : \"\" } Use your favorite text editor to write the values. This command is quite useful, especially when you have multiple parameter sets, simply keep them in a JSON file and run them as needed. From there, run the project with a given parameters set: echo '{\"name\": \"OneCode\"}' > params.json python main.py params.json You should get: [ INFO ] hello_world - hello_world.py:17 - Hello OneCode Congratulations! With the same piece of code, you were able to run it in 3 different ways without having to change the code! That's the spirit of OneCode. Check out the other examples to keep going. Example More examples can be found here : HelloWorld : most basic example demonstrating an input text field and a process returning \"Hello <name>\" in the console logger as well as in a file of the same name hello_<name>.txt . CSV to JSON Converter : example demonstrating simple input/output file fields and converting a CSV file to JSON. Experimental Variography : example demonstrating a diversity of fields through a real geological use case. DeepLearning : example demonstrating some advanced capabilities such as: - multiple steps / flows : ( 1 ) train a neural net ( 2 ) predict . - conditional input : a number field dynamically controls the number of neural network layer parameters to input through the `count` parameter . - creating a custom `InputElement` as part of the `onecode_ext` modules .","title":"Adding code to your project"},{"location":"#onecode-for-developers","text":"","title":"OneCode for Developers"},{"location":"#installation_2","text":"Hosted with by PyPI , simply install with pip : pip install onecode [ developer ] # optionally if you would like to build the documentation locally pip install onecode [ docs ] Checkout the tech-savvy part to get started coding OneCode projects.","title":"Installation"},{"location":"#extending-onecode","text":"There are 2 ways to extend OneCode: within a Project, using the onecode_ext mechanism. It allows to contain the customization specific to a Project. For instance the DeepLearning example , has an element specific to Neural Network definition by combining sliders and dropdown menus to allow experts to easily choose the Neural Network Dense Layers parameters. as a library: add new input/output elements that would be useful for many projects. add new modes to interpret elements in a different ways, e.g. output your custom input parameters format that your cloud platform can ingest, generate code for Panel or Dash, etc. In any case, see Extending OneCode for details on how to do that.","title":"Extending OneCode"},{"location":"#run-onecode-self-tests","text":"There are several types of tests: unit-tests: check the result validity of elementary operations. regressions: ensure the result of a function does not change through time, regardless of the validity of the result. emulations: check result validity by emulating command line execution (e.g. python main.py ). These tests are made for Linux only. # note: for all these commands, you may add '-n auto' to parallelize tests execution. # run unit and regressions tests python -m pytest tests # run unit and regressions tests in parallel with Pydantic runtime type-checking ONECODE_DO_TYPECHECK=1 python -m pytest tests -n auto # run unit, regressions and emulation tests (Linux only) python -m pytest tests --with-emulations # run tests with coverage: this one is not compatible with the optional '-n auto' coverage run -m pytest tests # display the coverage report: note that it will not reach 100% because of some occasional # platform-specific block code. Our CI runs the coverage on both Linux and Windows platforms, # the reported coverage by our badge on top this page comes from these merged reports. coverage report -m --omit=\"tests/*,*/**/__init__.py\"","title":"Run OneCode self-tests"},{"location":"#contributing-to-onecode","text":"OneCode is still in its early stages, so it is not opened to external contributions yet. We would prefer to get feedback through GitHub issues and see how OneCode is used and adopted first. CI guidelines, coding standards and best practices will be provided once the repository is opened to contributions.","title":"Contributing to OneCode"},{"location":"#faq","text":"Why did you choose Streamlit for interfacing OneCode? Are there any alternatives? There are some really good tools out there such as Panel and Dash. Technically, if you're up for it, you can extend OneCode add a Panel mode or a Dash mode. As long as you know the logic of these libraries and are able to determine the code to be generated, OneCode allows you to plug it in. We chose Streamlit for several of reasons: its functioning is the closest one to the envisionned OneCode logic it is simple enough to do everything without involving any explicit callback mechanism it is easier for tech-savvies/data scientists to get started with, especially when it comes to create and customize new elements Why do I need OneCode at all, I could just build my application with Streamlit? That's absolutely true, Streamlit or other alternatives are perfectly suitable for that and as a matter of fact, you can make a more custom application. It is possible your scenario can work out without OneCode and that's definitely ok: pick the right tool for your use case. When it comes to deploying your application for different purposes (batch, interactive, etc.) or in different environments, you may find handy to not have to adapt your original code: it will definitely save you time and frustration and let you focus on the gist of the work rather than the deployment work. You talked about extending OneCode, what does it mean? How do I do that? If you would like to add new elements or customize some elements' behavior, check out the developer section Are there any collaborative platform that run OneCode projects? There is one in the works called GeoLand , centralizing data and OneCode projects. It's at the Proof of Concept (POC) stage. Contact us if you would like be part of the beta-testers cohort.","title":"FAQ"},{"location":"#credits","text":"Credits to all open-source libraries that helped build this project and a special thanks to Streamlit and its contributors for making such a great tool on which we can rely.","title":"Credits"},{"location":"extending_onecode/","text":"Extending OneCode \u00b6 OneCode principle overview \u00b6 Extend with new elements inside a OneCode Project \u00b6 Each OneCode Project contains by default a folder onecode_ext inside its flows folder. The mechanism is already in place so that you can simply add your new elements and they will be automatically registered as OneCode elements. Input and output elements respectively go to flows/onecode_ext/input_elements/ and flows/onecode_ext/output_elements folders. You only need to follow these 2 instructions: The Python filename must be snake case and the corresponding element class name must be Pascal case. For instance, my_new_element.py => class MyNewElement . Re-implement the abstractmethod defined in the InputElement or OutputElement base class according its documentation. Here is a simple example: # flows/onecode_ext/input_elements/my_header_element.py from onecode import InputElement class MyHeaderElement ( InputElement ): def __init__ ( self , key : str , value : str ): super () . __init__ ( key , value ) @property def _value_type ( self ) -> type : return str def streamlit ( self , id : str ) -> str : return f \"\"\" { self . key } = st.header(''' { self . value } ''') \"\"\" def _validate ( self , value : str ) -> None : pass Then call it in your flow code: # flows/my_flow.py from onecode_ext import my_header_element def run (): x = my_header_element ( 'x' , 'My Header!' )) # ... As easy as that. If you're interested on how it works under the hood, check out the section below . Tip For a real use-case example, look at the DeepLearning project Extend as a library \u00b6 For use-cases going beyond the scope of a single OneCode Project, you may consider writing your own library. For example, you could have specific elements used across many projects and/or dedicated mode to be compatible with your internal tools such as a cloud platform. To add new elements, you will manually code what onecode_ext does automatically for you: Set a separate folder for your input and output elements, then add the following code to its __init__ files: # input elements from onecode import import_input import_input ( __file__ , __name__ ) # output elements from onecode import import_output import_output ( __file__ , __name__ ) Refer to Registering input elements and Registering output elements for more information. For any new element: The Python filename must be snake case and the corresponding element class name must be Pascal case. For instance, my_new_element.py => class MyNewElement . Re-implement the abstractmethod defined in the InputElement or OutputElement base class according its documentation. From there, to ensure your module is taken into account by CLI commands, add --module yourcode to them: # Start with streamlit onecode-start --module <library_name> # JSON parameter extraction onecode-extract params.json --module <library_name> You may also: add new Mode : define a mixin class and inherit all elements with the mixin add new CLI: you may use the CLI Utilities or even start from the OneCode CLI original code as it is open source with MIT License. Example Here is an example of library called yourcode extending OneCode and demonstrating: a new CLI extracting parameters as TOML a radio button widget accepting runtime [Expressionstips_and_tricks#using-runtime-expressions-in-elements) Registering input elements \u00b6 def import_input ( init_file : str , module_name : str ) -> None : Use this function to register your InputElement . Here is what it does for you in details. For each file located in the same folder as the init_file path: import the corresponding class: the class name must be the Pascal-case of the filename (e.g. file_input.py => class FileInput ) register the class as an element, i-e it will be recognized by the OneCode interpreter export the class as-is (allow for subclassing by a third-party) export a new function matching the filename: it wrapps around the class for convenience by simply initializing it, then calling it. Example def file_input ( * args , ** kwargs ): return FileInput ( * args , ** kwargs )() # This makes a convenient usage in the client code: x = onecode . file_input ( 'test' , 'file,txt' ) # Rather than writing: x = onecode . FileInput ( 'test' , 'file.txt' )() export a new variable specifying the type of element being INPUT . Example file_input_type = ElementType . INPUT This is used internally by OneCode interpreter. Parameters: Name Type Description Default init_file str path to the init .py file located in the same directory as the input elements. required module_name str Python name of the module to import the elements under. The module will then be available for importing using regular Python import statements. required Registering output elements \u00b6 def import_output ( init_file : str , module_name : str ) -> None : Use this function to register your OutputElement . Here is what it does for you in details. For each file located in the same folder as the init_file path: import the corresponding class: the class name must be the Pascal-case of the filename (e.g. file_output.py => class FileOutput ) register the class as an element, i-e it will be recognized by the OneCode interpreter export the class as-is (allow for subclassing by a third-party) export a new function matching the filename: it wrapps around the class for convenience by simply initializing it, then calling it. There is one important difference with InputElement : a mechanism is in place to allow calling the OutputElement.static_call() method when no argument are provided to the function. It is typically used internally by the OneCode interpreter to properly handle cases of dynamically defined parameters. Example def file_output ( * args , ** kwargs ): empty_ctor = not args and not kwargs return FileOutput . static_call ( FileOutput ) if empty_ctor else FileOutput ( * args , ** kwargs )() # This makes a convenient usage in the client code: x = onecode . file_output ( 'test' , 'file,txt' ) # Or for dynamically defined parameters: x = onecode . file_output ( 'test' , os . path . join ( os . getcwd (), f 'file_ { my_var } ,txt' ) # Rather than writing: x = onecode . FileOutput ( 'test' , 'file.txt' )() export a new variable specifying the type of element being OUTPUT . Example file_output_type = ElementType . OUTPUT This is used internally by OneCode interpreter Parameters: Name Type Description Default init_file str path to the init .py file located in the same directory as the input elements. required module_name str Python name of the module to import the elements under. The module will then be available for importing using regular Python import statements. required","title":"Extending OneCode"},{"location":"extending_onecode/#extending-onecode","text":"","title":"Extending OneCode"},{"location":"extending_onecode/#onecode-principle-overview","text":"","title":"OneCode principle overview"},{"location":"extending_onecode/#extend-with-new-elements-inside-a-onecode-project","text":"Each OneCode Project contains by default a folder onecode_ext inside its flows folder. The mechanism is already in place so that you can simply add your new elements and they will be automatically registered as OneCode elements. Input and output elements respectively go to flows/onecode_ext/input_elements/ and flows/onecode_ext/output_elements folders. You only need to follow these 2 instructions: The Python filename must be snake case and the corresponding element class name must be Pascal case. For instance, my_new_element.py => class MyNewElement . Re-implement the abstractmethod defined in the InputElement or OutputElement base class according its documentation. Here is a simple example: # flows/onecode_ext/input_elements/my_header_element.py from onecode import InputElement class MyHeaderElement ( InputElement ): def __init__ ( self , key : str , value : str ): super () . __init__ ( key , value ) @property def _value_type ( self ) -> type : return str def streamlit ( self , id : str ) -> str : return f \"\"\" { self . key } = st.header(''' { self . value } ''') \"\"\" def _validate ( self , value : str ) -> None : pass Then call it in your flow code: # flows/my_flow.py from onecode_ext import my_header_element def run (): x = my_header_element ( 'x' , 'My Header!' )) # ... As easy as that. If you're interested on how it works under the hood, check out the section below . Tip For a real use-case example, look at the DeepLearning project","title":"Extend with new elements inside a OneCode Project"},{"location":"extending_onecode/#extend-as-a-library","text":"For use-cases going beyond the scope of a single OneCode Project, you may consider writing your own library. For example, you could have specific elements used across many projects and/or dedicated mode to be compatible with your internal tools such as a cloud platform. To add new elements, you will manually code what onecode_ext does automatically for you: Set a separate folder for your input and output elements, then add the following code to its __init__ files: # input elements from onecode import import_input import_input ( __file__ , __name__ ) # output elements from onecode import import_output import_output ( __file__ , __name__ ) Refer to Registering input elements and Registering output elements for more information. For any new element: The Python filename must be snake case and the corresponding element class name must be Pascal case. For instance, my_new_element.py => class MyNewElement . Re-implement the abstractmethod defined in the InputElement or OutputElement base class according its documentation. From there, to ensure your module is taken into account by CLI commands, add --module yourcode to them: # Start with streamlit onecode-start --module <library_name> # JSON parameter extraction onecode-extract params.json --module <library_name> You may also: add new Mode : define a mixin class and inherit all elements with the mixin add new CLI: you may use the CLI Utilities or even start from the OneCode CLI original code as it is open source with MIT License. Example Here is an example of library called yourcode extending OneCode and demonstrating: a new CLI extracting parameters as TOML a radio button widget accepting runtime [Expressionstips_and_tricks#using-runtime-expressions-in-elements)","title":"Extend as a library"},{"location":"extending_onecode/#registering-input-elements","text":"def import_input ( init_file : str , module_name : str ) -> None : Use this function to register your InputElement . Here is what it does for you in details. For each file located in the same folder as the init_file path: import the corresponding class: the class name must be the Pascal-case of the filename (e.g. file_input.py => class FileInput ) register the class as an element, i-e it will be recognized by the OneCode interpreter export the class as-is (allow for subclassing by a third-party) export a new function matching the filename: it wrapps around the class for convenience by simply initializing it, then calling it. Example def file_input ( * args , ** kwargs ): return FileInput ( * args , ** kwargs )() # This makes a convenient usage in the client code: x = onecode . file_input ( 'test' , 'file,txt' ) # Rather than writing: x = onecode . FileInput ( 'test' , 'file.txt' )() export a new variable specifying the type of element being INPUT . Example file_input_type = ElementType . INPUT This is used internally by OneCode interpreter. Parameters: Name Type Description Default init_file str path to the init .py file located in the same directory as the input elements. required module_name str Python name of the module to import the elements under. The module will then be available for importing using regular Python import statements. required","title":"Registering input elements"},{"location":"extending_onecode/#registering-output-elements","text":"def import_output ( init_file : str , module_name : str ) -> None : Use this function to register your OutputElement . Here is what it does for you in details. For each file located in the same folder as the init_file path: import the corresponding class: the class name must be the Pascal-case of the filename (e.g. file_output.py => class FileOutput ) register the class as an element, i-e it will be recognized by the OneCode interpreter export the class as-is (allow for subclassing by a third-party) export a new function matching the filename: it wrapps around the class for convenience by simply initializing it, then calling it. There is one important difference with InputElement : a mechanism is in place to allow calling the OutputElement.static_call() method when no argument are provided to the function. It is typically used internally by the OneCode interpreter to properly handle cases of dynamically defined parameters. Example def file_output ( * args , ** kwargs ): empty_ctor = not args and not kwargs return FileOutput . static_call ( FileOutput ) if empty_ctor else FileOutput ( * args , ** kwargs )() # This makes a convenient usage in the client code: x = onecode . file_output ( 'test' , 'file,txt' ) # Or for dynamically defined parameters: x = onecode . file_output ( 'test' , os . path . join ( os . getcwd (), f 'file_ { my_var } ,txt' ) # Rather than writing: x = onecode . FileOutput ( 'test' , 'file.txt' )() export a new variable specifying the type of element being OUTPUT . Example file_output_type = ElementType . OUTPUT This is used internally by OneCode interpreter Parameters: Name Type Description Default init_file str path to the init .py file located in the same directory as the input elements. required module_name str Python name of the module to import the elements under. The module will then be available for importing using regular Python import statements. required","title":"Registering output elements"},{"location":"tips_and_tricks/","text":"Tips and Tricks \u00b6 Best practices with data \u00b6 It is strongly advised to setup your input/output data files hierarchy relative to a root folder, so that when you deploy your application, experts can simply specify a different root data path and things will work out great. For instance: import os from onecode import file_input , Project , Mode project = Project () project . mode = Mode . EXECUTE file = os . path . join ( 'region' , 'model.h5' ) x = file_input ( 'x' , file ) will automatically append the path region/model.h5 to your Project data path. print ( f 'Are path equals? { x == os . path . join ( project . data_root , file ) } ' ) Output Are path equals ? True From there, any experts can have a data folder with the same hierarchy anywhere on their disk and launch the script by simply changing the data path at runtime: ONECODE_PROJECT_DATA = /path/to/my/data python main.py Without changing the code, the OneCode project can execute properly on different machines. On the other hand, as soon as you specify an absolute path for your input files, the Project data path is ignored. There could be some special cases for doing that, but most of the time you should use relative paths. Note Input elements such as csv_reader and file_input make the path relative to Project().data_root . Output elements such as csv_output , file_output , image_output and text_output make the path relative to {Project().data_root}/{Project.current_flow}/outputs . Tip How is the Project data path determined? The data path is initialized according to the following rules ordered by priority: to ONECODE_PROJECT_DATA if provided in the Environment variables to the data folder located in the same directory from where the project is run if existing (typically the OneCode project data folder) to the current working directory for all other cases Using runtime Expressions in elements \u00b6 For Streamlit mode, some input element parameters can be dynamic, like for instance, changing the number of file_input widget based on a slider value that is changed on the fly by an expert. All input elements can accept runtime expressions regarding the count and optional parameters. Expressions are in Python and may refer to defined elements values by wrapping around their key a $ sign. For instance, getting one more checkbox instances than an input number: x = number_input ( 'x' , 1 , min = 0 ) y = checkbox ( 'y' , [ False , False ], count = '$x$ + 1' ) Or disabling a file_input if the value of a slider is greater than 0.5 : x = slider ( 'x' , 0.4 ) y = file_input ( 'y' , None , optional = '$x$ > 0.5' ) Some elements may have specific parameters that can accept expressions, like dropdown . For instance a dropdown can propose a selection from the columns of a selected CSV file: df = csv_reader ( \"csv\" , \"/path/to/file.csv\" ) widget = dropdown ( key = \"Dynamic Dropdown\" , value = None , options = '$csv$.columns' , optional = True ) For a real use-case example, look at the DeepLearning project : the columns in the dropdown menu are read from the CSV input file the number of neural net dense layers adjust based on a number input field.","title":"Tips and Tricks"},{"location":"tips_and_tricks/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"tips_and_tricks/#best-practices-with-data","text":"It is strongly advised to setup your input/output data files hierarchy relative to a root folder, so that when you deploy your application, experts can simply specify a different root data path and things will work out great. For instance: import os from onecode import file_input , Project , Mode project = Project () project . mode = Mode . EXECUTE file = os . path . join ( 'region' , 'model.h5' ) x = file_input ( 'x' , file ) will automatically append the path region/model.h5 to your Project data path. print ( f 'Are path equals? { x == os . path . join ( project . data_root , file ) } ' ) Output Are path equals ? True From there, any experts can have a data folder with the same hierarchy anywhere on their disk and launch the script by simply changing the data path at runtime: ONECODE_PROJECT_DATA = /path/to/my/data python main.py Without changing the code, the OneCode project can execute properly on different machines. On the other hand, as soon as you specify an absolute path for your input files, the Project data path is ignored. There could be some special cases for doing that, but most of the time you should use relative paths. Note Input elements such as csv_reader and file_input make the path relative to Project().data_root . Output elements such as csv_output , file_output , image_output and text_output make the path relative to {Project().data_root}/{Project.current_flow}/outputs . Tip How is the Project data path determined? The data path is initialized according to the following rules ordered by priority: to ONECODE_PROJECT_DATA if provided in the Environment variables to the data folder located in the same directory from where the project is run if existing (typically the OneCode project data folder) to the current working directory for all other cases","title":"Best practices with data"},{"location":"tips_and_tricks/#using-runtime-expressions-in-elements","text":"For Streamlit mode, some input element parameters can be dynamic, like for instance, changing the number of file_input widget based on a slider value that is changed on the fly by an expert. All input elements can accept runtime expressions regarding the count and optional parameters. Expressions are in Python and may refer to defined elements values by wrapping around their key a $ sign. For instance, getting one more checkbox instances than an input number: x = number_input ( 'x' , 1 , min = 0 ) y = checkbox ( 'y' , [ False , False ], count = '$x$ + 1' ) Or disabling a file_input if the value of a slider is greater than 0.5 : x = slider ( 'x' , 0.4 ) y = file_input ( 'y' , None , optional = '$x$ > 0.5' ) Some elements may have specific parameters that can accept expressions, like dropdown . For instance a dropdown can propose a selection from the columns of a selected CSV file: df = csv_reader ( \"csv\" , \"/path/to/file.csv\" ) widget = dropdown ( key = \"Dynamic Dropdown\" , value = None , options = '$csv$.columns' , optional = True ) For a real use-case example, look at the DeepLearning project : the columns in the dropdown menu are read from the CSV input file the number of neural net dense layers adjust based on a number input field.","title":"Using runtime Expressions in elements"},{"location":"reference/base/enums/","text":"Enumerations \u00b6 How to use Enums Enums can be used in functions as Python object (int, float or strings) or as OneCode attribute. For example from oncode import file_input , FileFilter widget = file_input ( key = \"FileInput\" , value = \"/path/to/file1.txt\" , types = [ FileFilter . IMAGE ] ) is equivalent to from oncode import file_input , FileFilter widget = file_input ( key = \"FileInput\" , value = \"/path/to/file1.txt\" , types = [( \"Image\" , \".jpg .png .jpeg\" )] ) ConfigOption \u00b6 Bases: str , Enum Available options to control the configuration of the project. FLUSH_STDOUT : to force flushing the logger \"FLUSH_STDOUT\" ElementType \u00b6 Bases: str , Enum Available element type variables. These element types are typically used by specific modes (e.g. EXTRACT , EXTRACT_ALL and STREAMLIT modes). INPUT : InputElement type \"INPUT\" OUTPUT : OutputElement Type \"OUTPUT\" Env \u00b6 Bases: str , Enum Available environment variables for OneCode projects: ONECODE_PROJECT_DATA : use this variable to overwrite default data location \"ONECODE_PROJECT_DATA\" ONECODE_CONFIG_FILE : name of the file containing OneCode project configurations \".onecode.json\" ONECODE_DO_TYPECHECK : set to 1 to force runtime type-checking with Pydantic \"ONECODE_DO_TYPECHECK\" FileFilter \u00b6 Bases: tuple Available file filters, typically used by FileInput Element in STREAMLIT mode. It allows to filter file selection within the Open File Dialog. File filters are a Tuple made of 2 parts: (name of the filter, file extensions separated by whitespaces) . CSV (\"CSV\", \".csv\") PYTHON (\"Python\", \".py\") IMAGE (\"Image\", \".jpg .png .jpeg\") ZIP (\"ZIP\", \".zip .gz .tar.gz .7z\") Keyword \u00b6 Bases: str , Enum Reserved keywords for the Streamlit app. DATA : Streamlit variable holding the data \"_DATA_\" Mode \u00b6 Bases: str , Enum Available modes to run OneCode projects: CONSOLE : return the initial element class. Typically used in the interactive Python console. It is the default Project() mode. \"_console\" EXECUTE : run the project with the default provided values. Typically used for running the Python scripts from the command line: python main.py \"_execute\" LOAD_THEN_EXECUTE : read parameters previously loaded in Project().data . Typically used for running the Python scripts from the command line: python main.py params.json \"_load_then_execute\" EXTRACT : extract parameters and their default value to JSON. It may be used either through regular Python scripts or the CLI. \"_extract\" EXTRACT_ALL : extract parameters, their default value and all their attributes (kind, name, etc.) to JSON. It may be used either through regular Python scripts or the CLI. \"_extract_all\" STREAMLIT : generate the Streamlit app code and run it. Typically used through the onecode-start CLI. \"_build_streamlit\" These modes correspond to the function names of the Input/Output Element objects (e.g. InputElement._execute() ). Therefore you can easily extend Input/Output Element with new modes by simply implement new methods in a derived class and set the mode to it. Example from onecode import InputElement , process_call_graph , Project class MyElement ( InputElement ): # ... inherit InputElement methods as needed def _my_new_mode ( self ): # implement the gist of your new mode here # ... def do_my_new_mode ( onecode_project_path : str ): Project () . mode = '_my_new_mode' result = process_call_graph ( onecode_project_path ) # do something with result # ...","title":"Enumerator"},{"location":"reference/base/enums/#enumerations","text":"How to use Enums Enums can be used in functions as Python object (int, float or strings) or as OneCode attribute. For example from oncode import file_input , FileFilter widget = file_input ( key = \"FileInput\" , value = \"/path/to/file1.txt\" , types = [ FileFilter . IMAGE ] ) is equivalent to from oncode import file_input , FileFilter widget = file_input ( key = \"FileInput\" , value = \"/path/to/file1.txt\" , types = [( \"Image\" , \".jpg .png .jpeg\" )] )","title":"Enumerations"},{"location":"reference/base/enums/#onecode.base.enums.ConfigOption","text":"Bases: str , Enum Available options to control the configuration of the project. FLUSH_STDOUT : to force flushing the logger \"FLUSH_STDOUT\"","title":"ConfigOption"},{"location":"reference/base/enums/#onecode.base.enums.ElementType","text":"Bases: str , Enum Available element type variables. These element types are typically used by specific modes (e.g. EXTRACT , EXTRACT_ALL and STREAMLIT modes). INPUT : InputElement type \"INPUT\" OUTPUT : OutputElement Type \"OUTPUT\"","title":"ElementType"},{"location":"reference/base/enums/#onecode.base.enums.Env","text":"Bases: str , Enum Available environment variables for OneCode projects: ONECODE_PROJECT_DATA : use this variable to overwrite default data location \"ONECODE_PROJECT_DATA\" ONECODE_CONFIG_FILE : name of the file containing OneCode project configurations \".onecode.json\" ONECODE_DO_TYPECHECK : set to 1 to force runtime type-checking with Pydantic \"ONECODE_DO_TYPECHECK\"","title":"Env"},{"location":"reference/base/enums/#onecode.base.enums.FileFilter","text":"Bases: tuple Available file filters, typically used by FileInput Element in STREAMLIT mode. It allows to filter file selection within the Open File Dialog. File filters are a Tuple made of 2 parts: (name of the filter, file extensions separated by whitespaces) . CSV (\"CSV\", \".csv\") PYTHON (\"Python\", \".py\") IMAGE (\"Image\", \".jpg .png .jpeg\") ZIP (\"ZIP\", \".zip .gz .tar.gz .7z\")","title":"FileFilter"},{"location":"reference/base/enums/#onecode.base.enums.Keyword","text":"Bases: str , Enum Reserved keywords for the Streamlit app. DATA : Streamlit variable holding the data \"_DATA_\"","title":"Keyword"},{"location":"reference/base/enums/#onecode.base.enums.Mode","text":"Bases: str , Enum Available modes to run OneCode projects: CONSOLE : return the initial element class. Typically used in the interactive Python console. It is the default Project() mode. \"_console\" EXECUTE : run the project with the default provided values. Typically used for running the Python scripts from the command line: python main.py \"_execute\" LOAD_THEN_EXECUTE : read parameters previously loaded in Project().data . Typically used for running the Python scripts from the command line: python main.py params.json \"_load_then_execute\" EXTRACT : extract parameters and their default value to JSON. It may be used either through regular Python scripts or the CLI. \"_extract\" EXTRACT_ALL : extract parameters, their default value and all their attributes (kind, name, etc.) to JSON. It may be used either through regular Python scripts or the CLI. \"_extract_all\" STREAMLIT : generate the Streamlit app code and run it. Typically used through the onecode-start CLI. \"_build_streamlit\" These modes correspond to the function names of the Input/Output Element objects (e.g. InputElement._execute() ). Therefore you can easily extend Input/Output Element with new modes by simply implement new methods in a derived class and set the mode to it. Example from onecode import InputElement , process_call_graph , Project class MyElement ( InputElement ): # ... inherit InputElement methods as needed def _my_new_mode ( self ): # implement the gist of your new mode here # ... def do_my_new_mode ( onecode_project_path : str ): Project () . mode = '_my_new_mode' result = process_call_graph ( onecode_project_path ) # do something with result # ...","title":"Mode"},{"location":"reference/base/logger/","text":"Logger \u00b6 ColoredFormatter \u00b6 Bases: logging . Formatter Logger class formatting messages in a specific way with colors interpretable by the terminal/console according to the log level: DEBUG and INFO : grey WARNING : yellow ERROR : red CRITICAL : bold red Message is formatted like this: timestamp [ log_level ] current_flow_name - filename:LOC - actual_message format ( record ) \u00b6 Format the given record Parameters: Name Type Description Default record logging . LogRecord Record passing through the formatter. See Python logging for more info. required Returns: Type Description str The formatted text. Logger \u00b6 Single Logger object to handle Python logging within OneCode projects. The default logging level is INFO. See set_level() to change it. Use the static methods debug() , info() , warning() , error() , and critical() to conveniently log your messages with the corresponding logging level. By default, the ColoredFormatter is used. You may add other logging handlers using add_handler() , for instance to redirect logs to a file. Example import logging from onecode import Logger Logger () . set_level ( logging . DEBUG ) Logger . debug ( \"debug\" ) Logger . info ( \"info\" ) Logger . warning ( \"warning\" ) Logger . error ( \"error\" ) Logger . critical ( \"critical\" ) _flush () staticmethod \u00b6 Force flush to stdout if ConfigOption.FLUSH_STDOUT is True. See Project.config for more information. add_handler ( handler = None ) \u00b6 Add an extra handler in addition to the default console stream one. Nothing is done if handler is None. Parameters: Name Type Description Default handler Optional [ logging . Handler ] New handler to add. None Example import logging from onecode import Logger handler = logging . FileHandler ( \"debug.log\" ) Logger () . add_handler ( handler ) Logger . error ( 'oops!' ) # will print to console in red and to file \"debug.log\" critical ( msg ) staticmethod \u00b6 Convenience function to log a critical message. Parameters: Name Type Description Default msg str Message to log. required debug ( msg ) staticmethod \u00b6 Convenience function to log a debug message. Parameters: Name Type Description Default msg str Message to log. required error ( msg ) staticmethod \u00b6 Convenience function to log an error message. Parameters: Name Type Description Default msg str Message to log. required info ( msg ) staticmethod \u00b6 Convenience function to log an info message. Parameters: Name Type Description Default msg str Message to log. required logger ( stacklevel = 1 ) \u00b6 Get the Python Logger object corresponding to the given stack level. Preferentially use convenience methods debug() , info() , warning() , error() , and critical() . Parameters: Name Type Description Default stacklevel int Number of hops back in the function call stack to tie the logger to. By default, it is the last function calling this logger() method. 1 Returns: Type Description logging . Logger Python Logger object. reset () \u00b6 Remove all added handlers attached to the logger (see logging.removeHandler() for more info) and reset to the default console stream handler with the ColoredFormatter . set_level ( level ) \u00b6 Set the logger level. Default logging is INFO. Parameters: Name Type Description Default level int Numerical value to set the logging level to. See logging levels for more information. required warning ( msg ) staticmethod \u00b6 Convenience function to log a warning message. Parameters: Name Type Description Default msg str Message to log. required","title":"Logger"},{"location":"reference/base/logger/#logger","text":"","title":"Logger"},{"location":"reference/base/logger/#onecode.base.logger.ColoredFormatter","text":"Bases: logging . Formatter Logger class formatting messages in a specific way with colors interpretable by the terminal/console according to the log level: DEBUG and INFO : grey WARNING : yellow ERROR : red CRITICAL : bold red Message is formatted like this: timestamp [ log_level ] current_flow_name - filename:LOC - actual_message","title":"ColoredFormatter"},{"location":"reference/base/logger/#onecode.base.logger.ColoredFormatter.format","text":"Format the given record Parameters: Name Type Description Default record logging . LogRecord Record passing through the formatter. See Python logging for more info. required Returns: Type Description str The formatted text.","title":"format()"},{"location":"reference/base/logger/#onecode.base.logger.Logger","text":"Single Logger object to handle Python logging within OneCode projects. The default logging level is INFO. See set_level() to change it. Use the static methods debug() , info() , warning() , error() , and critical() to conveniently log your messages with the corresponding logging level. By default, the ColoredFormatter is used. You may add other logging handlers using add_handler() , for instance to redirect logs to a file. Example import logging from onecode import Logger Logger () . set_level ( logging . DEBUG ) Logger . debug ( \"debug\" ) Logger . info ( \"info\" ) Logger . warning ( \"warning\" ) Logger . error ( \"error\" ) Logger . critical ( \"critical\" )","title":"Logger"},{"location":"reference/base/logger/#onecode.base.logger.Logger._flush","text":"Force flush to stdout if ConfigOption.FLUSH_STDOUT is True. See Project.config for more information.","title":"_flush()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.add_handler","text":"Add an extra handler in addition to the default console stream one. Nothing is done if handler is None. Parameters: Name Type Description Default handler Optional [ logging . Handler ] New handler to add. None Example import logging from onecode import Logger handler = logging . FileHandler ( \"debug.log\" ) Logger () . add_handler ( handler ) Logger . error ( 'oops!' ) # will print to console in red and to file \"debug.log\"","title":"add_handler()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.critical","text":"Convenience function to log a critical message. Parameters: Name Type Description Default msg str Message to log. required","title":"critical()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.debug","text":"Convenience function to log a debug message. Parameters: Name Type Description Default msg str Message to log. required","title":"debug()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.error","text":"Convenience function to log an error message. Parameters: Name Type Description Default msg str Message to log. required","title":"error()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.info","text":"Convenience function to log an info message. Parameters: Name Type Description Default msg str Message to log. required","title":"info()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.logger","text":"Get the Python Logger object corresponding to the given stack level. Preferentially use convenience methods debug() , info() , warning() , error() , and critical() . Parameters: Name Type Description Default stacklevel int Number of hops back in the function call stack to tie the logger to. By default, it is the last function calling this logger() method. 1 Returns: Type Description logging . Logger Python Logger object.","title":"logger()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.reset","text":"Remove all added handlers attached to the logger (see logging.removeHandler() for more info) and reset to the default console stream handler with the ColoredFormatter .","title":"reset()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.set_level","text":"Set the logger level. Default logging is INFO. Parameters: Name Type Description Default level int Numerical value to set the logging level to. See logging levels for more information. required","title":"set_level()"},{"location":"reference/base/logger/#onecode.base.logger.Logger.warning","text":"Convenience function to log a warning message. Parameters: Name Type Description Default msg str Message to log. required","title":"warning()"},{"location":"reference/base/project/","text":"Project \u00b6 Single Project object to centralize OneCode project data, such as the data path, parameter values, registered elements, flow currently running, current running mode, etc. See reset() for Project default's initialization. Attributes: Name Type Description registered_elements Set [ str ] List of elements registered for processing. mode Union [ Mode , str ] Control how elements are processed. current_flow Optional [ str ] ID of the flow currently running. data_root str Path to the data folder. data Optional [ Dict [ str , Any ]] Dictionnary containing the data values from interpreted elements. config Optional [ Dict [ str , Any ]] Dictionnary containing the project configuration. config : Optional [ Dict [ str , Any ]] property \u00b6 Get the Project current configuration options. Config is simply a key-value dictionnary. current_flow : Optional [ str ] writable property \u00b6 Get the currently running flow. If no flow is running, None is returned. It is automatically set when OneCode project is run through the main entry point of from streamlit (i-e python main.py or onecode-start ) data : Optional [ Dict [ str , Any ]] writable property \u00b6 Get the Project current data. Data is typically set either at the start when running in mode LOAD_THEN_EXECUTE or incrementaly after each call to any input element. Data is simply a key-value dictionnary. data_root : str property \u00b6 Get the path to the root of the data folder. See reset() to know how the data path is initialized. mode : Union [ Mode , str ] writable property \u00b6 Get the currently set mode for the OneCode Project. A string is returned in case of custom modes. See Mode and Extending OneCode for more information. registered_elements : Set [ str ] property \u00b6 Get the list of registered elements ( InputElement and OutputElement ). Once a library is registered, it is required to register the elements that need to be processed. By default, it returns all Input/Output Elements of onecode library. See Extending OneCode for more information. _set_data_root ( data_path ) \u00b6 Protected method to set the data root path. It is unsafe to use this method and change the data path while running the OneCode project. Parameters: Name Type Description Default data_path str Path to the data root. required Raises: Type Description NotADirectoryError if the data path does not exist or is not a directory. add_data ( key , value ) \u00b6 Add a key-value pair to the data dictionnary. Parameters: Name Type Description Default key str Unique key to set the attach the value to. required value Any Value corresponding to the given key. required Raises: Type Description ValueError if the key is empty or None. get_config ( key ) \u00b6 Get the value corresponding to the key config. Parameters: Name Type Description Default key Union [ ConfigOption , str ] Unique key to get the value from. required Raises: Type Description ValueError if the key does not exists. get_input_path ( filepath ) \u00b6 Get the constructed input path for the given file path. If the file path is absolute or null, the path is left unchanged, otherwise the path is considered relative to the data root path. Parameters: Name Type Description Default filepath str filename of file path to construct the input path from. required Returns: Type Description str The constructed input path to the file. get_output_manifest () \u00b6 Get the path to the current flow manifest file, typically <data_root>/outputs/<flow>/MANIFEST.txt . If the path does not exist, it is automatically created. The manifest file is a collection of output data attributes: there would typically be one entry per output file, each entry containing attributes information. Each line is a JSON entry but the entire file is not a JSON. Example { \"key\" : \"x\" , \"value\" : \"file1.csv\" , \"kind\" : \"CsvOutput\" , \"tags\" : [ \"CSV\" ] } { \"key\" : \"y\" , \"value\" : \"file2.txt\" , \"kind\" : \"TextOutput\" , \"tags\" : [ \"TXT\" ] } ... Returns: Type Description str Path to the output MANIFEST.txt file for the currently running flow. get_output_path ( filepath ) \u00b6 Get the constructed output path for the given file path. If the file path is absolute or null, the path is left unchanged, otherwise the path is considered relative to the data output path (typically <data_root>/outputs/ ). Parameters: Name Type Description Default filepath str filename of file path to construct the output path from. required Returns: Type Description str The constructed output path to the file. register_element ( element_name ) \u00b6 Register the given element as part of the elements to be processed. The element must be of the form ' . ', e.g. onecode_ext.MyInput See Extending OneCode for more information. Parameters: Name Type Description Default element_name str Python name of the element (i-e class name). required Raises: Type Description ValueError if element is not of the form ' . ' of if the class name is already snake case. reset () \u00b6 Reset the project to its default values: - the data path is initialized in priority to ONECODE_PROJECT_DATA if provided in the Environment variables, otherwise to the data folder located in the same directory from where the project is run if existing (typically the OneCode project data folder), otherwise to the current working directory. - mode is Mode.CONSOLE . - currently running flow and data are None. - registered elements default to the OneCode ones. set_config ( key , value ) \u00b6 Add a key-value pair to the config dictionnary. Parameters: Name Type Description Default key Union [ ConfigOption , str ] Unique key to set the attach the value to. required value Any Value corresponding to the given key. required Raises: Type Description ValueError if the key is empty or None. write_output ( output ) \u00b6 Write data to the output manifest file corresponding to the currently running flow. This function is thread and process-safe, i-e if there is concurrent writing to the manifest file (e.g. parallelization through multiprocessing), writing will be queued so that there is no overwrite or other side-effect. The file will therefore be valid and without data loss. Although typically this function is automatically called during the OutputElement execution, it is possible to manully call it too to output custom data. Parameters: Name Type Description Default output Dict Output data to write to the manifest file. required","title":"Project"},{"location":"reference/base/project/#project","text":"Single Project object to centralize OneCode project data, such as the data path, parameter values, registered elements, flow currently running, current running mode, etc. See reset() for Project default's initialization. Attributes: Name Type Description registered_elements Set [ str ] List of elements registered for processing. mode Union [ Mode , str ] Control how elements are processed. current_flow Optional [ str ] ID of the flow currently running. data_root str Path to the data folder. data Optional [ Dict [ str , Any ]] Dictionnary containing the data values from interpreted elements. config Optional [ Dict [ str , Any ]] Dictionnary containing the project configuration.","title":"Project"},{"location":"reference/base/project/#onecode.base.project.Project.config","text":"Get the Project current configuration options. Config is simply a key-value dictionnary.","title":"config"},{"location":"reference/base/project/#onecode.base.project.Project.current_flow","text":"Get the currently running flow. If no flow is running, None is returned. It is automatically set when OneCode project is run through the main entry point of from streamlit (i-e python main.py or onecode-start )","title":"current_flow"},{"location":"reference/base/project/#onecode.base.project.Project.data","text":"Get the Project current data. Data is typically set either at the start when running in mode LOAD_THEN_EXECUTE or incrementaly after each call to any input element. Data is simply a key-value dictionnary.","title":"data"},{"location":"reference/base/project/#onecode.base.project.Project.data_root","text":"Get the path to the root of the data folder. See reset() to know how the data path is initialized.","title":"data_root"},{"location":"reference/base/project/#onecode.base.project.Project.mode","text":"Get the currently set mode for the OneCode Project. A string is returned in case of custom modes. See Mode and Extending OneCode for more information.","title":"mode"},{"location":"reference/base/project/#onecode.base.project.Project.registered_elements","text":"Get the list of registered elements ( InputElement and OutputElement ). Once a library is registered, it is required to register the elements that need to be processed. By default, it returns all Input/Output Elements of onecode library. See Extending OneCode for more information.","title":"registered_elements"},{"location":"reference/base/project/#onecode.base.project.Project._set_data_root","text":"Protected method to set the data root path. It is unsafe to use this method and change the data path while running the OneCode project. Parameters: Name Type Description Default data_path str Path to the data root. required Raises: Type Description NotADirectoryError if the data path does not exist or is not a directory.","title":"_set_data_root()"},{"location":"reference/base/project/#onecode.base.project.Project.add_data","text":"Add a key-value pair to the data dictionnary. Parameters: Name Type Description Default key str Unique key to set the attach the value to. required value Any Value corresponding to the given key. required Raises: Type Description ValueError if the key is empty or None.","title":"add_data()"},{"location":"reference/base/project/#onecode.base.project.Project.get_config","text":"Get the value corresponding to the key config. Parameters: Name Type Description Default key Union [ ConfigOption , str ] Unique key to get the value from. required Raises: Type Description ValueError if the key does not exists.","title":"get_config()"},{"location":"reference/base/project/#onecode.base.project.Project.get_input_path","text":"Get the constructed input path for the given file path. If the file path is absolute or null, the path is left unchanged, otherwise the path is considered relative to the data root path. Parameters: Name Type Description Default filepath str filename of file path to construct the input path from. required Returns: Type Description str The constructed input path to the file.","title":"get_input_path()"},{"location":"reference/base/project/#onecode.base.project.Project.get_output_manifest","text":"Get the path to the current flow manifest file, typically <data_root>/outputs/<flow>/MANIFEST.txt . If the path does not exist, it is automatically created. The manifest file is a collection of output data attributes: there would typically be one entry per output file, each entry containing attributes information. Each line is a JSON entry but the entire file is not a JSON. Example { \"key\" : \"x\" , \"value\" : \"file1.csv\" , \"kind\" : \"CsvOutput\" , \"tags\" : [ \"CSV\" ] } { \"key\" : \"y\" , \"value\" : \"file2.txt\" , \"kind\" : \"TextOutput\" , \"tags\" : [ \"TXT\" ] } ... Returns: Type Description str Path to the output MANIFEST.txt file for the currently running flow.","title":"get_output_manifest()"},{"location":"reference/base/project/#onecode.base.project.Project.get_output_path","text":"Get the constructed output path for the given file path. If the file path is absolute or null, the path is left unchanged, otherwise the path is considered relative to the data output path (typically <data_root>/outputs/ ). Parameters: Name Type Description Default filepath str filename of file path to construct the output path from. required Returns: Type Description str The constructed output path to the file.","title":"get_output_path()"},{"location":"reference/base/project/#onecode.base.project.Project.register_element","text":"Register the given element as part of the elements to be processed. The element must be of the form ' . ', e.g. onecode_ext.MyInput See Extending OneCode for more information. Parameters: Name Type Description Default element_name str Python name of the element (i-e class name). required Raises: Type Description ValueError if element is not of the form ' . ' of if the class name is already snake case.","title":"register_element()"},{"location":"reference/base/project/#onecode.base.project.Project.reset","text":"Reset the project to its default values: - the data path is initialized in priority to ONECODE_PROJECT_DATA if provided in the Environment variables, otherwise to the data folder located in the same directory from where the project is run if existing (typically the OneCode project data folder), otherwise to the current working directory. - mode is Mode.CONSOLE . - currently running flow and data are None. - registered elements default to the OneCode ones.","title":"reset()"},{"location":"reference/base/project/#onecode.base.project.Project.set_config","text":"Add a key-value pair to the config dictionnary. Parameters: Name Type Description Default key Union [ ConfigOption , str ] Unique key to set the attach the value to. required value Any Value corresponding to the given key. required Raises: Type Description ValueError if the key is empty or None.","title":"set_config()"},{"location":"reference/base/project/#onecode.base.project.Project.write_output","text":"Write data to the output manifest file corresponding to the currently running flow. This function is thread and process-safe, i-e if there is concurrent writing to the manifest file (e.g. parallelization through multiprocessing), writing will be queued so that there is no overwrite or other side-effect. The file will therefore be valid and without data loss. Although typically this function is automatically called during the OutputElement execution, it is possible to manully call it too to output custom data. Parameters: Name Type Description Default output Dict Output data to write to the manifest file. required","title":"write_output()"},{"location":"reference/cli/add/","text":"Add a flow to a project \u00b6 add ( project_path , name , before = None , cli = True ) \u00b6 Add a new flow to the given OneCode project. Parameters: Name Type Description Default project_path str Path to the root of the existing OneCode project. required name str Name of the new flow to add. required before str Insert the new flow before this flow id. Set it to None to put it in last position. None cli bool Set to False for no interaction. True Raises: Type Description FileNotFoundError if the project path is incorrect (i-e OneCode config file not found). main () \u00b6 Start a user-interactive CLI to add a new flow to an existing OneCode project. onecode-add","title":"Add a flow to a project"},{"location":"reference/cli/add/#add-a-flow-to-a-project","text":"","title":"Add a flow to a project"},{"location":"reference/cli/add/#onecode.cli.add.add","text":"Add a new flow to the given OneCode project. Parameters: Name Type Description Default project_path str Path to the root of the existing OneCode project. required name str Name of the new flow to add. required before str Insert the new flow before this flow id. Set it to None to put it in last position. None cli bool Set to False for no interaction. True Raises: Type Description FileNotFoundError if the project path is incorrect (i-e OneCode config file not found).","title":"add()"},{"location":"reference/cli/add/#onecode.cli.add.main","text":"Start a user-interactive CLI to add a new flow to an existing OneCode project. onecode-add","title":"main()"},{"location":"reference/cli/cli/","text":"CLI \u00b6 Create a new project \u00b6 Start a user-interactive CLI to create a new OneCode project. onecode-create Example ? Enter the path where to create OneCode project /path/to/examples ? Enter your OneCode project name: HelloWorld ? Pick a name for your main flow: hello_world \u280b Creating new OneCode project Initialized empty Git repository in /path/to/examples/HelloWorld/.git/ \u2705 Created HelloWorld OneCode project Add a flow to a project \u00b6 Start a user-interactive CLI to add a new flow to an existing OneCode project. onecode-add Example ? Enter the path of the existing OneCode project /path/to/examples/HelloWorld ? Enter the name of the new flow to add: second_step ? Choose before which flow: hello_world \u276f Put at the end \u280b Adding new flow \u2705 Added second_step flow Start a project with Streamlit \u00b6 usage: onecode-start [ -h ] [ --modules [ MODULES [ MODULES ... ]]] Start the OneCode Project in Streamlit mode. optional arguments: -h, --help show this help message and exit --modules [ MODULES [ MODULES ... ]] Optional list of modules to import first Example # start project from the root folder onecode-start # in case of libraries extending OneCode onecode-start --module <library_name> Extract project parameters \u00b6 usage: onecode-extract [ -h ] [ --all ] [ --modules [ MODULES [ MODULES ... ]]] [ --path PATH ] output_file Extract OneCode project parameters to JSON file. positional arguments: output_file Path to the output JSON file optional arguments: -h, --help show this help message and exit --all Extract parameters with their full info set --modules [ MODULES [ MODULES ... ]] Optional list of modules to import first --path PATH Path to the project root directory if not the current working directory Example # extract project parameters from the root folder onecode-extract params.json # in case of libraries extending OneCode onecode-extract params.json --module <library_name> How to reorganize flows? \u00b6 This step can be done manually: open an issue if you feel like it is necessary to have it as a CLI command. Open the .onecode.json file located at the root of the OneCode project in your favorite text editor. You should see a fairly simple to understand JSON file: [ { \"file\" : \"hello_world\" , \"label\" : \"hello_world\" , \"attributes\" : {} }, { \"file\" : \"second_step\" , \"label\" : \"second_step\" , \"attributes\" : {} } ] Manually re-order the flows, that's it! Danger Do not change the file attribute of the flows, it will break the OneCode project. This name is synchronized with the Python filename in the flows folder.","title":"CLI"},{"location":"reference/cli/cli/#cli","text":"","title":"CLI"},{"location":"reference/cli/cli/#create-a-new-project","text":"Start a user-interactive CLI to create a new OneCode project. onecode-create Example ? Enter the path where to create OneCode project /path/to/examples ? Enter your OneCode project name: HelloWorld ? Pick a name for your main flow: hello_world \u280b Creating new OneCode project Initialized empty Git repository in /path/to/examples/HelloWorld/.git/ \u2705 Created HelloWorld OneCode project","title":"Create a new project"},{"location":"reference/cli/cli/#add-a-flow-to-a-project","text":"Start a user-interactive CLI to add a new flow to an existing OneCode project. onecode-add Example ? Enter the path of the existing OneCode project /path/to/examples/HelloWorld ? Enter the name of the new flow to add: second_step ? Choose before which flow: hello_world \u276f Put at the end \u280b Adding new flow \u2705 Added second_step flow","title":"Add a flow to a project"},{"location":"reference/cli/cli/#start-a-project-with-streamlit","text":"usage: onecode-start [ -h ] [ --modules [ MODULES [ MODULES ... ]]] Start the OneCode Project in Streamlit mode. optional arguments: -h, --help show this help message and exit --modules [ MODULES [ MODULES ... ]] Optional list of modules to import first Example # start project from the root folder onecode-start # in case of libraries extending OneCode onecode-start --module <library_name>","title":"Start a project with Streamlit"},{"location":"reference/cli/cli/#extract-project-parameters","text":"usage: onecode-extract [ -h ] [ --all ] [ --modules [ MODULES [ MODULES ... ]]] [ --path PATH ] output_file Extract OneCode project parameters to JSON file. positional arguments: output_file Path to the output JSON file optional arguments: -h, --help show this help message and exit --all Extract parameters with their full info set --modules [ MODULES [ MODULES ... ]] Optional list of modules to import first --path PATH Path to the project root directory if not the current working directory Example # extract project parameters from the root folder onecode-extract params.json # in case of libraries extending OneCode onecode-extract params.json --module <library_name>","title":"Extract project parameters"},{"location":"reference/cli/cli/#how-to-reorganize-flows","text":"This step can be done manually: open an issue if you feel like it is necessary to have it as a CLI command. Open the .onecode.json file located at the root of the OneCode project in your favorite text editor. You should see a fairly simple to understand JSON file: [ { \"file\" : \"hello_world\" , \"label\" : \"hello_world\" , \"attributes\" : {} }, { \"file\" : \"second_step\" , \"label\" : \"second_step\" , \"attributes\" : {} } ] Manually re-order the flows, that's it! Danger Do not change the file attribute of the flows, it will break the OneCode project. This name is synchronized with the Python filename in the flows folder.","title":"How to reorganize flows?"},{"location":"reference/cli/create/","text":"Create a project \u00b6 create ( project_path , name , main_flow_name = None , cli = True ) \u00b6 Create a new OneCode project. Parameters: Name Type Description Default project_path str Path to the folder where to put the new OneCode project. required name str Name of the new OneCode project. required main_flow_name str Name of the main flow: if None, it will be constructed from the name of the OneCode project. None cli bool Set to False for no interaction. True Raises: Type Description FileExistsError if the project path already exists. main () \u00b6 Start a user-interactive CLI to create a new OneCode project. onecode-create","title":"Create a project"},{"location":"reference/cli/create/#create-a-project","text":"","title":"Create a project"},{"location":"reference/cli/create/#onecode.cli.create.create","text":"Create a new OneCode project. Parameters: Name Type Description Default project_path str Path to the folder where to put the new OneCode project. required name str Name of the new OneCode project. required main_flow_name str Name of the main flow: if None, it will be constructed from the name of the OneCode project. None cli bool Set to False for no interaction. True Raises: Type Description FileExistsError if the project path already exists.","title":"create()"},{"location":"reference/cli/create/#onecode.cli.create.main","text":"Start a user-interactive CLI to create a new OneCode project. onecode-create","title":"main()"},{"location":"reference/cli/extract/","text":"Extract project parameters \u00b6 extract_json ( project_path , to_file , all = False ) \u00b6 Extract the input parameter out of the given OneCode project and dump it to the specified file. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required to_file str Path of the output file to dump the JSON to. required all Optional [ bool ] If False, extract only the values of the parameter, otherwise extract values and associated data such as label , kind , etc. False main ( cli = True ) \u00b6 usage: onecode-extract [ -h ] [ --all ] [ --modules [ MODULES [ MODULES ... ]]] [ --path PATH ] output_file Extract OneCode project parameters to JSON file. positional arguments: output_file Path to the output JSON file optional arguments: -h, --help show this help message and exit --all Extract parameters with their full info set --modules [ MODULES [ MODULES ... ]] Optional list of modules to import first --path PATH Path to the project root directory if not the current working directory process ( calls ) \u00b6 Evaluate the given calls such as: - only ElementType.INPUT are considered. - result of evaluation is interpreted as (key, value) and aggregated in the final dictionnary returned by this function. Ensure the proper Project().mode is set before calling this function (as it will control the evaluation of the code call). This function is typically used for InputElement JSON extraction. Although the extract_json() function directly pipes the calls from the code call graph (through process_call_graph() ), you may input your own code calls (see example below). Parameters: Name Type Description Default calls List [ Dict [ str , str ]] List of {\"func\": <function_name>, \"loc\": <code_to_eval>} where func is the name of the function corresponding to the InputElement (i-e its snake case form - see the element developer section for more info), and loc is the \"line of code\" to evaluate through the Python interpreter. required Returns: Type Description Dict A dictionnary containing the results of the code evaluation associated to their key id. Example Project () . mode = Mode . EXTRACT_ALL # processing a single call of Slider element process ([{ \"func\" : \"onecode.slider\" , \"loc\" : \"onecode.slider('my_slider', 0.4)\" }]) # => returns the JSON for this parameter, i-e: # { kind: Slider, value: 0.4, label: 'my_slider', ... } # processing a single call of a custom MyBox element process ([{ \"func\" : \"onecode_ext.my_box\" , \"loc\" : \"onecode_ext.my_box('my_box', 'X')\" }]) # => returns the JSON for this parameter, i-e: # { kind: MyBox, value: 'X', label: 'my_box', ... } # piping the entire call graph of a OneCode Project statements = process_call_graph ( project_path ) for v in statements . values (): p = process ( v [ \"calls\" ]) # ...","title":"Extract project parameters"},{"location":"reference/cli/extract/#extract-project-parameters","text":"","title":"Extract project parameters"},{"location":"reference/cli/extract/#onecode.cli.extract.extract_json","text":"Extract the input parameter out of the given OneCode project and dump it to the specified file. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required to_file str Path of the output file to dump the JSON to. required all Optional [ bool ] If False, extract only the values of the parameter, otherwise extract values and associated data such as label , kind , etc. False","title":"extract_json()"},{"location":"reference/cli/extract/#onecode.cli.extract.main","text":"usage: onecode-extract [ -h ] [ --all ] [ --modules [ MODULES [ MODULES ... ]]] [ --path PATH ] output_file Extract OneCode project parameters to JSON file. positional arguments: output_file Path to the output JSON file optional arguments: -h, --help show this help message and exit --all Extract parameters with their full info set --modules [ MODULES [ MODULES ... ]] Optional list of modules to import first --path PATH Path to the project root directory if not the current working directory","title":"main()"},{"location":"reference/cli/extract/#onecode.cli.extract.process","text":"Evaluate the given calls such as: - only ElementType.INPUT are considered. - result of evaluation is interpreted as (key, value) and aggregated in the final dictionnary returned by this function. Ensure the proper Project().mode is set before calling this function (as it will control the evaluation of the code call). This function is typically used for InputElement JSON extraction. Although the extract_json() function directly pipes the calls from the code call graph (through process_call_graph() ), you may input your own code calls (see example below). Parameters: Name Type Description Default calls List [ Dict [ str , str ]] List of {\"func\": <function_name>, \"loc\": <code_to_eval>} where func is the name of the function corresponding to the InputElement (i-e its snake case form - see the element developer section for more info), and loc is the \"line of code\" to evaluate through the Python interpreter. required Returns: Type Description Dict A dictionnary containing the results of the code evaluation associated to their key id. Example Project () . mode = Mode . EXTRACT_ALL # processing a single call of Slider element process ([{ \"func\" : \"onecode.slider\" , \"loc\" : \"onecode.slider('my_slider', 0.4)\" }]) # => returns the JSON for this parameter, i-e: # { kind: Slider, value: 0.4, label: 'my_slider', ... } # processing a single call of a custom MyBox element process ([{ \"func\" : \"onecode_ext.my_box\" , \"loc\" : \"onecode_ext.my_box('my_box', 'X')\" }]) # => returns the JSON for this parameter, i-e: # { kind: MyBox, value: 'X', label: 'my_box', ... } # piping the entire call graph of a OneCode Project statements = process_call_graph ( project_path ) for v in statements . values (): p = process ( v [ \"calls\" ]) # ...","title":"process()"},{"location":"reference/cli/start/","text":"Run a project with Streamlit \u00b6 main () \u00b6 usage: onecode-start [ -h ] [ --modules [ MODULES [ MODULES ... ]]] Start the OneCode Project in Streamlit mode. optional arguments: -h, --help show this help message and exit --modules [ MODULES [ MODULES ... ]] Optional list of modules to import first prepare_streamlit_file ( project_path , to_file ) \u00b6 Prepare the Streamlit App Python file from the given OneCode project and dump it to the specified file. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required to_file str Path of the output file to dump the Streamlit Python code to. required process ( calls ) \u00b6 Evaluate the given calls such as: - result of evaluation is interpreted as a code block. - resulting code block is appended to the list of their corresponding element type (i-e input code block list for InputElement and output code block list for OutputElement ). Ensure the proper Project().mode is set before calling this function (as it will control the evaluation of the code call). This function is typically used for Streamlit code generation. Although the prepare_streamlit_file() function directly pipes the calls from the code call graph (through process_call_graph() ), you may input your own code calls (see example below). Parameters: Name Type Description Default calls List [ Dict [ str , str ]] List of {\"func\": <function_name>, \"loc\": <code_to_eval>} where func is the name of the function corresponding to the InputElement (i-e its snake case form - see the element developer section for more info), and loc is the \"line of code\" to evaluate through the Python interpreter. required Returns: Type Description List [ str ] The pair of two lists: one containing the code evaluation for the InputElement and one List [ str ] containing the code evaluation for the OutputElement . Example Project () . mode = Mode . STREAMLIT # processing a single call of Slider element process ([{ \"func\" : \"onecode.slider\" , \"loc\" : \"onecode.slider('My Slider', 0.4)\" }]) # => returns the streamlit code for this parameter, i-e: # Slider {self.key} # my_slider = st.slider( # 'My Slider', # min_value=0., # max_value=1., # value=0.4, # step=0.1, # disabled=False, # key='my_slider' # ) # piping the entire call graph of a OneCode Project statements = process_call_graph ( project_path ) for v in statements . values (): inputs , outputs = process ( v [ \"calls\" ]) # ...","title":"Run a project with Streamlit"},{"location":"reference/cli/start/#run-a-project-with-streamlit","text":"","title":"Run a project with Streamlit"},{"location":"reference/cli/start/#onecode.cli.start.main","text":"usage: onecode-start [ -h ] [ --modules [ MODULES [ MODULES ... ]]] Start the OneCode Project in Streamlit mode. optional arguments: -h, --help show this help message and exit --modules [ MODULES [ MODULES ... ]] Optional list of modules to import first","title":"main()"},{"location":"reference/cli/start/#onecode.cli.start.prepare_streamlit_file","text":"Prepare the Streamlit App Python file from the given OneCode project and dump it to the specified file. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required to_file str Path of the output file to dump the Streamlit Python code to. required","title":"prepare_streamlit_file()"},{"location":"reference/cli/start/#onecode.cli.start.process","text":"Evaluate the given calls such as: - result of evaluation is interpreted as a code block. - resulting code block is appended to the list of their corresponding element type (i-e input code block list for InputElement and output code block list for OutputElement ). Ensure the proper Project().mode is set before calling this function (as it will control the evaluation of the code call). This function is typically used for Streamlit code generation. Although the prepare_streamlit_file() function directly pipes the calls from the code call graph (through process_call_graph() ), you may input your own code calls (see example below). Parameters: Name Type Description Default calls List [ Dict [ str , str ]] List of {\"func\": <function_name>, \"loc\": <code_to_eval>} where func is the name of the function corresponding to the InputElement (i-e its snake case form - see the element developer section for more info), and loc is the \"line of code\" to evaluate through the Python interpreter. required Returns: Type Description List [ str ] The pair of two lists: one containing the code evaluation for the InputElement and one List [ str ] containing the code evaluation for the OutputElement . Example Project () . mode = Mode . STREAMLIT # processing a single call of Slider element process ([{ \"func\" : \"onecode.slider\" , \"loc\" : \"onecode.slider('My Slider', 0.4)\" }]) # => returns the streamlit code for this parameter, i-e: # Slider {self.key} # my_slider = st.slider( # 'My Slider', # min_value=0., # max_value=1., # value=0.4, # step=0.1, # disabled=False, # key='my_slider' # ) # piping the entire call graph of a OneCode Project statements = process_call_graph ( project_path ) for v in statements . values (): inputs , outputs = process ( v [ \"calls\" ]) # ...","title":"process()"},{"location":"reference/cli/utils/","text":"CLI Utils \u00b6 _add_flow ( project_path , name , before = None ) \u00b6 Internal function to add a flow to an existing OneCode project. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required name str Name of the new flow to add. Note that the name will be slugified, i-e all special characters and whitespaces will be converted to \"_\". See slugify for more information. required before str Insert the new flow before this flow id. Set it to None to put it in last position. None Raises: Type Description ValueError if the flow name is empty or is already used. _get_flow_choices ( project_path ) \u00b6 Internal function for CLI commands to get the existing OneCode project's flows as interactive Choice for InquirerPy. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required Returns: Type Description List [ Choice ] Flow id and label as InquirerPy Choices. extract_calls ( entry_point , graph , calls ) \u00b6 Given a code Call Graph, extract only the code calls related to OneCode-like elements. This includes built-in input/output elements from OneCode and also any registered element coming from onecode_ext as well as derived OneCode packages. See Extending OneCode for more information on how to register new element. Parameters: Name Type Description Default entry_point str Call Graph function name from which to start the extraction from, e.g. flows.my_flow.run . required graph Dict Call Graph typically constructed by the DeepLime forked PyCG. Check out PyCG for more information about the graph structure or directly the forked repository at https://github.com/deeplime-io/PyCG/tree/onecode required calls List [ Dict [ str , str ]] List of calls as {\"func\": <function_name>, \"loc\": <code_to_eval>} where results are aggregated. These calls are typically piped to the process functions for JSON extraction or Streamlit code generation. required get_flows ( project_path ) \u00b6 Get the flows configuration as stored at the OneCode project's root (filename is given by the variable Env.ONECODE_CONFIG_FILE ). Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required Returns: Type Description Dict The JSON content of the OneCode project flow configuration as a dictionnary. process_call_graph ( project_path = None ) \u00b6 Process a OneCode project to extract the code calls related to OneCode-like elements. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. None Raises: Type Description FileNotFoundError if the OneCode project configuration file is not found. Returns: Type Description OrderedDict The list of OneCode-like elements code statements ready to be evaluated.","title":"Utilities"},{"location":"reference/cli/utils/#cli-utils","text":"","title":"CLI Utils"},{"location":"reference/cli/utils/#onecode.cli.utils._add_flow","text":"Internal function to add a flow to an existing OneCode project. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required name str Name of the new flow to add. Note that the name will be slugified, i-e all special characters and whitespaces will be converted to \"_\". See slugify for more information. required before str Insert the new flow before this flow id. Set it to None to put it in last position. None Raises: Type Description ValueError if the flow name is empty or is already used.","title":"_add_flow()"},{"location":"reference/cli/utils/#onecode.cli.utils._get_flow_choices","text":"Internal function for CLI commands to get the existing OneCode project's flows as interactive Choice for InquirerPy. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required Returns: Type Description List [ Choice ] Flow id and label as InquirerPy Choices.","title":"_get_flow_choices()"},{"location":"reference/cli/utils/#onecode.cli.utils.extract_calls","text":"Given a code Call Graph, extract only the code calls related to OneCode-like elements. This includes built-in input/output elements from OneCode and also any registered element coming from onecode_ext as well as derived OneCode packages. See Extending OneCode for more information on how to register new element. Parameters: Name Type Description Default entry_point str Call Graph function name from which to start the extraction from, e.g. flows.my_flow.run . required graph Dict Call Graph typically constructed by the DeepLime forked PyCG. Check out PyCG for more information about the graph structure or directly the forked repository at https://github.com/deeplime-io/PyCG/tree/onecode required calls List [ Dict [ str , str ]] List of calls as {\"func\": <function_name>, \"loc\": <code_to_eval>} where results are aggregated. These calls are typically piped to the process functions for JSON extraction or Streamlit code generation. required","title":"extract_calls()"},{"location":"reference/cli/utils/#onecode.cli.utils.get_flows","text":"Get the flows configuration as stored at the OneCode project's root (filename is given by the variable Env.ONECODE_CONFIG_FILE ). Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. required Returns: Type Description Dict The JSON content of the OneCode project flow configuration as a dictionnary.","title":"get_flows()"},{"location":"reference/cli/utils/#onecode.cli.utils.process_call_graph","text":"Process a OneCode project to extract the code calls related to OneCode-like elements. Parameters: Name Type Description Default project_path str Path to the root of the OneCode project. None Raises: Type Description FileNotFoundError if the OneCode project configuration file is not found. Returns: Type Description OrderedDict The list of OneCode-like elements code statements ready to be evaluated.","title":"process_call_graph()"},{"location":"reference/elements/input_element/","text":"InputElement \u00b6 Bases: ABC An element is an object that will be interpreted based on the Project's mode (script execution, extraction, streamlit code generation, etc.). OneCode projects should not directly call the InputElement but its corresponding static function defined as the snake case of the element class name. For instance: Failure # wrong x = MyInputElement ( key , value , label ) Success # correct x = my_input_element ( key , value , label ) InputElement is the base class for input type parameter. By inheriting it, it is mandatory to define: _value_type : internal attribute to ensure the type of the value is correct at runtime. _validate() : internal method to ensure the value checks out at runtime. streamlit() : method returning the Streamlit code to be generated. Note Depending on your case, you may need to subclass value too (e.g. like CsvReader and FileInput). Tip Don't forget that the Python filename of an element should correspond to the snake case form of the element class name (e.g. FileInput -> file_input.py ). You may use pydash functions snake_case() and pascal_case() to find the right conversion between the two forms. Attributes: Name Type Description label str Human readable name typically used by streamlit() for display. value Optional [ Any ] Actual value of the element. disabled str The string condition typically used by streamlit for disabling the widget. _value_type : type property abstractmethod \u00b6 You must re-implement this function to return the expected type for the value. This _value_type is used to check to the proper type at runtime. Returns: Type Description type The type of the value (built-in type or typing). Example @property def _value_type ( self ) -> type : return Union [ str , bool ] disabled : str property \u00b6 Get the whether the element is disabled as a string. It is primarly meant to be directly used in the Streamlit generated code for the disabled parameter. See streamlit() for more information. Returns: Type Description str The conditional string to be used in streamlit() for the disabled parameter. label : str property \u00b6 Get the label with triple-quotes and escaped to handle human-readable string. It is primarly meant to be directly used in the Streamlit generated code for the label parameter. See streamlit() for more information. Returns: Type Description str The string to be used in streamlit() for the label parameter. Example from onecode import Mode , Project , slider Project () . mode = Mode . CONSOLE x = slider ( \"Hello l'aspirateur!\" , None , optional = True ) assert x . label == \"'''Hello l \\' aspirateur!'''\" value : Optional [ Any ] property \u00b6 Get the value of the element. By default this value is the one provided during at the initialization. Feel free to overwrite this property as required. For instance, FileInput and CsvReader re-implement it for their own purpose. Returns: Type Description Optional [ Any ] By default, the same as the initial value. __call__ () \u00b6 Internal cornerstone for OneCode to distribute the action to perform according to the Project mode. Raises: Type Description ValueError if the Project mode is unknown, e.g. if there is no method matching the mode name. __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False , kwargs ) \u00b6 Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Any ] Initial value for the parameter. This value may be transformed depending on the element. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool Only used by Streamlit: if element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False **kwargs Any Extra arguments to populate the element with. Argument names cannot overwrite existing attributes or methods name such as streamlit , _value , etc. {} Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. _build_streamlit () \u00b6 Function called when Project mode is Mode.STREAMLIT . The Streamlit block code will be prepared using the element parameters (such as count , optional , hide_when_disabled , etc.) as well as the block code returned by the streamlit() function. This function makes it easy to extend the InputElement without worrying about the count , optional and hide_when_disabled attributes. Returns: Type Description str The full block code generated by this InputElement to be written out to the generated str Streamlit app code. _console () \u00b6 Function called when Project mode is Mode.CONSOLE . Returns: Type Description InputElement This InputElement object. _execute () \u00b6 Function called when Project mode is Mode.EXECUTE . The value will first be collected, prepared, validated then added to the Project().data before being returned. Returns: Type Description Any The value of this element after resolution (collection, preparation and validation). _extract () \u00b6 Function called when Project mode is Mode.EXTRACT . The value will be collected and added to the Project().data before returning it as key-value object. Returns: Type Description Tuple [ str , Any ] The pair { key: value } of this element. _extract_all () \u00b6 Function called when Project mode is Mode.EXTRACT_ALL . The value will be collected and added to the Project().data before returning it as key-value object along with all other element parameters, such as key , kind , label , etc. Returns: Type Description Tuple [ str , Any ] The full parameter set constituting this element as a dictionnary. _load_then_execute () \u00b6 Function called when Project mode is Mode.LOAD_THEN_EXECUTE . The value will first be collected, prepared, validated then added to the Project().data before being returned. Returns: Type Description Any The value of this element after resolution (collection, preparation and validation). _prepare_and_validate ( value ) \u00b6 Internal function used in Mode.EXECUTE and Mode.LOAD_THEN_EXECUTE to prepare the value, check is type, then validate it before returning it. Parameters: Name Type Description Default value Optional [ Any ] Value to be prepared and validated. required Raises: Type Description ValueError if the value is None but is not optional or the value is of incorrect type. _validate ( value ) abstractmethod \u00b6 You must re-implement this function to validate at runtime the value before being returned during the OneCode project execution. This function must raise an error in case the value is incorrect/inconsistent wrt the element parameters. Parameters: Name Type Description Default value Any Prepared value to be checked (do not use self.value ). required Example For instance, a slider value will fail to validate if it is outside its range: def _validate ( self , value : Union [ float , int ] ) -> None : if self . min > self . max : raise ValueError ( f '''[ { self . key } ] Minimum cannot be greater than maximum: { self . min } > { self . max } ''' ) elif value < self . min : raise ValueError ( f '''[ { self . key } ] Value lower than minimum: { value } < { self . min } ''' ) elif value > self . max : raise ValueError ( f '[ { self . key } ] Value greater than maximum: { value } > { self . max } ' ) streamlit ( id ) abstractmethod \u00b6 You must re-implement this function to return the expected Streamlit block code for this element. This block code will be written out to the generated Streamlit App code. Typical attributes that will be useful: - label : can be directly piped to the Streamlit widget label parameter. This attribute has been automatically setup for you to use and will properly escape the potential troublesome characters. disabled : can be directly piped to the Streamlit disabled widget parameters. This attribute has been automatically setup for you to use and will properly take the optional argument into account regardless of optional being an expression, a boolean or None. Therefore, do not use optional or hide_when_disabled , use disabled directly. key : it must be used as the variable name for the Streamlit widget. all other attributes that are specific to your widget, e.g. min , max , step for a Slider, etc. Parameters: Name Type Description Default id str Must be used as the id parameter of the Streamlit widget. This variable is automatically setup to take uniqueness wrt count . required Returns: Type Description str The Streamlit block code to be output in the generated Streamlit App code. Example def streamlit ( self , id : str ) -> str : return f ''' # Slider { self . key } = st.slider( { self . label } , min_value= { self . min } , max_value= { self . max } , value= { self . value } , step= { self . step } , disabled= { self . disabled } , key= { id } ) ''' Tip Remember: no need to use optional , hide_when_disabled and count , they are already automatically taken into account to make your life easier. Use disabled , label , key and id","title":"Abstract InputElement"},{"location":"reference/elements/input_element/#inputelement","text":"Bases: ABC An element is an object that will be interpreted based on the Project's mode (script execution, extraction, streamlit code generation, etc.). OneCode projects should not directly call the InputElement but its corresponding static function defined as the snake case of the element class name. For instance: Failure # wrong x = MyInputElement ( key , value , label ) Success # correct x = my_input_element ( key , value , label ) InputElement is the base class for input type parameter. By inheriting it, it is mandatory to define: _value_type : internal attribute to ensure the type of the value is correct at runtime. _validate() : internal method to ensure the value checks out at runtime. streamlit() : method returning the Streamlit code to be generated. Note Depending on your case, you may need to subclass value too (e.g. like CsvReader and FileInput). Tip Don't forget that the Python filename of an element should correspond to the snake case form of the element class name (e.g. FileInput -> file_input.py ). You may use pydash functions snake_case() and pascal_case() to find the right conversion between the two forms. Attributes: Name Type Description label str Human readable name typically used by streamlit() for display. value Optional [ Any ] Actual value of the element. disabled str The string condition typically used by streamlit for disabling the widget.","title":"InputElement"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._value_type","text":"You must re-implement this function to return the expected type for the value. This _value_type is used to check to the proper type at runtime. Returns: Type Description type The type of the value (built-in type or typing). Example @property def _value_type ( self ) -> type : return Union [ str , bool ]","title":"_value_type"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement.disabled","text":"Get the whether the element is disabled as a string. It is primarly meant to be directly used in the Streamlit generated code for the disabled parameter. See streamlit() for more information. Returns: Type Description str The conditional string to be used in streamlit() for the disabled parameter.","title":"disabled"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement.label","text":"Get the label with triple-quotes and escaped to handle human-readable string. It is primarly meant to be directly used in the Streamlit generated code for the label parameter. See streamlit() for more information. Returns: Type Description str The string to be used in streamlit() for the label parameter. Example from onecode import Mode , Project , slider Project () . mode = Mode . CONSOLE x = slider ( \"Hello l'aspirateur!\" , None , optional = True ) assert x . label == \"'''Hello l \\' aspirateur!'''\"","title":"label"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement.value","text":"Get the value of the element. By default this value is the one provided during at the initialization. Feel free to overwrite this property as required. For instance, FileInput and CsvReader re-implement it for their own purpose. Returns: Type Description Optional [ Any ] By default, the same as the initial value.","title":"value"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement.__call__","text":"Internal cornerstone for OneCode to distribute the action to perform according to the Project mode. Raises: Type Description ValueError if the Project mode is unknown, e.g. if there is no method matching the mode name.","title":"__call__()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement.__init__","text":"Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Any ] Initial value for the parameter. This value may be transformed depending on the element. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool Only used by Streamlit: if element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False **kwargs Any Extra arguments to populate the element with. Argument names cannot overwrite existing attributes or methods name such as streamlit , _value , etc. {} Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method.","title":"__init__()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._build_streamlit","text":"Function called when Project mode is Mode.STREAMLIT . The Streamlit block code will be prepared using the element parameters (such as count , optional , hide_when_disabled , etc.) as well as the block code returned by the streamlit() function. This function makes it easy to extend the InputElement without worrying about the count , optional and hide_when_disabled attributes. Returns: Type Description str The full block code generated by this InputElement to be written out to the generated str Streamlit app code.","title":"_build_streamlit()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._console","text":"Function called when Project mode is Mode.CONSOLE . Returns: Type Description InputElement This InputElement object.","title":"_console()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._execute","text":"Function called when Project mode is Mode.EXECUTE . The value will first be collected, prepared, validated then added to the Project().data before being returned. Returns: Type Description Any The value of this element after resolution (collection, preparation and validation).","title":"_execute()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._extract","text":"Function called when Project mode is Mode.EXTRACT . The value will be collected and added to the Project().data before returning it as key-value object. Returns: Type Description Tuple [ str , Any ] The pair { key: value } of this element.","title":"_extract()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._extract_all","text":"Function called when Project mode is Mode.EXTRACT_ALL . The value will be collected and added to the Project().data before returning it as key-value object along with all other element parameters, such as key , kind , label , etc. Returns: Type Description Tuple [ str , Any ] The full parameter set constituting this element as a dictionnary.","title":"_extract_all()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._load_then_execute","text":"Function called when Project mode is Mode.LOAD_THEN_EXECUTE . The value will first be collected, prepared, validated then added to the Project().data before being returned. Returns: Type Description Any The value of this element after resolution (collection, preparation and validation).","title":"_load_then_execute()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._prepare_and_validate","text":"Internal function used in Mode.EXECUTE and Mode.LOAD_THEN_EXECUTE to prepare the value, check is type, then validate it before returning it. Parameters: Name Type Description Default value Optional [ Any ] Value to be prepared and validated. required Raises: Type Description ValueError if the value is None but is not optional or the value is of incorrect type.","title":"_prepare_and_validate()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement._validate","text":"You must re-implement this function to validate at runtime the value before being returned during the OneCode project execution. This function must raise an error in case the value is incorrect/inconsistent wrt the element parameters. Parameters: Name Type Description Default value Any Prepared value to be checked (do not use self.value ). required Example For instance, a slider value will fail to validate if it is outside its range: def _validate ( self , value : Union [ float , int ] ) -> None : if self . min > self . max : raise ValueError ( f '''[ { self . key } ] Minimum cannot be greater than maximum: { self . min } > { self . max } ''' ) elif value < self . min : raise ValueError ( f '''[ { self . key } ] Value lower than minimum: { value } < { self . min } ''' ) elif value > self . max : raise ValueError ( f '[ { self . key } ] Value greater than maximum: { value } > { self . max } ' )","title":"_validate()"},{"location":"reference/elements/input_element/#onecode.elements.input_element.InputElement.streamlit","text":"You must re-implement this function to return the expected Streamlit block code for this element. This block code will be written out to the generated Streamlit App code. Typical attributes that will be useful: - label : can be directly piped to the Streamlit widget label parameter. This attribute has been automatically setup for you to use and will properly escape the potential troublesome characters. disabled : can be directly piped to the Streamlit disabled widget parameters. This attribute has been automatically setup for you to use and will properly take the optional argument into account regardless of optional being an expression, a boolean or None. Therefore, do not use optional or hide_when_disabled , use disabled directly. key : it must be used as the variable name for the Streamlit widget. all other attributes that are specific to your widget, e.g. min , max , step for a Slider, etc. Parameters: Name Type Description Default id str Must be used as the id parameter of the Streamlit widget. This variable is automatically setup to take uniqueness wrt count . required Returns: Type Description str The Streamlit block code to be output in the generated Streamlit App code. Example def streamlit ( self , id : str ) -> str : return f ''' # Slider { self . key } = st.slider( { self . label } , min_value= { self . min } , max_value= { self . max } , value= { self . value } , step= { self . step } , disabled= { self . disabled } , key= { id } ) ''' Tip Remember: no need to use optional , hide_when_disabled and count , they are already automatically taken into account to make your life easier. Use disabled , label , key and id","title":"streamlit()"},{"location":"reference/elements/input_element_list/","text":"Input Elements \u00b6 Available input elements for OneCode projects: checkbox csv_reader dropdown file_input number_input radio_button slider text_input checkbox \u00b6 def checkbox ( key : str , value : Optional [ Union [ bool , List [ bool ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False ) A simple checkbox with a label. Value is either True, False or None. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ bool , List [ bool ]]] Initial check status: True, False or None. required label Optional [ str ] Label to display next to the checkbox. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import checkbox , Mode , Project Project () . mode = Mode . EXECUTE widget = checkbox ( key = \"Checkbox\" , value = True , label = \"My Checkbox\" ) print ( widget ) Output True csv_reader \u00b6 def csv_reader ( key : str , value : Optional [ Union [ str , List [ str ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , tags : Optional [ List [ str ]] = None ) A CSV-file reader returning a Pandas DataFrame and displayed as a table in Streamlit. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Path to the CSV file. CSV file must exists, even for the Streamlit mode. required label Optional [ str ] Label to display on top of the table. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used by the Mode.EXTRACT_ALL when dumping attributes to JSON. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example import pandas as pd from onecode import csv_reader , Mode , Project Project () . mode = Mode . EXECUTE widget = csv_reader ( key = \"CsvReader\" , value = \"/path/to/file.csv\" , label = \"My CSV Reader\" , tags = [ 'CSV' ] ) pd . testing . assert_frame_equal ( widget , pd . read_csv ( \"/path/to/file.csv\" )) dropdown \u00b6 def dropdown ( key : str , value : Optional [ Union [ str , List [ str ], List [ List [ str ]]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , options : Union [ List , str ] = [], multiple : bool = False ) A single or multipe choice dropdown menu. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ Union [ str , int , float ], List [ Union [ str , int , float ]], List [ List [ Union [ str , int , float ]]]]] Pre-selected value(s) among the options. required label Optional [ str ] Label to display left of the dropdown menu. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False options Union [ List , str ] List all possible options available in the dropdown menu. This list may either be fixed or dynamic (to a certain extent): in the latter case, use Expressions in a similar way as optional and count . See example below. [] multiple bool Set to True if multiple choice is allowed, otherwise only a single element can be selected. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example Fixed options: from onecode import dropdown , Mode , Project Project () . mode = Mode . EXECUTE widget = dropdown ( key = \"Dropdown\" , value = [ \"A\" , \"C\" ], options = [ \"A\" , \"B\" , \"C\" ], multiple = True ) print ( widget ) Output [ \"A\" , \"C\" ] Dynamic options: from onecode import csv_reader, dropdown, Mode, Project Project().mode = Mode.EXECUTE df = csv_reader(\"csv\", \"/path/to/file.csv\") widget = dropdown( key=\"Dynamic Dropdown\", value=None, options='$csv$.columns', optional=True ) print(widget) Output None file_input \u00b6 def file_input ( key : str , value : Optional [ Union [ str , List [ str ], List [ List [ str ]]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , types : List [ Tuple [ str , str ]] = None , multiple : bool = False , tags : Optional [ List [ str ]] = None ) A single or multiple file selector. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ], List [ List [ str ]]]] Path to file(s). Provided file(s) don't necessarily have to exist for the Streamlit mode, however their existence will be checked at execution time. If paths are not absolute, then they are considered relative to the data root folder. See Best Practices With Data for more information. required label Optional [ str ] Label to display left of the file selector. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False types List [ Tuple [ str , str ]] List of filters allowing to narrow file selection within Streamlit. Each filter must be a pair of (name, list of allowed extensions), e.g. (\"Image\", \".jpg .png .jpeg\") . You may use the FileFilter enums for convenience. None multiple bool Set to True if multiple choice is allowed, otherwise only a single element can be selected. False tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used by the Mode.EXTRACT_ALL when dumping attributes to JSON. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import file_input , Mode , Project Project () . mode = Mode . EXECUTE widget = file_input ( key = \"FileInput\" , value = [ \"/path/to/file1.txt\" , \"/path/to/file2.csv\" ], multiple = True , tags = [ 'MyTags' ] ) print ( widget ) Output [ \"/path/to/file1.txt\" , \"/path/to/file2.csv\" ] number_input \u00b6 def number_input ( key : str , value : Optional [ Union [ float , List [ float ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , min : float = None , max : float = None , step : float = None ) A field for numerical values. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ float , List [ float ]]] Initial numerical value. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False min float Optionally limit the possible values with a lower bound. None max float Optionally limit the possible values with an upper bound. None step float Optionally set a step used when increment/decrement button are used. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import number_input , Mode , Project Project () . mode = Mode . EXECUTE widget = number_input ( key = \"Number Input\" , value = 5.1 , min = 5 , max = 6 ) print ( widget ) Output 5.1 radio_button \u00b6 def radio_button ( key : str , value : Optional [ Union [ str , List [ str ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , options : List [ str ] = [], horizontal : bool = False ) A single choice represented as a group of exclusive radio buttons. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Radio button initially selected. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False options List [ str ] List all possible options available. This list may either be fixed or dynamic (to a certain extent): in the latter case, use expressions in a similar way as optional and count . See example below. [] horizontal bool Set to True to have radio buttons displayed horizontally, otherwise radio buttons will be displayed vertically. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example Fixed options: from onecode import radio_button , Mode , Project Project () . mode = Mode . EXECUTE widget = radio_button ( key = \"RadioButton\" , value = \"A\" , options = [ \"A\" , \"B\" , \"C\" ] ) print ( widget ) Output \"A\" Dynamic options: from onecode import csv_reader, radio_button, Mode, Project Project().mode = Mode.EXECUTE df = csv_reader(\"csv\", \"/path/to/file.csv\") widget = radio_button( key=\"Dynamic RadioButton\", value=None, options='$csv$.columns', optional=True ) assert widget is None slider \u00b6 def slider ( key : str , value : Optional [ Union [ float , List [ float ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , min : float = 0. , max : float = 1. , step : float = 0.1 ) A slider for numerical values. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ float , List [ float ]]] Initial numerical value. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False min float Mandatory lower bound, defaults to 0. 0.0 max float Mandatory upper bound, defaults to 1. 1.0 step float Mandatory step used when incrementing/decrementing the slider, defaults to 0.1. 0.1 Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import slider , Mode , Project Project () . mode = Mode . EXECUTE widget = slider ( key = \"Slider\" , value = 5.1 , min = 5 , max = 6 ) print ( widget ) Output 5.1 text_input \u00b6 def text_input ( key : str , value : Optional [ Union [ str , List [ str ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , max_chars : int = None , placeholder : str = None ) A simple text field. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Initial text value. required label Optional [ str ] Label to display next to the checkbox. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False max_chars int Maximum number of characters allowed for this text field. None placeholder str Placeholder text shown whenever there is no value. None multiline Union [ bool , int ] Set to True or a height in pixels to make it multiline text area. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import text_input , Mode , Project Project () . mode = Mode . EXECUTE widget = text_input ( key = \"TextInput\" , value = \"OneCode rocks!\" , label = \"My TextInput\" ) print ( widget ) Output \"OneCode rocks!\"","title":"Input Elements"},{"location":"reference/elements/input_element_list/#input-elements","text":"Available input elements for OneCode projects: checkbox csv_reader dropdown file_input number_input radio_button slider text_input","title":"Input Elements"},{"location":"reference/elements/input_element_list/#checkbox","text":"def checkbox ( key : str , value : Optional [ Union [ bool , List [ bool ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False ) A simple checkbox with a label. Value is either True, False or None. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ bool , List [ bool ]]] Initial check status: True, False or None. required label Optional [ str ] Label to display next to the checkbox. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import checkbox , Mode , Project Project () . mode = Mode . EXECUTE widget = checkbox ( key = \"Checkbox\" , value = True , label = \"My Checkbox\" ) print ( widget ) Output True","title":"checkbox"},{"location":"reference/elements/input_element_list/#csv_reader","text":"def csv_reader ( key : str , value : Optional [ Union [ str , List [ str ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , tags : Optional [ List [ str ]] = None ) A CSV-file reader returning a Pandas DataFrame and displayed as a table in Streamlit. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Path to the CSV file. CSV file must exists, even for the Streamlit mode. required label Optional [ str ] Label to display on top of the table. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used by the Mode.EXTRACT_ALL when dumping attributes to JSON. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example import pandas as pd from onecode import csv_reader , Mode , Project Project () . mode = Mode . EXECUTE widget = csv_reader ( key = \"CsvReader\" , value = \"/path/to/file.csv\" , label = \"My CSV Reader\" , tags = [ 'CSV' ] ) pd . testing . assert_frame_equal ( widget , pd . read_csv ( \"/path/to/file.csv\" ))","title":"csv_reader"},{"location":"reference/elements/input_element_list/#dropdown","text":"def dropdown ( key : str , value : Optional [ Union [ str , List [ str ], List [ List [ str ]]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , options : Union [ List , str ] = [], multiple : bool = False ) A single or multipe choice dropdown menu. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ Union [ str , int , float ], List [ Union [ str , int , float ]], List [ List [ Union [ str , int , float ]]]]] Pre-selected value(s) among the options. required label Optional [ str ] Label to display left of the dropdown menu. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False options Union [ List , str ] List all possible options available in the dropdown menu. This list may either be fixed or dynamic (to a certain extent): in the latter case, use Expressions in a similar way as optional and count . See example below. [] multiple bool Set to True if multiple choice is allowed, otherwise only a single element can be selected. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example Fixed options: from onecode import dropdown , Mode , Project Project () . mode = Mode . EXECUTE widget = dropdown ( key = \"Dropdown\" , value = [ \"A\" , \"C\" ], options = [ \"A\" , \"B\" , \"C\" ], multiple = True ) print ( widget ) Output [ \"A\" , \"C\" ] Dynamic options: from onecode import csv_reader, dropdown, Mode, Project Project().mode = Mode.EXECUTE df = csv_reader(\"csv\", \"/path/to/file.csv\") widget = dropdown( key=\"Dynamic Dropdown\", value=None, options='$csv$.columns', optional=True ) print(widget) Output None","title":"dropdown"},{"location":"reference/elements/input_element_list/#file_input","text":"def file_input ( key : str , value : Optional [ Union [ str , List [ str ], List [ List [ str ]]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , types : List [ Tuple [ str , str ]] = None , multiple : bool = False , tags : Optional [ List [ str ]] = None ) A single or multiple file selector. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ], List [ List [ str ]]]] Path to file(s). Provided file(s) don't necessarily have to exist for the Streamlit mode, however their existence will be checked at execution time. If paths are not absolute, then they are considered relative to the data root folder. See Best Practices With Data for more information. required label Optional [ str ] Label to display left of the file selector. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False types List [ Tuple [ str , str ]] List of filters allowing to narrow file selection within Streamlit. Each filter must be a pair of (name, list of allowed extensions), e.g. (\"Image\", \".jpg .png .jpeg\") . You may use the FileFilter enums for convenience. None multiple bool Set to True if multiple choice is allowed, otherwise only a single element can be selected. False tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used by the Mode.EXTRACT_ALL when dumping attributes to JSON. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import file_input , Mode , Project Project () . mode = Mode . EXECUTE widget = file_input ( key = \"FileInput\" , value = [ \"/path/to/file1.txt\" , \"/path/to/file2.csv\" ], multiple = True , tags = [ 'MyTags' ] ) print ( widget ) Output [ \"/path/to/file1.txt\" , \"/path/to/file2.csv\" ]","title":"file_input"},{"location":"reference/elements/input_element_list/#number_input","text":"def number_input ( key : str , value : Optional [ Union [ float , List [ float ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , min : float = None , max : float = None , step : float = None ) A field for numerical values. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ float , List [ float ]]] Initial numerical value. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False min float Optionally limit the possible values with a lower bound. None max float Optionally limit the possible values with an upper bound. None step float Optionally set a step used when increment/decrement button are used. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import number_input , Mode , Project Project () . mode = Mode . EXECUTE widget = number_input ( key = \"Number Input\" , value = 5.1 , min = 5 , max = 6 ) print ( widget ) Output 5.1","title":"number_input"},{"location":"reference/elements/input_element_list/#radio_button","text":"def radio_button ( key : str , value : Optional [ Union [ str , List [ str ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , options : List [ str ] = [], horizontal : bool = False ) A single choice represented as a group of exclusive radio buttons. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Radio button initially selected. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False options List [ str ] List all possible options available. This list may either be fixed or dynamic (to a certain extent): in the latter case, use expressions in a similar way as optional and count . See example below. [] horizontal bool Set to True to have radio buttons displayed horizontally, otherwise radio buttons will be displayed vertically. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example Fixed options: from onecode import radio_button , Mode , Project Project () . mode = Mode . EXECUTE widget = radio_button ( key = \"RadioButton\" , value = \"A\" , options = [ \"A\" , \"B\" , \"C\" ] ) print ( widget ) Output \"A\" Dynamic options: from onecode import csv_reader, radio_button, Mode, Project Project().mode = Mode.EXECUTE df = csv_reader(\"csv\", \"/path/to/file.csv\") widget = radio_button( key=\"Dynamic RadioButton\", value=None, options='$csv$.columns', optional=True ) assert widget is None","title":"radio_button"},{"location":"reference/elements/input_element_list/#slider","text":"def slider ( key : str , value : Optional [ Union [ float , List [ float ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , min : float = 0. , max : float = 1. , step : float = 0.1 ) A slider for numerical values. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ float , List [ float ]]] Initial numerical value. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False min float Mandatory lower bound, defaults to 0. 0.0 max float Mandatory upper bound, defaults to 1. 1.0 step float Mandatory step used when incrementing/decrementing the slider, defaults to 0.1. 0.1 Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import slider , Mode , Project Project () . mode = Mode . EXECUTE widget = slider ( key = \"Slider\" , value = 5.1 , min = 5 , max = 6 ) print ( widget ) Output 5.1","title":"slider"},{"location":"reference/elements/input_element_list/#text_input","text":"def text_input ( key : str , value : Optional [ Union [ str , List [ str ]]], label : Optional [ str ] = None , count : Optional [ Union [ int , str ]] = None , optional : Union [ bool , str ] = False , hide_when_disabled : bool = False , max_chars : int = None , placeholder : str = None ) A simple text field. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Initial text value. required label Optional [ str ] Label to display next to the checkbox. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False max_chars int Maximum number of characters allowed for this text field. None placeholder str Placeholder text shown whenever there is no value. None multiline Union [ bool , int ] Set to True or a height in pixels to make it multiline text area. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import text_input , Mode , Project Project () . mode = Mode . EXECUTE widget = text_input ( key = \"TextInput\" , value = \"OneCode rocks!\" , label = \"My TextInput\" ) print ( widget ) Output \"OneCode rocks!\"","title":"text_input"},{"location":"reference/elements/output_element/","text":"OutputElement \u00b6 Bases: ABC An element is an object that will be interpreted based on the Project's mode (script execution, extraction, streamlit code generation, etc.). OneCode projects should not directly call the OutputElement but its corresponding static function defined as the snake case of the element class name. For instance: Failure # wrong x = MyOutputElement ( key , value , label ) Success # correct x = my_output_element ( key , value , label ) OutputElement is the base class for outputs. By inheriting it, it is mandatory to define: _validate() : internal method to ensure the value checks out at runtime. streamlit() : method returning the Streamlit code to be generated. Note Depending on your case, you may need to subclass value too (e.g. like CsvOutput and FileOutput). Tip Don't forget that the Python filename of an element should correspond to the snake case form of the element class name (e.g. FileOutput -> file_output.py ). You may use pydash functions snake_case() and pascal_case() to find the right conversion between the two forms. Attributes: Name Type Description label str Human readable name typically used by streamlit() for display. value Any Actual value of the element. label : str property \u00b6 Get the label with triple-quotes and escaped to handle human-readable string. It is primarly meant to be directly used in the Streamlit generated code for the label parameter. See streamlit() for more information. Returns: Type Description str The string to be used in streamlit() for the label parameter. Example from onecode import Mode , Project , text_output Project () . mode = Mode . CONSOLE x = text_output ( \"Hello l'aspirateur!\" , None ) assert x . label == \"'''Hello l \\' aspirateur!'''\" value : Any property \u00b6 Get the value of the element. By default this value is the one provided during at the initialization. Feel free to overwrite this property as required. For instance, FileOutput and CsvOutput re-implement it for their own purpose. Returns: Type Description Any By default, the same as the initial value. __call__ () \u00b6 Directly returns static_call(). __init__ ( key , value , label = None , kwargs ) \u00b6 Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value Any Initial value for the parameter. This value may be transformed depending on the element. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None **kwargs Any Extra arguments to populate the element with. Argument names cannot overwrite existing attributes or methods name such as streamlit , _value , etc. {} Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. _build_streamlit () classmethod \u00b6 Function called when Project mode is Mode.STREAMLIT . This will generate the output static function called when the corresponding output file is selected in the Streamlit App file tree. The function signature is made of the internal attributes and any other custom attributes. Note See streamlit() for more information. Returns: Type Description str The block code generated by this OutputElement to be written out to the generated str Streamlit app code. _console () \u00b6 Function called when Project mode is Mode.CONSOLE . Returns: Type Description OutputElement This OutputElement object. _execute () \u00b6 Function called when Project mode is Mode.EXECUTE . The value will first be prepared, validated then all element attributes will be output to the manifest file (see Project.write_output() ). Returns: Type Description Any The value of this element after resolution (preparation and validation). _extract () \u00b6 Nothing is performed: OutputElement attributes are not extracted as the actual output attributes will be dumped into a manifest file. _extract_all () \u00b6 Nothing is performed: OutputElement attributes are not extracted as the actual output attributes will be dumped into a manifest file. _load_then_execute () \u00b6 Directly returns _execute(). _validate ( value ) abstractmethod \u00b6 You must re-implement this function to validate at runtime the value before being returned during the OneCode project execution. This function must raise an error in case the value is incorrect/inconsistent wrt the element parameters. Parameters: Name Type Description Default value Any Prepared value to be checked (do not use self.value ). required Example For instance, an image output value will fail to validate if the file extension is not a valid/known extension such as jpeg, png, etc. def _validate ( self , value : str ) -> None : _ , ext = os . path . splitext ( self . value ) valid_ext = [ '.jpg' , '.jpeg' , '.png' , '.svg' , ] if ext . lower () not in valid_ext : raise ValueError ( f '''[ { self . key } ] Invalid image extension: { ext } (accepted: { ', ' . join ( valid_ext ) } )''' ) static_call () staticmethod \u00b6 Internal cornerstone for OneCode to distribute the action to perform according to the Project mode. Raises: Type Description ValueError if the Project mode is unknown, e.g. if there is no method matching the mode name. streamlit () staticmethod abstractmethod \u00b6 You must re-implement this function to return the expected Streamlit block code for this element. This block code will be written out to the generated Streamlit App code. You should write this block code as the body of a static function yielding all internal attributes (such as key , label , value and kind ) and any other custom attributes provided in this OutputElement initialization function's signature. For instance: class MyOutputElement ( OutputElement ): def __init__ ( self , key : str , value : Any , label : Optional [ str ], my_extra_1 : int , my_extra_2 : str ): # ... will generated the following static function signature function _MyOutputElement ( key , label , value , kind , my_extra_1 , my_extra_2 ) Returns: Type Description str The Streamlit block code to be output in the generated Streamlit App code. Example def streamlit () -> str : return ''' st.write(f' {key} - {label} - {value} - {kind} : {my_extra_1} | {my_extra_2} ') ''' will write out to the Streamlit App file: # static function called when the corresponding file is selected in the tree function _MyOutputElement ( key , label , value , kind , my_extra_1 , my_extra_2 ) st . write ( f ' { key } - { label } - { value } - { kind } : { my_extra_1 } | { my_extra_2 } ' )","title":"Abstract OutputElement"},{"location":"reference/elements/output_element/#outputelement","text":"Bases: ABC An element is an object that will be interpreted based on the Project's mode (script execution, extraction, streamlit code generation, etc.). OneCode projects should not directly call the OutputElement but its corresponding static function defined as the snake case of the element class name. For instance: Failure # wrong x = MyOutputElement ( key , value , label ) Success # correct x = my_output_element ( key , value , label ) OutputElement is the base class for outputs. By inheriting it, it is mandatory to define: _validate() : internal method to ensure the value checks out at runtime. streamlit() : method returning the Streamlit code to be generated. Note Depending on your case, you may need to subclass value too (e.g. like CsvOutput and FileOutput). Tip Don't forget that the Python filename of an element should correspond to the snake case form of the element class name (e.g. FileOutput -> file_output.py ). You may use pydash functions snake_case() and pascal_case() to find the right conversion between the two forms. Attributes: Name Type Description label str Human readable name typically used by streamlit() for display. value Any Actual value of the element.","title":"OutputElement"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement.label","text":"Get the label with triple-quotes and escaped to handle human-readable string. It is primarly meant to be directly used in the Streamlit generated code for the label parameter. See streamlit() for more information. Returns: Type Description str The string to be used in streamlit() for the label parameter. Example from onecode import Mode , Project , text_output Project () . mode = Mode . CONSOLE x = text_output ( \"Hello l'aspirateur!\" , None ) assert x . label == \"'''Hello l \\' aspirateur!'''\"","title":"label"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement.value","text":"Get the value of the element. By default this value is the one provided during at the initialization. Feel free to overwrite this property as required. For instance, FileOutput and CsvOutput re-implement it for their own purpose. Returns: Type Description Any By default, the same as the initial value.","title":"value"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement.__call__","text":"Directly returns static_call().","title":"__call__()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement.__init__","text":"Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value Any Initial value for the parameter. This value may be transformed depending on the element. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None **kwargs Any Extra arguments to populate the element with. Argument names cannot overwrite existing attributes or methods name such as streamlit , _value , etc. {} Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method.","title":"__init__()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement._build_streamlit","text":"Function called when Project mode is Mode.STREAMLIT . This will generate the output static function called when the corresponding output file is selected in the Streamlit App file tree. The function signature is made of the internal attributes and any other custom attributes. Note See streamlit() for more information. Returns: Type Description str The block code generated by this OutputElement to be written out to the generated str Streamlit app code.","title":"_build_streamlit()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement._console","text":"Function called when Project mode is Mode.CONSOLE . Returns: Type Description OutputElement This OutputElement object.","title":"_console()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement._execute","text":"Function called when Project mode is Mode.EXECUTE . The value will first be prepared, validated then all element attributes will be output to the manifest file (see Project.write_output() ). Returns: Type Description Any The value of this element after resolution (preparation and validation).","title":"_execute()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement._extract","text":"Nothing is performed: OutputElement attributes are not extracted as the actual output attributes will be dumped into a manifest file.","title":"_extract()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement._extract_all","text":"Nothing is performed: OutputElement attributes are not extracted as the actual output attributes will be dumped into a manifest file.","title":"_extract_all()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement._load_then_execute","text":"Directly returns _execute().","title":"_load_then_execute()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement._validate","text":"You must re-implement this function to validate at runtime the value before being returned during the OneCode project execution. This function must raise an error in case the value is incorrect/inconsistent wrt the element parameters. Parameters: Name Type Description Default value Any Prepared value to be checked (do not use self.value ). required Example For instance, an image output value will fail to validate if the file extension is not a valid/known extension such as jpeg, png, etc. def _validate ( self , value : str ) -> None : _ , ext = os . path . splitext ( self . value ) valid_ext = [ '.jpg' , '.jpeg' , '.png' , '.svg' , ] if ext . lower () not in valid_ext : raise ValueError ( f '''[ { self . key } ] Invalid image extension: { ext } (accepted: { ', ' . join ( valid_ext ) } )''' )","title":"_validate()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement.static_call","text":"Internal cornerstone for OneCode to distribute the action to perform according to the Project mode. Raises: Type Description ValueError if the Project mode is unknown, e.g. if there is no method matching the mode name.","title":"static_call()"},{"location":"reference/elements/output_element/#onecode.elements.output_element.OutputElement.streamlit","text":"You must re-implement this function to return the expected Streamlit block code for this element. This block code will be written out to the generated Streamlit App code. You should write this block code as the body of a static function yielding all internal attributes (such as key , label , value and kind ) and any other custom attributes provided in this OutputElement initialization function's signature. For instance: class MyOutputElement ( OutputElement ): def __init__ ( self , key : str , value : Any , label : Optional [ str ], my_extra_1 : int , my_extra_2 : str ): # ... will generated the following static function signature function _MyOutputElement ( key , label , value , kind , my_extra_1 , my_extra_2 ) Returns: Type Description str The Streamlit block code to be output in the generated Streamlit App code. Example def streamlit () -> str : return ''' st.write(f' {key} - {label} - {value} - {kind} : {my_extra_1} | {my_extra_2} ') ''' will write out to the Streamlit App file: # static function called when the corresponding file is selected in the tree function _MyOutputElement ( key , label , value , kind , my_extra_1 , my_extra_2 ) st . write ( f ' { key } - { label } - { value } - { kind } : { my_extra_1 } | { my_extra_2 } ' )","title":"streamlit()"},{"location":"reference/elements/output_element_list/","text":"Output Elements \u00b6 Available output elements for OneCode projects: csv_output file_output image_output text_output csv_output \u00b6 def csv_output ( key : str , value : str , label : Optional [ str ] = None , tags : Optional [ List [ str ]] = None ) A CSV table with a label on top. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output CSV file which must have a .csv extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import csv_output , Mode , Project Project () . mode = Mode . CONSOLE widget = csv_output ( key = \"CsvOutput\" , value = \"/path/to/file.csv\" , label = \"My CsvOutput\" , tags = [ 'CSV' ] ) print ( widget ) Output \"/path/to/file.csv\" file_output \u00b6 def file_output ( key : str , value : str , label : Optional [ str ] = None , tags : Optional [ List [ str ]] = None ) Basic information about the file, such as size and file path. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output file. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import file_output , Mode , Project Project () . mode = Mode . CONSOLE widget = file_output ( key = \"FileOutput\" , value = \"/path/to/file.txt\" , label = \"My FileOutput\" , tags = [ 'TXT' ] ) print ( widget ) Output \"/path/to/file.txt\" image_output \u00b6 def image_output ( key : str , value : str , label : Optional [ str ] = None , tags : Optional [ List [ str ]] = None ) An image as part of the image carousel. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output image file which must have a .jpg , .jpeg , .png or .svg extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import image_output , Mode , Project Project () . mode = Mode . CONSOLE widget = image_output ( key = \"ImageOutput\" , value = \"/path/to/file.jpg\" , label = \"My ImageOutput\" , tags = [ 'Image' ] ) print ( widget ) Output \"/path/to/file.jpg\" text_output \u00b6 def text_output ( key : str , value : str , label : Optional [ str ] = None , tags : Optional [ List [ str ]] = None , truncate_at : int = 50000 ) A text file preview. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output CSV file which must have a .csv extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None truncate_at int Truncate the preview at the specified number of characters. 50000 Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import text_output , Mode , Project Project () . mode = Mode . CONSOLE widget = text_output ( key = \"TextOutput\" , value = \"/path/to/file.txt\" , label = \"My TextOutput\" , tags = [ 'Text' ], truncate_at = 1000 ) print ( widget ) Output \"/path/to/file.txt\"","title":"Output Elements"},{"location":"reference/elements/output_element_list/#output-elements","text":"Available output elements for OneCode projects: csv_output file_output image_output text_output","title":"Output Elements"},{"location":"reference/elements/output_element_list/#csv_output","text":"def csv_output ( key : str , value : str , label : Optional [ str ] = None , tags : Optional [ List [ str ]] = None ) A CSV table with a label on top. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output CSV file which must have a .csv extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import csv_output , Mode , Project Project () . mode = Mode . CONSOLE widget = csv_output ( key = \"CsvOutput\" , value = \"/path/to/file.csv\" , label = \"My CsvOutput\" , tags = [ 'CSV' ] ) print ( widget ) Output \"/path/to/file.csv\"","title":"csv_output"},{"location":"reference/elements/output_element_list/#file_output","text":"def file_output ( key : str , value : str , label : Optional [ str ] = None , tags : Optional [ List [ str ]] = None ) Basic information about the file, such as size and file path. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output file. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import file_output , Mode , Project Project () . mode = Mode . CONSOLE widget = file_output ( key = \"FileOutput\" , value = \"/path/to/file.txt\" , label = \"My FileOutput\" , tags = [ 'TXT' ] ) print ( widget ) Output \"/path/to/file.txt\"","title":"file_output"},{"location":"reference/elements/output_element_list/#image_output","text":"def image_output ( key : str , value : str , label : Optional [ str ] = None , tags : Optional [ List [ str ]] = None ) An image as part of the image carousel. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output image file which must have a .jpg , .jpeg , .png or .svg extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import image_output , Mode , Project Project () . mode = Mode . CONSOLE widget = image_output ( key = \"ImageOutput\" , value = \"/path/to/file.jpg\" , label = \"My ImageOutput\" , tags = [ 'Image' ] ) print ( widget ) Output \"/path/to/file.jpg\"","title":"image_output"},{"location":"reference/elements/output_element_list/#text_output","text":"def text_output ( key : str , value : str , label : Optional [ str ] = None , tags : Optional [ List [ str ]] = None , truncate_at : int = 50000 ) A text file preview. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output CSV file which must have a .csv extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None truncate_at int Truncate the preview at the specified number of characters. 50000 Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import text_output , Mode , Project Project () . mode = Mode . CONSOLE widget = text_output ( key = \"TextOutput\" , value = \"/path/to/file.txt\" , label = \"My TextOutput\" , tags = [ 'Text' ], truncate_at = 1000 ) print ( widget ) Output \"/path/to/file.txt\"","title":"text_output"},{"location":"reference/elements/input/checkbox/","text":"Checkbox \u00b6 Bases: InputElement _value_type : type property \u00b6 Get the Checkbox value type: boolean bool . __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False ) \u00b6 A simple checkbox with a label. Value is either True, False or None. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ bool , List [ bool ]]] Initial check status: True, False or None. required label Optional [ str ] Label to display next to the checkbox. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import checkbox , Mode , Project Project () . mode = Mode . EXECUTE widget = checkbox ( key = \"Checkbox\" , value = True , label = \"My Checkbox\" ) print ( widget ) Output True _validate ( value ) \u00b6 No validation is performed. streamlit ( id ) \u00b6 Returns: Type Description str The Streamlit code for a checkbox ( st.checkbox ).","title":"Checkbox"},{"location":"reference/elements/input/checkbox/#checkbox","text":"Bases: InputElement","title":"Checkbox"},{"location":"reference/elements/input/checkbox/#onecode.elements.input.checkbox.Checkbox._value_type","text":"Get the Checkbox value type: boolean bool .","title":"_value_type"},{"location":"reference/elements/input/checkbox/#onecode.elements.input.checkbox.Checkbox.__init__","text":"A simple checkbox with a label. Value is either True, False or None. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ bool , List [ bool ]]] Initial check status: True, False or None. required label Optional [ str ] Label to display next to the checkbox. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import checkbox , Mode , Project Project () . mode = Mode . EXECUTE widget = checkbox ( key = \"Checkbox\" , value = True , label = \"My Checkbox\" ) print ( widget ) Output True","title":"__init__()"},{"location":"reference/elements/input/checkbox/#onecode.elements.input.checkbox.Checkbox._validate","text":"No validation is performed.","title":"_validate()"},{"location":"reference/elements/input/checkbox/#onecode.elements.input.checkbox.Checkbox.streamlit","text":"Returns: Type Description str The Streamlit code for a checkbox ( st.checkbox ).","title":"streamlit()"},{"location":"reference/elements/input/csv_reader/","text":"CsvReader \u00b6 Bases: InputElement _value_type : type property \u00b6 Get the CsvReader value type: Pandas DataFrame pd.DataFrame . value : Optional [ pd . DataFrame ] property \u00b6 Returns: Type Description Optional [ pd . DataFrame ] The Pandas DataFrame loaded from the provided file path, otherwise None if the Optional [ pd . DataFrame ] file does not exists. __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False , tags = None ) \u00b6 A CSV-file reader returning a Pandas DataFrame and displayed as a table in Streamlit. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Path to the CSV file. CSV file must exists, even for the Streamlit mode. required label Optional [ str ] Label to display on top of the table. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used by the Mode.EXTRACT_ALL when dumping attributes to JSON. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example import pandas as pd from onecode import csv_reader , Mode , Project Project () . mode = Mode . EXECUTE widget = csv_reader ( key = \"CsvReader\" , value = \"/path/to/file.csv\" , label = \"My CSV Reader\" , tags = [ 'CSV' ] ) pd . testing . assert_frame_equal ( widget , pd . read_csv ( \"/path/to/file.csv\" )) _validate ( value ) \u00b6 Raises: Type Description ValueError if the DataFrame is empty. streamlit ( id ) \u00b6 Returns: Type Description str The Streamlit code for a Pandas DataFrame ( st.dataframe ). Note A file selector ( st.file_uploader ) is provided on top of the table.","title":"CsvReader"},{"location":"reference/elements/input/csv_reader/#csvreader","text":"Bases: InputElement","title":"CsvReader"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader._value_type","text":"Get the CsvReader value type: Pandas DataFrame pd.DataFrame .","title":"_value_type"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader.value","text":"Returns: Type Description Optional [ pd . DataFrame ] The Pandas DataFrame loaded from the provided file path, otherwise None if the Optional [ pd . DataFrame ] file does not exists.","title":"value"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader.__init__","text":"A CSV-file reader returning a Pandas DataFrame and displayed as a table in Streamlit. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Path to the CSV file. CSV file must exists, even for the Streamlit mode. required label Optional [ str ] Label to display on top of the table. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used by the Mode.EXTRACT_ALL when dumping attributes to JSON. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example import pandas as pd from onecode import csv_reader , Mode , Project Project () . mode = Mode . EXECUTE widget = csv_reader ( key = \"CsvReader\" , value = \"/path/to/file.csv\" , label = \"My CSV Reader\" , tags = [ 'CSV' ] ) pd . testing . assert_frame_equal ( widget , pd . read_csv ( \"/path/to/file.csv\" ))","title":"__init__()"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader._validate","text":"Raises: Type Description ValueError if the DataFrame is empty.","title":"_validate()"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader.streamlit","text":"Returns: Type Description str The Streamlit code for a Pandas DataFrame ( st.dataframe ). Note A file selector ( st.file_uploader ) is provided on top of the table.","title":"streamlit()"},{"location":"reference/elements/input/dropdown/","text":"Dropdown \u00b6 Bases: InputElement _value_type : type property \u00b6 Get the Dropdown value type: either a list of string list[str] when the Dropdown is multiple choice, otherwise a single string str . __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False , options = [], multiple = False ) \u00b6 A single or multipe choice dropdown menu. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ Union [ str , int , float ], List [ Union [ str , int , float ]], List [ List [ Union [ str , int , float ]]]]] Pre-selected value(s) among the options. required label Optional [ str ] Label to display left of the dropdown menu. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False options Union [ List , str ] List all possible options available in the dropdown menu. This list may either be fixed or dynamic (to a certain extent): in the latter case, use Expressions in a similar way as optional and count . See example below. [] multiple bool Set to True if multiple choice is allowed, otherwise only a single element can be selected. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example Fixed options: from onecode import dropdown , Mode , Project Project () . mode = Mode . EXECUTE widget = dropdown ( key = \"Dropdown\" , value = [ \"A\" , \"C\" ], options = [ \"A\" , \"B\" , \"C\" ], multiple = True ) print ( widget ) Output [ \"A\" , \"C\" ] Dynamic options: from onecode import csv_reader, dropdown, Mode, Project Project().mode = Mode.EXECUTE df = csv_reader(\"csv\", \"/path/to/file.csv\") widget = dropdown( key=\"Dynamic Dropdown\", value=None, options='$csv$.columns', optional=True ) print(widget) Output None _validate ( value ) \u00b6 Validate the selected value (see _validate_option_value() ). In case of multipe choice, each choice is validated individually. _validate_option_value ( value ) \u00b6 Raises: Type Description ValueError if the value is not part of the possible options. Note This validation is not performed when the option list is dynamic. streamlit ( id ) \u00b6 Returns: Type Description str The Streamlit code for a dropdown menu ( st.multiselect | selectbox ).","title":"Dropdown"},{"location":"reference/elements/input/dropdown/#dropdown","text":"Bases: InputElement","title":"Dropdown"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown._value_type","text":"Get the Dropdown value type: either a list of string list[str] when the Dropdown is multiple choice, otherwise a single string str .","title":"_value_type"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown.__init__","text":"A single or multipe choice dropdown menu. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ Union [ str , int , float ], List [ Union [ str , int , float ]], List [ List [ Union [ str , int , float ]]]]] Pre-selected value(s) among the options. required label Optional [ str ] Label to display left of the dropdown menu. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False options Union [ List , str ] List all possible options available in the dropdown menu. This list may either be fixed or dynamic (to a certain extent): in the latter case, use Expressions in a similar way as optional and count . See example below. [] multiple bool Set to True if multiple choice is allowed, otherwise only a single element can be selected. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example Fixed options: from onecode import dropdown , Mode , Project Project () . mode = Mode . EXECUTE widget = dropdown ( key = \"Dropdown\" , value = [ \"A\" , \"C\" ], options = [ \"A\" , \"B\" , \"C\" ], multiple = True ) print ( widget ) Output [ \"A\" , \"C\" ] Dynamic options: from onecode import csv_reader, dropdown, Mode, Project Project().mode = Mode.EXECUTE df = csv_reader(\"csv\", \"/path/to/file.csv\") widget = dropdown( key=\"Dynamic Dropdown\", value=None, options='$csv$.columns', optional=True ) print(widget) Output None","title":"__init__()"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown._validate","text":"Validate the selected value (see _validate_option_value() ). In case of multipe choice, each choice is validated individually.","title":"_validate()"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown._validate_option_value","text":"Raises: Type Description ValueError if the value is not part of the possible options. Note This validation is not performed when the option list is dynamic.","title":"_validate_option_value()"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown.streamlit","text":"Returns: Type Description str The Streamlit code for a dropdown menu ( st.multiselect | selectbox ).","title":"streamlit()"},{"location":"reference/elements/input/file_input/","text":"FileInput \u00b6 Bases: InputElement _value_type : type property \u00b6 Get the FileInput value type: either a list of string list[str] when the FileInput is multiple file selection, otherwise a single string str . value : Optional [ Union [ List [ str ], str ]] property \u00b6 Returns: Type Description Optional [ Union [ List [ str ], str ]] The path or list of paths for the selected file(s): if paths are not absolute, then Optional [ Union [ List [ str ], str ]] they are considered relative to the data root folder. See Optional [ Union [ List [ str ], str ]] Best Practices With Data for more information. __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False , types = None , multiple = False , tags = None ) \u00b6 A single or multiple file selector. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ], List [ List [ str ]]]] Path to file(s). Provided file(s) don't necessarily have to exist for the Streamlit mode, however their existence will be checked at execution time. If paths are not absolute, then they are considered relative to the data root folder. See Best Practices With Data for more information. required label Optional [ str ] Label to display left of the file selector. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False types List [ Tuple [ str , str ]] List of filters allowing to narrow file selection within Streamlit. Each filter must be a pair of (name, list of allowed extensions), e.g. (\"Image\", \".jpg .png .jpeg\") . You may use the FileFilter enums for convenience. None multiple bool Set to True if multiple choice is allowed, otherwise only a single element can be selected. False tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used by the Mode.EXTRACT_ALL when dumping attributes to JSON. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import file_input , Mode , Project Project () . mode = Mode . EXECUTE widget = file_input ( key = \"FileInput\" , value = [ \"/path/to/file1.txt\" , \"/path/to/file2.csv\" ], multiple = True , tags = [ 'MyTags' ] ) print ( widget ) Output [ \"/path/to/file1.txt\" , \"/path/to/file2.csv\" ] _validate ( value ) \u00b6 Validate the selected value (see _validate_option_value()). In case of multipe file selection, each choice is validated individually. _validate_file_value ( value ) \u00b6 Raises: Type Description FileNotFoundError if the path does not exist or is not a file. streamlit ( id ) \u00b6 Returns: Type Description str The Streamlit code for a file selection ( st.text_input for the path combined with a str tkinter.filedialog.askopenfilename for the file selection).","title":"FileInput"},{"location":"reference/elements/input/file_input/#fileinput","text":"Bases: InputElement","title":"FileInput"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput._value_type","text":"Get the FileInput value type: either a list of string list[str] when the FileInput is multiple file selection, otherwise a single string str .","title":"_value_type"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput.value","text":"Returns: Type Description Optional [ Union [ List [ str ], str ]] The path or list of paths for the selected file(s): if paths are not absolute, then Optional [ Union [ List [ str ], str ]] they are considered relative to the data root folder. See Optional [ Union [ List [ str ], str ]] Best Practices With Data for more information.","title":"value"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput.__init__","text":"A single or multiple file selector. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ], List [ List [ str ]]]] Path to file(s). Provided file(s) don't necessarily have to exist for the Streamlit mode, however their existence will be checked at execution time. If paths are not absolute, then they are considered relative to the data root folder. See Best Practices With Data for more information. required label Optional [ str ] Label to display left of the file selector. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False types List [ Tuple [ str , str ]] List of filters allowing to narrow file selection within Streamlit. Each filter must be a pair of (name, list of allowed extensions), e.g. (\"Image\", \".jpg .png .jpeg\") . You may use the FileFilter enums for convenience. None multiple bool Set to True if multiple choice is allowed, otherwise only a single element can be selected. False tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used by the Mode.EXTRACT_ALL when dumping attributes to JSON. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import file_input , Mode , Project Project () . mode = Mode . EXECUTE widget = file_input ( key = \"FileInput\" , value = [ \"/path/to/file1.txt\" , \"/path/to/file2.csv\" ], multiple = True , tags = [ 'MyTags' ] ) print ( widget ) Output [ \"/path/to/file1.txt\" , \"/path/to/file2.csv\" ]","title":"__init__()"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput._validate","text":"Validate the selected value (see _validate_option_value()). In case of multipe file selection, each choice is validated individually.","title":"_validate()"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput._validate_file_value","text":"Raises: Type Description FileNotFoundError if the path does not exist or is not a file.","title":"_validate_file_value()"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput.streamlit","text":"Returns: Type Description str The Streamlit code for a file selection ( st.text_input for the path combined with a str tkinter.filedialog.askopenfilename for the file selection).","title":"streamlit()"},{"location":"reference/elements/input/number_input/","text":"NumberInput \u00b6 Bases: InputElement _value_type : type property \u00b6 Get the NumberInput value type: floating point number float . __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False , min = None , max = None , step = None ) \u00b6 A field for numerical values. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ float , List [ float ]]] Initial numerical value. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False min float Optionally limit the possible values with a lower bound. None max float Optionally limit the possible values with an upper bound. None step float Optionally set a step used when increment/decrement button are used. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import number_input , Mode , Project Project () . mode = Mode . EXECUTE widget = number_input ( key = \"Number Input\" , value = 5.1 , min = 5 , max = 6 ) print ( widget ) Output 5.1 _validate ( value ) \u00b6 Raises: Type Description ValueError if the value is out of bound (min/max) or if the minimum is greather than the maximum. streamlit ( id ) \u00b6 Returns: Type Description str The Streamlit code for a number input field ( st.number_input ).","title":"NumberInput"},{"location":"reference/elements/input/number_input/#numberinput","text":"Bases: InputElement","title":"NumberInput"},{"location":"reference/elements/input/number_input/#onecode.elements.input.number_input.NumberInput._value_type","text":"Get the NumberInput value type: floating point number float .","title":"_value_type"},{"location":"reference/elements/input/number_input/#onecode.elements.input.number_input.NumberInput.__init__","text":"A field for numerical values. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ float , List [ float ]]] Initial numerical value. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False min float Optionally limit the possible values with a lower bound. None max float Optionally limit the possible values with an upper bound. None step float Optionally set a step used when increment/decrement button are used. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import number_input , Mode , Project Project () . mode = Mode . EXECUTE widget = number_input ( key = \"Number Input\" , value = 5.1 , min = 5 , max = 6 ) print ( widget ) Output 5.1","title":"__init__()"},{"location":"reference/elements/input/number_input/#onecode.elements.input.number_input.NumberInput._validate","text":"Raises: Type Description ValueError if the value is out of bound (min/max) or if the minimum is greather than the maximum.","title":"_validate()"},{"location":"reference/elements/input/number_input/#onecode.elements.input.number_input.NumberInput.streamlit","text":"Returns: Type Description str The Streamlit code for a number input field ( st.number_input ).","title":"streamlit()"},{"location":"reference/elements/input/radio_button/","text":"RadioButton \u00b6 Bases: InputElement _value_type : type property \u00b6 Get the RadioButton value type: string str . __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False , options = [], horizontal = False ) \u00b6 A single choice represented as a group of exclusive radio buttons. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Radio button initially selected. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False options List [ str ] List all possible options available. This list may either be fixed or dynamic (to a certain extent): in the latter case, use expressions in a similar way as optional and count . See example below. [] horizontal bool Set to True to have radio buttons displayed horizontally, otherwise radio buttons will be displayed vertically. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example Fixed options: from onecode import radio_button , Mode , Project Project () . mode = Mode . EXECUTE widget = radio_button ( key = \"RadioButton\" , value = \"A\" , options = [ \"A\" , \"B\" , \"C\" ] ) print ( widget ) Output \"A\" Dynamic options: from onecode import csv_reader, radio_button, Mode, Project Project().mode = Mode.EXECUTE df = csv_reader(\"csv\", \"/path/to/file.csv\") widget = radio_button( key=\"Dynamic RadioButton\", value=None, options='$csv$.columns', optional=True ) assert widget is None _validate ( value ) \u00b6 Raises: Type Description ValueError if the choice is not part of possible options. streamlit ( id ) \u00b6 Returns: Type Description str The Streamlit code for a group of radio buttons ( st.radio ).","title":"RadioButton"},{"location":"reference/elements/input/radio_button/#radiobutton","text":"Bases: InputElement","title":"RadioButton"},{"location":"reference/elements/input/radio_button/#onecode.elements.input.radio_button.RadioButton._value_type","text":"Get the RadioButton value type: string str .","title":"_value_type"},{"location":"reference/elements/input/radio_button/#onecode.elements.input.radio_button.RadioButton.__init__","text":"A single choice represented as a group of exclusive radio buttons. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Radio button initially selected. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False options List [ str ] List all possible options available. This list may either be fixed or dynamic (to a certain extent): in the latter case, use expressions in a similar way as optional and count . See example below. [] horizontal bool Set to True to have radio buttons displayed horizontally, otherwise radio buttons will be displayed vertically. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example Fixed options: from onecode import radio_button , Mode , Project Project () . mode = Mode . EXECUTE widget = radio_button ( key = \"RadioButton\" , value = \"A\" , options = [ \"A\" , \"B\" , \"C\" ] ) print ( widget ) Output \"A\" Dynamic options: from onecode import csv_reader, radio_button, Mode, Project Project().mode = Mode.EXECUTE df = csv_reader(\"csv\", \"/path/to/file.csv\") widget = radio_button( key=\"Dynamic RadioButton\", value=None, options='$csv$.columns', optional=True ) assert widget is None","title":"__init__()"},{"location":"reference/elements/input/radio_button/#onecode.elements.input.radio_button.RadioButton._validate","text":"Raises: Type Description ValueError if the choice is not part of possible options.","title":"_validate()"},{"location":"reference/elements/input/radio_button/#onecode.elements.input.radio_button.RadioButton.streamlit","text":"Returns: Type Description str The Streamlit code for a group of radio buttons ( st.radio ).","title":"streamlit()"},{"location":"reference/elements/input/slider/","text":"Slider \u00b6 Bases: InputElement _value_type : type property \u00b6 Get the Slider value type: floating point or integer number float|int . __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False , min = 0.0 , max = 1.0 , step = 0.1 ) \u00b6 A slider for numerical values. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ float , List [ float ]]] Initial numerical value. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False min float Mandatory lower bound, defaults to 0. 0.0 max float Mandatory upper bound, defaults to 1. 1.0 step float Mandatory step used when incrementing/decrementing the slider, defaults to 0.1. 0.1 Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import slider , Mode , Project Project () . mode = Mode . EXECUTE widget = slider ( key = \"Slider\" , value = 5.1 , min = 5 , max = 6 ) print ( widget ) Output 5.1 _validate ( value ) \u00b6 Raises: Type Description ValueError if the value is out of bound (min/max) or if the minimum is greather than the maximum. streamlit ( id ) \u00b6 Returns: Type Description str The Streamlit code for a slider ( st.slider ).","title":"Slider"},{"location":"reference/elements/input/slider/#slider","text":"Bases: InputElement","title":"Slider"},{"location":"reference/elements/input/slider/#onecode.elements.input.slider.Slider._value_type","text":"Get the Slider value type: floating point or integer number float|int .","title":"_value_type"},{"location":"reference/elements/input/slider/#onecode.elements.input.slider.Slider.__init__","text":"A slider for numerical values. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ float , List [ float ]]] Initial numerical value. required label Optional [ str ] Label to display on top of the field. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False min float Mandatory lower bound, defaults to 0. 0.0 max float Mandatory upper bound, defaults to 1. 1.0 step float Mandatory step used when incrementing/decrementing the slider, defaults to 0.1. 0.1 Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import slider , Mode , Project Project () . mode = Mode . EXECUTE widget = slider ( key = \"Slider\" , value = 5.1 , min = 5 , max = 6 ) print ( widget ) Output 5.1","title":"__init__()"},{"location":"reference/elements/input/slider/#onecode.elements.input.slider.Slider._validate","text":"Raises: Type Description ValueError if the value is out of bound (min/max) or if the minimum is greather than the maximum.","title":"_validate()"},{"location":"reference/elements/input/slider/#onecode.elements.input.slider.Slider.streamlit","text":"Returns: Type Description str The Streamlit code for a slider ( st.slider ).","title":"streamlit()"},{"location":"reference/elements/input/text_input/","text":"TextInput \u00b6 Bases: InputElement _value_type : type property \u00b6 Get the TextInput value type: string str . __init__ ( key , value , label = None , count = None , optional = False , hide_when_disabled = False , max_chars = None , placeholder = None , multiline = False ) \u00b6 A simple text field. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Initial text value. required label Optional [ str ] Label to display next to the checkbox. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False max_chars int Maximum number of characters allowed for this text field. None placeholder str Placeholder text shown whenever there is no value. None multiline Union [ bool , int ] Set to True or a height in pixels to make it multiline text area. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import text_input , Mode , Project Project () . mode = Mode . EXECUTE widget = text_input ( key = \"TextInput\" , value = \"OneCode rocks!\" , label = \"My TextInput\" ) print ( widget ) Output \"OneCode rocks!\" _validate ( value ) \u00b6 No validation is performed. streamlit ( id ) \u00b6 Returns: Type Description str The Streamlit code for a text input field ( st.text ).","title":"TextInput"},{"location":"reference/elements/input/text_input/#textinput","text":"Bases: InputElement","title":"TextInput"},{"location":"reference/elements/input/text_input/#onecode.elements.input.text_input.TextInput._value_type","text":"Get the TextInput value type: string str .","title":"_value_type"},{"location":"reference/elements/input/text_input/#onecode.elements.input.text_input.TextInput.__init__","text":"A simple text field. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects). required value Optional [ Union [ str , List [ str ]]] Initial text value. required label Optional [ str ] Label to display next to the checkbox. None count Optional [ Union [ int , str ]] Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if count is defined, the expected value should always be a list, even if the count is 1 . count can either be a fixed number (e.g. 3 ) or an expression dependent of other elements (see Using Expressions for more information). None optional Union [ bool , str ] Specify whether the value may be None. optional can either be a fixed boolean ( False or True ) or a conditional expression dependent of other elements (see Using Expressions for more information). False hide_when_disabled bool If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled. False max_chars int Maximum number of characters allowed for this text field. None placeholder str Placeholder text shown whenever there is no value. None multiline Union [ bool , int ] Set to True or a height in pixels to make it multiline text area. False Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import text_input , Mode , Project Project () . mode = Mode . EXECUTE widget = text_input ( key = \"TextInput\" , value = \"OneCode rocks!\" , label = \"My TextInput\" ) print ( widget ) Output \"OneCode rocks!\"","title":"__init__()"},{"location":"reference/elements/input/text_input/#onecode.elements.input.text_input.TextInput._validate","text":"No validation is performed.","title":"_validate()"},{"location":"reference/elements/input/text_input/#onecode.elements.input.text_input.TextInput.streamlit","text":"Returns: Type Description str The Streamlit code for a text input field ( st.text ).","title":"streamlit()"},{"location":"reference/elements/output/csv_output/","text":"CsvOutput \u00b6 Bases: OutputElement value : str property \u00b6 Returns: Type Description str The path or list of paths for the output file(s): if paths are not absolute, then str they are considered relative to the data output folder. See str Best Practices With Data for more information. __init__ ( key , value , label = None , tags = None ) \u00b6 A CSV table with a label on top. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output CSV file which must have a .csv extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import csv_output , Mode , Project Project () . mode = Mode . CONSOLE widget = csv_output ( key = \"CsvOutput\" , value = \"/path/to/file.csv\" , label = \"My CsvOutput\" , tags = [ 'CSV' ] ) print ( widget ) Output \"/path/to/file.csv\" _validate ( value ) \u00b6 Raises: Type Description ValueError if the file does not have a CSV extension .csv . streamlit () staticmethod \u00b6 Returns: Type Description str The Streamlit code to show a table corresponding to the output CSV file.","title":"CsvOutput"},{"location":"reference/elements/output/csv_output/#csvoutput","text":"Bases: OutputElement","title":"CsvOutput"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput.value","text":"Returns: Type Description str The path or list of paths for the output file(s): if paths are not absolute, then str they are considered relative to the data output folder. See str Best Practices With Data for more information.","title":"value"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput.__init__","text":"A CSV table with a label on top. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output CSV file which must have a .csv extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import csv_output , Mode , Project Project () . mode = Mode . CONSOLE widget = csv_output ( key = \"CsvOutput\" , value = \"/path/to/file.csv\" , label = \"My CsvOutput\" , tags = [ 'CSV' ] ) print ( widget ) Output \"/path/to/file.csv\"","title":"__init__()"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput._validate","text":"Raises: Type Description ValueError if the file does not have a CSV extension .csv .","title":"_validate()"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput.streamlit","text":"Returns: Type Description str The Streamlit code to show a table corresponding to the output CSV file.","title":"streamlit()"},{"location":"reference/elements/output/file_output/","text":"FileOutput \u00b6 Bases: OutputElement value : str property \u00b6 Returns: Type Description str The path or list of paths for the output file(s): if paths are not absolute, then str they are considered relative to the data output folder. See str Best Practices With Data for more information. __init__ ( key , value , label = None , tags = None ) \u00b6 Basic information about the file, such as size and file path. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output file. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import file_output , Mode , Project Project () . mode = Mode . CONSOLE widget = file_output ( key = \"FileOutput\" , value = \"/path/to/file.txt\" , label = \"My FileOutput\" , tags = [ 'TXT' ] ) print ( widget ) Output \"/path/to/file.txt\" _validate ( value ) \u00b6 No validation is performed. streamlit () staticmethod \u00b6 Returns: Type Description str The Streamlit code to show the basic output file information as text.","title":"FileOutput"},{"location":"reference/elements/output/file_output/#fileoutput","text":"Bases: OutputElement","title":"FileOutput"},{"location":"reference/elements/output/file_output/#onecode.elements.output.file_output.FileOutput.value","text":"Returns: Type Description str The path or list of paths for the output file(s): if paths are not absolute, then str they are considered relative to the data output folder. See str Best Practices With Data for more information.","title":"value"},{"location":"reference/elements/output/file_output/#onecode.elements.output.file_output.FileOutput.__init__","text":"Basic information about the file, such as size and file path. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output file. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import file_output , Mode , Project Project () . mode = Mode . CONSOLE widget = file_output ( key = \"FileOutput\" , value = \"/path/to/file.txt\" , label = \"My FileOutput\" , tags = [ 'TXT' ] ) print ( widget ) Output \"/path/to/file.txt\"","title":"__init__()"},{"location":"reference/elements/output/file_output/#onecode.elements.output.file_output.FileOutput._validate","text":"No validation is performed.","title":"_validate()"},{"location":"reference/elements/output/file_output/#onecode.elements.output.file_output.FileOutput.streamlit","text":"Returns: Type Description str The Streamlit code to show the basic output file information as text.","title":"streamlit()"},{"location":"reference/elements/output/image_output/","text":"ImageOutput \u00b6 Bases: OutputElement value : str property \u00b6 Returns: Type Description str The path or list of paths for the output file(s): if paths are not absolute, then str they are considered relative to the data output folder. See str Best Practices With Data for more information. __init__ ( key , value , label = None , tags = None ) \u00b6 An image as part of the image carousel. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output image file which must have a .jpg , .jpeg , .png or .svg extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import image_output , Mode , Project Project () . mode = Mode . CONSOLE widget = image_output ( key = \"ImageOutput\" , value = \"/path/to/file.jpg\" , label = \"My ImageOutput\" , tags = [ 'Image' ] ) print ( widget ) Output \"/path/to/file.jpg\" _validate ( value ) \u00b6 Raises: Type Description ValueError if the file does not have an image-like extension, i-e: .jpg , .jpeg , .png , .svg . streamlit () staticmethod \u00b6 Returns: Type Description str The Streamlit code to show an image as part of the image carousel. Tip A static function _show_img(filepath: str) is available for any Streamlit code to use. It will automatically add the given image to the carousel without you needing to deal with the carousel.","title":"ImageOutput"},{"location":"reference/elements/output/image_output/#imageoutput","text":"Bases: OutputElement","title":"ImageOutput"},{"location":"reference/elements/output/image_output/#onecode.elements.output.image_output.ImageOutput.value","text":"Returns: Type Description str The path or list of paths for the output file(s): if paths are not absolute, then str they are considered relative to the data output folder. See str Best Practices With Data for more information.","title":"value"},{"location":"reference/elements/output/image_output/#onecode.elements.output.image_output.ImageOutput.__init__","text":"An image as part of the image carousel. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output image file which must have a .jpg , .jpeg , .png or .svg extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import image_output , Mode , Project Project () . mode = Mode . CONSOLE widget = image_output ( key = \"ImageOutput\" , value = \"/path/to/file.jpg\" , label = \"My ImageOutput\" , tags = [ 'Image' ] ) print ( widget ) Output \"/path/to/file.jpg\"","title":"__init__()"},{"location":"reference/elements/output/image_output/#onecode.elements.output.image_output.ImageOutput._validate","text":"Raises: Type Description ValueError if the file does not have an image-like extension, i-e: .jpg , .jpeg , .png , .svg .","title":"_validate()"},{"location":"reference/elements/output/image_output/#onecode.elements.output.image_output.ImageOutput.streamlit","text":"Returns: Type Description str The Streamlit code to show an image as part of the image carousel. Tip A static function _show_img(filepath: str) is available for any Streamlit code to use. It will automatically add the given image to the carousel without you needing to deal with the carousel.","title":"streamlit()"},{"location":"reference/elements/output/text_output/","text":"TextOutput \u00b6 Bases: OutputElement value : str property \u00b6 Returns: Type Description str The path or list of paths for the output file(s): if paths are not absolute, then str they are considered relative to the data output folder. See str Best Practices With Data for more information. __init__ ( key , value , label = None , tags = None , truncate_at = 50000 ) \u00b6 A text file preview. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output CSV file which must have a .csv extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None truncate_at int Truncate the preview at the specified number of characters. 50000 Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import text_output , Mode , Project Project () . mode = Mode . CONSOLE widget = text_output ( key = \"TextOutput\" , value = \"/path/to/file.txt\" , label = \"My TextOutput\" , tags = [ 'Text' ], truncate_at = 1000 ) print ( widget ) Output \"/path/to/file.txt\" _validate ( value ) \u00b6 No validation is performed. streamlit () staticmethod \u00b6 Returns: Type Description str The Streamlit code to preview text of a file.","title":"TextOutput"},{"location":"reference/elements/output/text_output/#textoutput","text":"Bases: OutputElement","title":"TextOutput"},{"location":"reference/elements/output/text_output/#onecode.elements.output.text_output.TextOutput.value","text":"Returns: Type Description str The path or list of paths for the output file(s): if paths are not absolute, then str they are considered relative to the data output folder. See str Best Practices With Data for more information.","title":"value"},{"location":"reference/elements/output/text_output/#onecode.elements.output.text_output.TextOutput.__init__","text":"A text file preview. Parameters: Name Type Description Default key str ID of the element. It must be unique as it is the key used to story data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with _ . Try to choose a key that is meaningful for your context (see examples projects ). required value str Path to the output CSV file which must have a .csv extension. Unless absolute, a path is relative to the outputs folder of the flow currently running. required label Optional [ str ] Typically to be used by Streamlit for display purpose only. If not defined, it will default to the key . None tags Optional [ List [ str ]] Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest. None truncate_at int Truncate the preview at the specified number of characters. 50000 Raises: Type Description ValueError if the key is empty or starts with _ . AttributeError if one the kwargs conflicts with an existing attribute or method. Example from onecode import text_output , Mode , Project Project () . mode = Mode . CONSOLE widget = text_output ( key = \"TextOutput\" , value = \"/path/to/file.txt\" , label = \"My TextOutput\" , tags = [ 'Text' ], truncate_at = 1000 ) print ( widget ) Output \"/path/to/file.txt\"","title":"__init__()"},{"location":"reference/elements/output/text_output/#onecode.elements.output.text_output.TextOutput._validate","text":"No validation is performed.","title":"_validate()"},{"location":"reference/elements/output/text_output/#onecode.elements.output.text_output.TextOutput.streamlit","text":"Returns: Type Description str The Streamlit code to preview text of a file.","title":"streamlit()"},{"location":"reference/utils/utils/","text":"Utilities \u00b6 convert_expr ( expr ) \u00b6 Replace instances of a pattern in a given expression with a keyword and slugified values. Parameters: Name Type Description Default expr Optional [ str ] The expression to be converted. required Returns: Type Description str The converted expression. indent_block ( code , indent = 4 ) \u00b6 Indent a code block by a given number of spaces. Parameters: Name Type Description Default code Union [ str , List [ str ]] The code block to be indented. required indent int The number of spaces to be indented. 4 Returns: Type Description str The indented code block.","title":"Utilities"},{"location":"reference/utils/utils/#utilities","text":"","title":"Utilities"},{"location":"reference/utils/utils/#onecode.utils.format.convert_expr","text":"Replace instances of a pattern in a given expression with a keyword and slugified values. Parameters: Name Type Description Default expr Optional [ str ] The expression to be converted. required Returns: Type Description str The converted expression.","title":"convert_expr()"},{"location":"reference/utils/utils/#onecode.utils.format.indent_block","text":"Indent a code block by a given number of spaces. Parameters: Name Type Description Default code Union [ str , List [ str ]] The code block to be indented. required indent int The number of spaces to be indented. 4 Returns: Type Description str The indented code block.","title":"indent_block()"}]}