{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#manifesto","title":"Manifesto","text":"<p>Whether we are in the industry, academia, or simply in our everyday-life, we find ourselves encountering 3 categories of profiles no matter what the topic:</p> <ul> <li> <p>people who love to write code but don\u2019t necessarily have an application for it (a.k.a. the developers). Their pain point is usually finding something useful to create as well as a mass of people to actually use it on a regular basis (a.k.a. the developers\u2019 dream).</p> </li> <li> <p>people who actually have problems to solve but don\u2019t even know how it\u2019s possible to do something about it computerwise-speaking (a.k.a. the experts). Most of the time a simple solution (e.g. an Excel macro) does the trick: they may be mind-blown and very grateful about it for \u201csaving their life\u201d (a.k.a. the developers\u2019 greatest disappointment, as developers would have loved to create a brand-new cloud-based fully automated web-app synchronized with your phone ready to welcome a million users). Their pain point is finding someone who can identify the root cause of the issues and solve it.</p> </li> <li> <p>people who started as experts and have an affinity for technology (a.k.a. the tech-savvy/data scientists). They are genuinely interested in programming and usually start with high-level languages such as Python or JavaScript. Very quickly, they write applications that solve their problems and are super happy to share what they have done and how. They have a foot in both worlds: eventually go further and further down to the dark-side... Their pain point? Writing low-hanging fruit solutions may seem easy at first, but when it comes to create a complete application, deploy it and scale it, things get out-of-hands.</p> </li> <li> <p>actually we have a 4th category, people who don\u2019t care at all about it (a.k.a. the vast majority, e.g. my spouse). Developers can\u2019t stop themselves for trying and trying to convince they should be in the experts or tech-savvy/data scientists category (believe me, I keep trying every time, and 10 years later, it still doesn\u2019t work). Do yourself a favor, just accept it and move on. So, if you\u2019re in that bucket, I guess you can close this page and skip the reading unless you want to know why developers suffer from not being understood.</p> </li> </ul>"},{"location":"#getting-started","title":"Getting started","text":"<p>Well, well, which profile are you?</p> <ul> <li>expert</li> <li>tech-savvy/data scientist</li> <li>developer</li> </ul>"},{"location":"#onecode-overview","title":"OneCode Overview","text":""},{"location":"#onecode-for-experts","title":"OneCode for Experts","text":""},{"location":"#installation","title":"Installation","text":"<p>Hosted with  by PyPI, simply install with <code>pip</code>: <pre><code>pip install onecode[tech-expert]\n</code></pre></p>"},{"location":"#running-a-onecode-project","title":"Running a OneCode Project","text":"<p>You just received a OneCode Project and would like to run it? In a terminal, go to the root of the OneCode Project (e.g. <code>cd /path/to/onecode/project</code>), then run it:</p> <ul> <li>interactively through the web interface: <code>onecode-start</code></li> <li>in command line with the default parameter set: <code>python main.py</code></li> </ul> <p>Tip</p> <p>Advanced usage</p> <ul> <li>Run with your own dataset:<ol> <li>extract the default parameter set: <code>onecode-extract parameters.json</code></li> <li>update the <code>parameters.json</code> file with your values, preferentially relative to a root data folder (see Best Practices With Data).</li> <li>run with it:<ul> <li>either <code>python main.py parameters.json</code> if your data is located in the <code>./data</code> folder.</li> <li>or <code>ONECODE_PROJECT_DATA=/path/to/data python main.py parameters.json</code> if your data is located under another folder.</li> </ul> </li> </ol> </li> <li>Run a specific flow instead of the whole project: <code>python main.py --flow &lt;flow_id&gt;</code></li> <li>Get the full instructions set: <code>python main.py --help</code></li> <li>Set a OneCode configuration option or flag at runtime by prepending <code>ONECODE_CONFIG_</code> or <code>ONECODE_FLAG_</code>: <code>ONECODE_FLAG_LOGGER_COLOR=1 python main.py</code> will set automatically <code>Project().set_config(ConfigOption.LOGGER_COLOR, True)</code></li> </ul>"},{"location":"#onecode-for-tech-savviesdata-scientists","title":"OneCode for Tech-Savvies/Data Scientists","text":""},{"location":"#installation_1","title":"Installation","text":"<p>Hosted with  by PyPI, simply install with <code>pip</code>: <pre><code>pip install onecode[tech-expert]\n</code></pre></p>"},{"location":"#creating-a-new-onecode-project","title":"Creating a new OneCode Project","text":"<p>Installing a new OneCode skeleton to start from <pre><code>onecode-create\n\n# then follow the prompts\n? Enter the path where to create OneCode project /path/to/examples\n? Enter your OneCode project name: HelloWorld\n? Pick a name for your main flow: hello_world\n\u280b Creating new OneCode project\nInitialized empty Git repository in /path/to/examples/HelloWorld/.git/\n\n\u2705 Created HelloWorld OneCode project\n</code></pre></p> <p>To ensure everything is ok, run your project: <pre><code>cd /path/to/examples/HelloWorld\npython main.py\n\n# You should see the following printed\n[INFO] hello_world - hello_world.py:15 -\n        #####################################################################\n        ###&gt; Hello from hello_world!\n        ###&gt; Fill in this run() function with something awesome!\n        #####################################################################\n</code></pre></p> <p>Read onto the next section to now add some code.</p> <p>Tip</p> <p>Advanced usage</p> <ul> <li>Add a new flow to an existing OneCode project</li> <li>Re-organize your project flows</li> </ul>"},{"location":"#adding-code-to-your-project","title":"Adding code to your project","text":"<p>The created Project is a skeleton with a built-in mechanism to run it within the different possible environments. It is therefore preferable not to tamper with the files at the root of the Project, such as <code>main.py</code>, <code>app.py</code>, <code>.onecode.json</code>. Instead, consider your working area as being under the <code>flows</code> folder: feel free to put your own script architecture in there and call your Python code from the <code>run()</code> function.</p> <p>Danger</p> <p>Be aware these 3 important points though:</p> <ol> <li>Do not change the flow filenames</li> <li>Do not change the function name <code>run()</code> in the flow Python file</li> <li>Do not change the folder name <code>onecode_ext</code> located in the <code>flows</code> folder nor the the existing files in it.</li> </ol> <p>Long explanation</p> <ul> <li>a flow is recognized by the project through its filename (matching the flow ID) and the entry point is the <code>run()</code> defined function. So, you can put anything in your flow file, just make sure you keep the default defined function <code>run()</code> and the flow filename untouched.</li> <li><code>onecode_ext</code> is dedicated to extend/customize OneCode elements, so you can add new files under the <code>onecode_ext</code> folder, however don't edit the existing content and filenames. See the Developers section if you feel adventurous.</li> </ul> <p>So, what type of code should you be adding? Basically almost anything you want, the questions to ask yourself are:</p> <ul> <li>what input files and parameters should be controllable by the experts?</li> <li>what output files should be made available to the experts?</li> </ul> <p>Any of theses files or parameters can be exposed using the OneCode Elements. Here is a quickstart from scratch, asking for a name and output <code>Hello &lt;name&gt;</code> in the console and a file: <pre><code># HelloWorld/flows/hello_world.py\n\nfrom onecode import Logger, text_input, text_output\nfrom slugify import slugify\n\n\ndef run():\n    name = text_input(\n        key='name',\n        value='',\n        label='What is your name?',\n        placeholder=\"Type in your name\"\n    )\n\n    if not name:\n        Logger.error('Please type in your name!')\n\n    else:\n        out_string = f'Hello {name}'\n        Logger.info(out_string)\n\n        with open(text_output('output', f'hello_{slugify(name, separator=\"_\")}.txt'), 'w') as f:\n            f.write(out_string)\n</code></pre></p> <p>Great, how do you test that now? According to the Running a OneCode project section, you have several options:</p> <ol> <li>Run it interactively with Streamlit: <code>onecode-start</code></li> </ol> <p></p> <ol> <li>Run it from the command line: <code>python main.py</code>. Wait a minute, you get: <pre><code>[ERROR] hello_world - hello_world.py:14 - Please type in your name!\n</code></pre> Of course, the default value is an empty string <code>''</code>: <pre><code>name = text_input(\n    key='name',\n    value='',\n    label='What is your name?',\n    placeholder=\"Type in your name\"\n)\n</code></pre> How can you input your own parameter from the command line? You only need a JSON file made of the key-values required by this process. You could create it manually which is ok for this example, however for more complex projects, it could become tedious. Well, there is a magic command for that: <code>onecode-extract params.json</code> will make this JSON for you populated with the default values: <pre><code>{\n    \"name\": \"\"\n}\n</code></pre> Use your favorite text editor to write the values. This command is quite useful, especially when you have multiple parameter sets, simply keep them in a JSON file and run them as needed.</li> </ol> <p>From there, run the project with a given parameters set: <pre><code>echo '{\"name\": \"OneCode\"}' &gt; params.json\npython main.py params.json\n</code></pre></p> <p>You should get: <pre><code>[INFO] hello_world - hello_world.py:17 - Hello OneCode\n</code></pre></p> <p>Congratulations! With the same piece of code, you were able to run it in 3 different ways without having to change the code! That's the spirit of OneCode. Check out the other examples to keep going.</p> <p>Example</p> <p>More examples can be found here:</p> <ul> <li><code>HelloWorld</code>: most basic     example demonstrating an input text field and a process returning <code>\"Hello &lt;name&gt;\"</code> in the console     logger as well as in a file of the same name <code>hello_&lt;name&gt;.txt</code>.</li> <li><code>CSV to JSON Converter</code>:     example demonstrating simple input/output file fields and converting a CSV file to JSON.</li> <li><code>Experimental Variography</code>:     example demonstrating a diversity of fields through a real geological use case.</li> <li> <p><code>DeepLearning</code>: example     demonstrating some advanced capabilities such as:</p> <pre><code>- multiple steps/flows: (1) train a neural net (2) predict.\n- conditional input: a number field dynamically controls the number of neural network layer\nparameters to input through the `count` parameter.\n- creating a custom `InputElement` as part of the `onecode_ext` modules.\n</code></pre> </li> </ul>"},{"location":"#onecode-for-developers","title":"OneCode for Developers","text":""},{"location":"#installation_2","title":"Installation","text":"<p>Hosted with  by PyPI, simply install with <code>pip</code>: <pre><code>pip install onecode[developer]\n\n# optionally if you would like to build the documentation locally\npip install onecode[docs]\n</code></pre></p> <p>Checkout the tech-savvy part to get started coding OneCode projects.</p>"},{"location":"#extending-onecode","title":"Extending OneCode","text":"<p>There are 2 ways to extend OneCode:</p> <ul> <li>within a Project, using the <code>onecode_ext</code> mechanism. It allows to contain the customization specific to a Project. For instance the <code>DeepLearning</code> example, has an element specific to Neural Network definition by combining sliders and dropdown menus to allow experts to easily choose the Neural Network Dense Layers parameters.</li> <li>as a library:<ul> <li>add new input/output elements that would be useful for many projects.</li> <li>add new modes to interpret elements in a different ways, e.g. output your custom input parameters format that your cloud platform can ingest, generate code for Panel or Dash, etc.</li> </ul> </li> </ul> <p>In any case, see Extending OneCode for details on how to do that.</p>"},{"location":"#run-onecode-self-tests","title":"Run OneCode self-tests","text":"<p>There are several types of tests:</p> <ul> <li>unit-tests: check the result validity of elementary operations.</li> <li>regressions: ensure the result of a function does not change through time, regardless of the validity of the result.</li> <li>emulations: check result validity by emulating command line execution (e.g. <code>python main.py</code>). These tests are made for Linux only.</li> </ul> <pre><code># note: for all these commands, you may add '-n auto' to parallelize tests execution.\n\n# run unit and regressions tests\npython -m pytest tests\n\n# run unit and regressions tests in parallel with Pydantic runtime type-checking\nONECODE_DO_TYPECHECK=1 python -m pytest tests -n auto\n\n# run unit, regressions and emulation tests (Linux only)\npython -m pytest tests --with-emulations\n\n# run tests with coverage: this one is not compatible with the optional '-n auto'\ncoverage run -m pytest tests\n\n# display the coverage report: note that it will not reach 100% because of some occasional\n# platform-specific block code. Our CI runs the coverage on both Linux and Windows platforms,\n# the reported coverage by our badge on top this page comes from these merged reports.\ncoverage report -m --omit=\"tests/*,*/**/__init__.py\"\n</code></pre>"},{"location":"#contributing-to-onecode","title":"Contributing to OneCode","text":"<p>OneCode is still in its early stages, so it is not opened to external contributions yet. We would prefer to get feedback through GitHub issues and see how OneCode is used and adopted first. CI guidelines, coding standards and best practices will be provided once the repository is opened to contributions.</p>"},{"location":"#faq","title":"FAQ","text":"<p>Is the utilization of Streamlit going away?</p> <p>In a nutshell, yes. Streamlit is a great tool but has its own limitations and no longer fulfill our use case. Using Streamlit was always temporary and to get started really quickly but keeping Community plugins compatible together with rapid changes of the Streamlit API is not where we see valuable time spent (as a matter of fact, we had to stick to version &lt; 1.18 whereas Streamlit is at 1.31 at the time of writing this doc). Note that this change will take place in OneCode <code>1.x</code> and a compatible <code>onecode-streamlit</code> library will be available as open-source under MIT License.</p> <p>Why do I need OneCode at all, I could just build my application with Streamlit?</p> <p>That's absolutely true, Streamlit or other alternatives are perfectly suitable for that. However beware of the limitations you can hit (file size handling, data caching, server overload, etc.). There are scenarios that can work out without OneCode and that's definitely ok: pick the right tool for your use case. When it comes to deploying your application for different purposes (batch, interactive, long process, large file processing, etc.) or in different environments, you may find handy to not have to adapt your original code: it will definitely save you time and frustration and let you focus on the gist of the work rather than the deployment work.</p> <p>You talked about extending OneCode, what does it mean? How do I do that?</p> <p>If you would like to add new elements or customize some elements' behavior, check out the developer section</p> <p>Are there any collaborative platform that run OneCode projects?</p> <p>There is one in the works called at onecode.rocks, centralizing data and OneCode projects. Sign up there if you would like be part of the beta-testers cohort.</p>"},{"location":"#credits","title":"Credits","text":"<p>Credits to all open-source libraries that helped build this project. Special thanks to:</p> <ul> <li>Streamlit and its contributors for making such a great tool that was very helpful to get started.</li> <li>PyCG and its contributors for making the Call Graph algos essential to the OneCode mechanism.</li> <li>Geode Solutions and Spotlight Earth for testing extensively the library and providing invaluable feedback.</li> </ul>"},{"location":"extending_onecode/","title":"Extending OneCode","text":""},{"location":"extending_onecode/#onecode-principle-overview","title":"OneCode principle overview","text":""},{"location":"extending_onecode/#extend-with-new-elements-inside-a-onecode-project","title":"Extend with new elements inside a OneCode Project","text":"<p>Each OneCode Project contains by default a folder <code>onecode_ext</code> inside its <code>flows</code> folder. The mechanism is already in place so that you can simply add your new elements and they will be automatically registered as OneCode elements. Input and output elements respectively go to <code>flows/onecode_ext/input_elements/</code> and <code>flows/onecode_ext/output_elements</code>folders. You only need to follow these 2 instructions:</p> <ol> <li> <p>The Python filename must be snake case and the corresponding element class name must be Pascal     case. For instance, <code>my_new_element.py</code> =&gt; <code>class MyNewElement</code>.</p> </li> <li> <p>Re-implement the <code>abstractmethod</code> defined in the <code>InputElement</code> or <code>OutputElement</code> base class     according its documentation.</p> </li> </ol> <p>Here is a simple example: <pre><code># flows/onecode_ext/input_elements/my_header_element.py\nfrom onecode import InputElement\n\n\nclass MyHeaderElement(InputElement):\n    def __init__(\n        self,\n        key: str,\n        value: str\n    ):\n        super().__init__(key, value)\n\n    @property\n    def _value_type(self) -&gt; type:\n        return str\n\n    def streamlit(\n        self,\n        id: str\n    ) -&gt; str:\n        return f\"\"\"\n{self.key} = st.header('''{self.value}''')\n\"\"\"\n\n    def _validate(\n        self,\n        value: str\n    ) -&gt; None:\n        pass\n</code></pre></p> <p>Then call it in your flow code: <pre><code># flows/my_flow.py\nfrom onecode_ext import my_header_element\n\n\ndef run():\n    x = my_header_element('x', 'My Header!'))\n    # ...\n</code></pre></p> <p>As easy as that. If you're interested on how it works under the hood, check out the section below.</p> <p>Tip</p> <p>For a real use-case example, look at the <code>DeepLearning</code> project</p>"},{"location":"extending_onecode/#extend-as-a-library","title":"Extend as a library","text":"<p>For use-cases going beyond the scope of a single OneCode Project, you may consider writing your own library. For example, you could have specific elements used across many projects and/or dedicated mode to be compatible with your internal tools such as a cloud platform.</p> <p>To add new elements, you will manually code what <code>onecode_ext</code> does automatically for you:</p> <ul> <li> <p>Set a separate folder for your input and output elements, then add the following code to its <code>__init__</code> files: <pre><code># input elements\nfrom onecode import import_input\n\nimport_input(__file__, __name__)\n</code></pre> <pre><code># output elements\nfrom onecode import import_output\n\nimport_output(__file__, __name__)\n</code></pre> Refer to Registering input elements and Registering output elements for more information.</p> </li> <li> <p>For any new element:</p> <ol> <li> <p>The Python filename must be snake case and the corresponding element class name must be Pascal case. For instance, <code>my_new_element.py</code> =&gt; <code>class MyNewElement</code>.</p> </li> <li> <p>Re-implement the <code>abstractmethod</code> defined in the <code>InputElement</code> or <code>OutputElement</code> base class     according its documentation.</p> </li> </ol> </li> </ul> <p>From there, to ensure your module is taken into account by CLI commands, add <code>--module yourcode</code> to them: <pre><code># Start with streamlit\nonecode-start --module &lt;library_name&gt;\n\n# JSON parameter extraction\nonecode-extract params.json --module &lt;library_name&gt;\n</code></pre></p> <p>You may also:</p> <ul> <li>add new <code>Mode</code>: define a mixin class and inherit all elements with the mixin</li> <li>add new CLI: you may use the CLI Utilities or even start from the OneCode     CLI original code as it is open source with MIT License.</li> </ul> <p>Example</p> <p>Here is an example of library called <code>yourcode</code> extending OneCode and demonstrating:</p> <ul> <li>a new CLI extracting parameters as TOML</li> <li>a radio button widget accepting runtime [Expressionstips_and_tricks#using-runtime-expressions-in-elements)</li> </ul>"},{"location":"extending_onecode/#registering-input-elements","title":"Registering input elements","text":"<p><pre><code>def import_input(\n    init_file: str,\n    module_name: str\n) -&gt; None:\n</code></pre> </p> <p>Use this function to register your <code>InputElement</code>. Here is what it does for you in details.</p> <p>For each file located in the same folder as the <code>init_file</code> path:</p> <ol> <li>import the corresponding class: the class name must be the Pascal-case of the filename     (e.g. <code>file_input.py</code> =&gt; <code>class FileInput</code>)</li> <li>register the class as an element, i-e it will be recognized by the OneCode interpreter</li> <li>export the class as-is (allow for subclassing by a third-party)</li> <li> <p>export a new function matching the filename: it wrapps around the class for convenience     by simply initializing it, then calling it.</p> <p>Example</p> <pre><code>def file_input(*args, **kwargs):\n    return FileInput(*args, **kwargs)()\n\n# This makes a convenient usage in the client code:\nx = onecode.file_input('test', 'file.txt')\n\n# Rather than writing:\nx = onecode.FileInput('test', 'file.txt')()\n</code></pre> </li> <li> <p>export:</p> <ol> <li>a new variable specifying the type of element being <code>INPUT</code>.</li> <li>a new function returning the element import statements.</li> <li>a new function returning the element init statements.</li> </ol> <p>Example</p> <pre><code>file_input_type = ElementType.INPUT\n\ndef _file_input_importdef():\n    return FileInput.imports()\nfile_input_imports = _file_input_importdef\n\ndef _file_input_initdef():\n    return FileInput.init()\nfile_input_init = _file_input_initdef\n</code></pre> <p>This is used internally by OneCode interpreter.</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>init_file</code> <code>str</code> <p>path to the init.py file located in the same directory as the input elements.</p> required <code>module_name</code> <code>str</code> <p>Python name of the module to import the elements under. The module will then be available for importing using regular Python import statements.</p> required"},{"location":"extending_onecode/#registering-output-elements","title":"Registering output elements","text":"<p><pre><code>def import_output(\n    init_file: str,\n    module_name: str\n) -&gt; None:\n</code></pre> </p> <p>Use this function to register your <code>OutputElement</code>. Here is what it does for you in details.</p> <p>For each file located in the same folder as the <code>init_file</code> path:</p> <ol> <li>import the corresponding class: the class name must be the Pascal-case of the filename     (e.g. <code>file_output.py</code> =&gt; <code>class FileOutput</code>)</li> <li>register the class as an element, i-e it will be recognized by the OneCode interpreter</li> <li>export the class as-is (allow for subclassing by a third-party)</li> <li> <p>export a new function matching the filename: it wrapps around the class for convenience     by simply initializing it, then calling it. There is one important difference     with <code>InputElement</code>: a mechanism is in place to allow calling the     <code>OutputElement.static_call()</code> method when no     argument are provided to the function. It is typically used internally by the OneCode     interpreter to properly handle cases of dynamically defined parameters.</p> <p>Example</p> <pre><code>def file_output(*args, **kwargs):\n    empty_ctor = not args and not kwargs\n    return FileOutput.static_call(FileOutput) if empty_ctor                     else FileOutput(*args, **kwargs)()\n\n# This makes a convenient usage in the client code:\nx = onecode.file_output('test', 'file.txt')\n\n# Or for dynamically defined parameters:\nx = onecode.file_output('test', os.path.join(os.getcwd(), f'file_{my_var},txt')\n\n# Rather than writing:\nx = onecode.FileOutput('test', 'file.txt')()\n</code></pre> </li> <li> <p>export:</p> <ol> <li>a new variable specifying the type of element being <code>OUTPUT</code>.</li> <li>a new function returning the element import statements.</li> <li>a new function returning the element init statements.</li> </ol> <p>Example</p> <pre><code>file_output_type = ElementType.OUTPUT\n\ndef _file_output_importdef():\n    return FileInput.imports()\nfile_output_imports = _file_output_importdef\n\ndef _file_output_initdef():\n    return FileInput.init()\nfile_output_init = _file_output_initdef\n</code></pre> <p>This is used internally by OneCode interpreter</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>init_file</code> <code>str</code> <p>path to the init.py file located in the same directory as the input elements.</p> required <code>module_name</code> <code>str</code> <p>Python name of the module to import the elements under. The module will then be available for importing using regular Python import statements.</p> required"},{"location":"tips_and_tricks/","title":"Tips and Tricks","text":""},{"location":"tips_and_tricks/#best-practices-with-data","title":"Best practices with data","text":"<p>It is strongly advised to setup your input/output data files hierarchy relative to a root folder, so that when you deploy your application, experts can simply specify a different root data path and things will work out great. For instance: <pre><code>import os\nfrom onecode import file_input, Project, Mode\n\nproject = Project()\nproject.mode = Mode.EXECUTE\n\nfile =  os.path.join('region', 'model.h5')\nx = file_input('x', file)\n</code></pre> will automatically append the path <code>region/model.h5</code> to your Project data path. <pre><code>print(f'Are path equals? {x == os.path.join(project.data_root, file)}')\n</code></pre></p> Output<pre><code>Are path equals? True\n</code></pre> <p>From there, any experts can have a data folder with the same hierarchy anywhere on their disk and launch the script by simply changing the data path at runtime: <pre><code>ONECODE_PROJECT_DATA=/path/to/my/data python main.py\n</code></pre> Without changing the code, the OneCode project can execute properly on different machines.</p> <p>On the other hand, as soon as you specify an absolute path for your input files, the Project data path is ignored. There could be some special cases for doing that, but most of the time you should use relative paths.</p> <p>Note</p> <p>Input elements such as <code>csv_reader</code> and <code>file_input</code> make the path relative to <code>Project().data_root</code>.</p> <p>Output elements such as <code>csv_output</code>, <code>file_output</code>, <code>image_output</code> and <code>text_output</code> make the path relative to <code>{Project().data_root}/{Project.current_flow}/outputs</code>.</p> <p>Tip</p> <p>How is the Project data path determined? The data path is initialized according to the following rules ordered by priority:</p> <ol> <li>to <code>ONECODE_PROJECT_DATA</code> if provided in the Environment variables</li> <li>to the <code>data</code> folder located in the same directory from where the project is run if existing (typically the OneCode project data folder)</li> <li>to the current working directory for all other cases</li> </ol>"},{"location":"tips_and_tricks/#using-runtime-expressions-in-elements","title":"Using runtime Expressions in elements","text":"<p>For Streamlit mode, some input element parameters can be dynamic, like for instance, changing the number of <code>file_input</code> widget based on a <code>slider</code> value that is changed on the fly by an expert.</p> <p>All input elements can accept runtime expressions regarding the <code>count</code> and <code>optional</code> parameters. Expressions are in Python and may refer to defined elements values by wrapping around their <code>key</code> a <code>$</code> sign. For instance, getting one more <code>checkbox</code> instances than an input number: <pre><code>x = number_input('x', 1, min=0)\ny = checkbox('y', [False, False], count='$x$ + 1')\n</code></pre></p> <p>Or disabling a <code>file_input</code> if the value of a <code>slider</code> is greater than <code>0.5</code>: <pre><code>x = slider('x', 0.4)\ny = file_input('y', None, optional='$x$ &gt; 0.5')\n</code></pre></p> <p>Some elements may have specific parameters that can accept expressions, like <code>dropdown</code>. For instance a <code>dropdown</code> can propose a selection from the columns of a selected CSV file: <pre><code>df = csv_reader(\"csv\", \"/path/to/file.csv\")\n\nwidget = dropdown(\n    key=\"Dynamic Dropdown\",\n    value=None,\n    options='$csv$.columns',\n    optional=True\n)\n</code></pre></p> <p>For a real use-case example, look at the <code>DeepLearning</code> project:</p> <ul> <li>the columns in the dropdown menu are read from the CSV input file</li> <li>the number of neural net dense layers adjust based on a number input field.</li> </ul> <p></p>"},{"location":"changelogs/0.1.0/","title":"0.1.0","text":"<p>Initial release, checkout the documentation</p> <p>Elements featured: * checkbox * csv_reader * dropdown * file_input * number_input * radio_button * slider * text_input * csv_output * file_output * image_output * text_output</p> <p>CLI featured: * <code>onecode-create</code> * <code>onecode-add</code> * <code>onecode-extract</code> * <code>onecode-start</code></p>"},{"location":"changelogs/0.2.0/","title":"0.2.0","text":""},{"location":"changelogs/0.2.0/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description 9 Correct <code>gatherUsageStats</code> env variable <code>onecode-start</code> used wrong variable name to prevent sending stats. [No ref] <code>kind</code> is now a property of the <code>InputElement</code> and <code>OutputElement</code> <code>kind</code> would have potentially been overwritten while extracting element through <code>onecode-extract</code>."},{"location":"changelogs/0.2.0/#enhancements","title":"Enhancements","text":"Issue Ref  Summary  Description 5 Improving DeepLearning example Allow initialization of <code>NeuralNetInput</code> custom element with different layer specs. 10 Allow for custom import and init statements in InputElement and OutputElement Streamlit <code>app.py</code> generated through <code>onecode-start</code> now has placeholders for import and init statements. See <code>imports()</code> and <code>init()</code> static methods in <code>InputElement</code> and <code>OutputElement</code>. [No ref] Allow meta-data for elements Meta-data can now be attached to any Input/Output element through <code>**kwargs</code>. [No ref] Namespace logging Logger (info, warning, critical and debug) now uses a namespace <code>|OneCode|</code> rather than the root logging."},{"location":"changelogs/0.2.0/#new-features","title":"New Features","text":"Issue Ref  Summary  Description 1 New input element <code>FolderInput</code> <code>FolderInput</code> allows folder selection. <code>LASConverter</code> example showcases it. 2 New output element <code>PlotlyOutput</code> <code>PlotlyOutput</code> allows to visualize Plotly charts. <code>ExperimentalVariography</code> example showcases it. [No ref] Setup Project configuration through environment variables Allow additional way to setup Project configuration options from command line."},{"location":"changelogs/0.2.0/#breaking-changes","title":"Breaking changes","text":"<ul> <li> <p>10 introduces a potential breaking change if you have custom <code>InputElement</code> or <code>OutputElement</code> where the <code>streamlit()</code> method relies on one of these statements being present in <code>app.py</code>: <pre><code>import tkinter as tk\nfrom tkinter import filedialog\nimport numpy as np\nfrom pyarrow import csv as pacsv\n_root = tk.Tk()\n</code></pre> If this is the case, simply inherit <code>import()</code> and/or <code>init()</code> static methods so that they return the relevant statements. See <code>FileInput.imports()</code> and <code>FileInput.init()</code> as examples.</p> </li> <li> <p>Custom <code>InputElement</code> or <code>OutputElement</code> can no longer initialized with an argument named <code>kind</code>: it now is a reserved attribute. This change was triggered by a bug fix as <code>kind</code> was potentially overwritten when extracting element through <code>onecode-extract</code>. Upgrade your custom element by changing your argument name.</p> </li> </ul>"},{"location":"changelogs/0.2.1/","title":"0.2.1","text":""},{"location":"changelogs/0.2.1/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description 21 [Bug]: Streamlit error message 'setIn' cannot be called on an ElementNode when re-running application Log stream handlers were accumulated in root logging namespace at each run as Streamlit kept the Logger instance active."},{"location":"changelogs/0.3.0/","title":"0.3.0","text":""},{"location":"changelogs/0.3.0/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description [No ref] Fix missing typing CLI function <code>get_import_statements()</code> was missing return type. [No ref] Fixing links in documentation Fixed wrong reference for some documentation internal hyperlinks. [No ref] Fix <code>PlotlyOutput</code> missing import <code>import plotly</code> was missing from the <code>imports()</code> statements in <code>PlotlyOutput</code>."},{"location":"changelogs/0.3.0/#enhancements","title":"Enhancements","text":"Issue Ref  Summary  Description [No ref] Update onecode-pycg version Allow versions greater than 0.0.7. [No ref] [CLI] add option to only generate the Streamlit app file without starting the server Use <code>onecode-start --dump</code> to generate app.py: useful to avoid restarting the Streamlit server every time. [No ref] [CLI] add verbosity option when processing files Use <code>--verbose</code> option on <code>onecode-start</code> or <code>onecode-extract</code> to print information about functions being processed."},{"location":"changelogs/0.3.0/#new-features","title":"New Features","text":"Issue Ref  Summary  Description"},{"location":"changelogs/0.3.0/#breaking-changes","title":"Breaking changes","text":"<p>None</p>"},{"location":"changelogs/0.4.0/","title":"0.4.0","text":""},{"location":"changelogs/0.4.0/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description [No ref] Changes in traceback API in Python 3.10 was not properly handling exceptions in Streamlit Using parameter position rather than name to allow backward compatibility with previous python versions."},{"location":"changelogs/0.4.0/#enhancements","title":"Enhancements","text":"Issue Ref  Summary  Description [No ref] Doc enhancements Add more examples and info to documentation of output elements. [No ref] Rebranding Update logo, main color and pictures."},{"location":"changelogs/0.4.0/#new-features","title":"New Features","text":"Issue Ref  Summary  Description [No ref] Adding new output element VRML file Visualize 3D scene with PyVista through VRML output. [No ref] Adding new output element MP4 file Visualize video through an embedded video player. [No ref] Adding new input element for Section Header Display a section header. [No ref] Adding new output element HTML file Open HTML file through hyperlink in a new tab."},{"location":"changelogs/0.4.0/#breaking-changes","title":"Breaking changes","text":"<p>None</p>"},{"location":"changelogs/0.5.0/","title":"0.5.0","text":""},{"location":"changelogs/0.5.0/#bug-fixes","title":"Bug Fixes","text":"Issue Ref  Summary  Description"},{"location":"changelogs/0.5.0/#enhancements","title":"Enhancements","text":"Issue Ref  Summary  Description"},{"location":"changelogs/0.5.0/#new-features","title":"New Features","text":"Issue Ref  Summary  Description"},{"location":"reference/base/enums/","title":"Enumerations","text":"<p>How to use Enums</p> <p>Enums can be used in functions as Python object (int, float or strings) or as OneCode attribute.</p> <p>For example <pre><code>from oncode import file_input, FileFilter\n\nwidget = file_input(\n    key=\"FileInput\",\n    value=\"/path/to/file1.txt\",\n    types=[FileFilter.IMAGE]\n)\n</code></pre></p> <p>is equivalent to <pre><code>from oncode import file_input, FileFilter\n\nwidget = file_input(\n    key=\"FileInput\",\n    value=\"/path/to/file1.txt\",\n    types=[(\"Image\", \".jpg .png .jpeg\")]\n)\n</code></pre></p>"},{"location":"reference/base/enums/#onecode.base.enums.ConfigOption","title":"<code>ConfigOption</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Available options to control the configuration of the project.</p> <ul> <li><code>FLUSH_STDOUT</code>: to force flushing the logger  <code>\"FLUSH_STDOUT\": False</code></li> <li><code>LOGGER_COLOR</code>: to color the logs by default when resetting the logger      <code>\"LOGGER_COLOR\": True</code></li> <li><code>LOGGER_TIMESTAMP</code>: to timestamp the logs  <code>\"LOGGER_TIMESTAMP\": True</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.ElementType","title":"<code>ElementType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Available element type variables. These element types are typically used by specific modes (e.g. <code>EXTRACT</code>, <code>EXTRACT_ALL</code> and <code>STREAMLIT</code> modes).</p> <ul> <li><code>INPUT</code>: <code>InputElement</code> type  <code>\"INPUT\"</code></li> <li><code>OUTPUT</code>: <code>OutputElement</code> Type  <code>\"OUTPUT\"</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.Env","title":"<code>Env</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Available environment variables for OneCode projects:</p> <ul> <li><code>ONECODE_PROJECT_DATA</code>: use this variable to overwrite default data location  <code>\"ONECODE_PROJECT_DATA\"</code></li> <li><code>ONECODE_CONFIG_FILE</code>: name of the file containing OneCode project configurations  <code>\".onecode.json\"</code></li> <li><code>ONECODE_DO_TYPECHECK</code>: set to 1 to force runtime type-checking with Pydantic  <code>\"ONECODE_DO_TYPECHECK\"</code></li> <li><code>ONECODE_LOGGER_NAME</code>: base logger name to avoid logging conflict with other loggers  <code>|OneCode|</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.FileFilter","title":"<code>FileFilter</code>","text":"<p>             Bases: <code>tuple</code></p> <p>Available file filters, typically used by FileInput Element in STREAMLIT mode. It allows to filter file selection within the Open File Dialog. File filters are a Tuple made of 2 parts: <code>(name of the filter, file extensions separated by whitespaces)</code>.</p> <ul> <li><code>CSV</code> <code>(\"CSV\", \".csv\")</code></li> <li><code>PYTHON</code> <code>(\"Python\", \".py\")</code></li> <li><code>IMAGE</code> <code>(\"Image\", \".jpg .png .jpeg\")</code></li> <li><code>ZIP</code> <code>(\"ZIP\", \".zip .gz .tar.gz .7z\")</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.Keyword","title":"<code>Keyword</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Reserved keywords for the Streamlit app.</p> <ul> <li><code>DATA</code>: Streamlit variable holding the data  <code>\"_DATA_\"</code></li> </ul>"},{"location":"reference/base/enums/#onecode.base.enums.Mode","title":"<code>Mode</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Available modes to run OneCode projects:</p> <ul> <li><code>CONSOLE</code>: return the initial element class. Typically used in the interactive Python console.     It is the default <code>Project()</code> mode.  <code>\"_console\"</code></li> <li><code>EXECUTE</code>: run the project with the default provided values. Typically used for running the     Python scripts from the command line: <code>python main.py</code> <code>\"_execute\"</code></li> <li><code>LOAD_THEN_EXECUTE</code>: read parameters previously loaded in <code>Project().data</code>. Typically used for     running the Python scripts from the command line: <code>python main.py params.json</code> <code>\"_load_then_execute\"</code></li> <li><code>EXTRACT</code>: extract parameters and their default value to JSON. It may be used either through     regular Python scripts or the CLI.  <code>\"_extract\"</code></li> <li><code>EXTRACT_ALL</code>: extract parameters, their default value and all their attributes     (kind, name, etc.) to JSON. It may be used either through regular Python scripts or the CLI.      <code>\"_extract_all\"</code></li> <li><code>STREAMLIT</code>: generate the Streamlit app code and run it. Typically used through the     <code>onecode-start</code> CLI.  <code>\"_build_streamlit\"</code></li> </ul> <p>These modes correspond to the function names of the Input/Output Element objects (e.g. <code>InputElement._execute()</code>). Therefore you can easily extend Input/Output Element with new modes by simply implement new methods in a derived class and set the mode to it.</p> <p>Example</p> <pre><code>from onecode import InputElement, process_call_graph, Project\n\n\nclass MyElement(InputElement):\n    # ... inherit InputElement methods as needed\n\n    def _my_new_mode(self):\n        # implement the gist of your new mode here\n        # ...\n\n\ndef do_my_new_mode(onecode_project_path: str):\n    Project().mode = '_my_new_mode'\n    result = process_call_graph(onecode_project_path)\n\n    # do something with result\n    # ...\n</code></pre>"},{"location":"reference/base/logger/","title":"Logger","text":""},{"location":"reference/base/logger/#onecode.base.logger.ColoredFormatter","title":"<code>ColoredFormatter</code>","text":"<p>             Bases: <code>Formatter</code></p> <p>Logger class formatting messages in a specific way with colors interpretable by the terminal/console according to the log level:</p> <ul> <li><code>DEBUG</code> and <code>INFO</code>: grey</li> <li><code>WARNING</code>: yellow</li> <li><code>ERROR</code>: red</li> <li><code>CRITICAL</code>: bold red</li> </ul> <p>Message is formatted like this: <pre><code>timestamp [log_level] current_flow_name - filename:LOC - actual_message\n</code></pre></p>"},{"location":"reference/base/logger/#onecode.base.logger.ColoredFormatter.format","title":"<code>format(record)</code>","text":"<p>Format the given record</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>Record passing through the formatter. See Python logging for more info.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The formatted text.</p>"},{"location":"reference/base/logger/#onecode.base.logger.Logger","title":"<code>Logger</code>","text":"<p>Single Logger object to handle Python logging within OneCode projects. The default logging level is INFO. See <code>set_level()</code> to change it. Use the static methods <code>debug()</code>, <code>info()</code>, <code>warning()</code>, <code>error()</code>, and <code>critical()</code> to conveniently log your messages with the corresponding logging level.</p> <p>By default, the ColoredFormatter is used. You may add other logging handlers using <code>add_handler()</code>, for instance to redirect logs to a file.</p> <p>Example</p> <pre><code>import logging\nfrom onecode import Logger\n\nLogger().set_level(logging.DEBUG)\n\nLogger.debug(\"debug\")\nLogger.info(\"info\")\nLogger.warning(\"warning\")\nLogger.error(\"error\")\nLogger.critical(\"critical\")\n</code></pre>"},{"location":"reference/base/logger/#onecode.base.logger.Logger._flush","title":"<code>_flush()</code>  <code>staticmethod</code>","text":"<p>Force flush to stdout if <code>ConfigOption.FLUSH_STDOUT</code> is True. See     Project.config for more information.</p>"},{"location":"reference/base/logger/#onecode.base.logger.Logger.add_handler","title":"<code>add_handler(handler=None, root_logger=True)</code>","text":"<p>Add an extra handler in addition to the default console stream one. Nothing is done if handler is None.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Optional[Handler]</code> <p>New handler to add.</p> <code>None</code> <code>root_logger</code> <code>bool</code> <p>If True, add the handler at the root logging, otherwise as a child of the <code>|OneCode|</code> logger.</p> <code>True</code> <p>Example</p> <pre><code>import logging\n\nfrom onecode import Logger\n\n\nhandler = logging.FileHandler(\"debug.log\")\nLogger().add_handler(handler)\nLogger.error('oops!')   # will print to console in red and to file \"debug.log\"\n</code></pre>"},{"location":"reference/base/logger/#onecode.base.logger.Logger.critical","title":"<code>critical(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log a critical message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Message to log.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.debug","title":"<code>debug(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log a debug message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Message to log.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.error","title":"<code>error(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log an error message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Message to log.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.info","title":"<code>info(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log an info message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Message to log.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.logger","title":"<code>logger(stacklevel=1)</code>","text":"<p>Get the Python Logger object corresponding to the given stack level. Preferentially use convenience methods <code>debug()</code>, <code>info()</code>, <code>warning()</code>, <code>error()</code>, and <code>critical()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>stacklevel</code> <code>int</code> <p>Number of hops back in the function call stack to tie the logger to. By default, it is the last function calling this logger() method.</p> <code>1</code> <p>Returns:</p> Type Description <code>Logger</code> <p>Python Logger object.</p>"},{"location":"reference/base/logger/#onecode.base.logger.Logger.reset","title":"<code>reset(root_logger=True)</code>","text":"<p>Remove all added handlers attached to the OneCode logger and optionally the root logger if specified (see <code>logging.removeHandler()</code> for more info). OneCode logger is then reset to the default console stream handler with the ColoredFormatter with <code>INFO</code> level.</p> <p>Parameters:</p> Name Type Description Default <code>root_logger</code> <code>bool</code> <p>If True, remove the handlers from the root logger too, in addition to removing the handlers from OneCode logger.</p> <code>True</code>"},{"location":"reference/base/logger/#onecode.base.logger.Logger.set_level","title":"<code>set_level(level)</code>","text":"<p>Set the OneCode logger level. Default logging is INFO.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Numerical value to set the logging level to. See logging levels for more information.</p> required"},{"location":"reference/base/logger/#onecode.base.logger.Logger.warning","title":"<code>warning(msg)</code>  <code>staticmethod</code>","text":"<p>Convenience function to log a warning message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Message to log.</p> required"},{"location":"reference/base/project/","title":"Project","text":"<p>Single Project object to centralize OneCode project data, such as the data path, parameter values, registered elements, flow currently running, current running mode, etc.</p> <p>See <code>reset()</code> for Project default's initialization.</p> <p>Attributes:</p> Name Type Description <code>registered_elements</code> <code>Set[str]</code> <p>List of elements registered for processing.</p> <code>mode</code> <code>Union[Mode, str]</code> <p>Control how elements are processed.</p> <code>current_flow</code> <code>Optional[str]</code> <p>ID of the flow currently running.</p> <code>data_root</code> <code>str</code> <p>Path to the data folder.</p> <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionnary containing the data values from interpreted elements.</p> <code>config</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionnary containing the project configuration.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.config","title":"<code>config: Optional[Dict[str, Any]]</code>  <code>property</code>","text":"<p>Get the Project current configuration options.</p> <p>Config is simply a key-value dictionnary.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.current_flow","title":"<code>current_flow: Optional[str]</code>  <code>property</code> <code>writable</code>","text":"<p>Get the currently running flow. If no flow is running, None is returned. It is automatically set when OneCode project is run through the main entry point of from streamlit (i-e <code>python main.py</code> or <code>onecode-start</code>)</p>"},{"location":"reference/base/project/#onecode.base.project.Project.data","title":"<code>data: Optional[Dict[str, Any]]</code>  <code>property</code> <code>writable</code>","text":"<p>Get the Project current data. Data is typically set either at the start when running in mode <code>LOAD_THEN_EXECUTE</code> or incrementaly after each call to any input element.</p> <p>Data is simply a key-value dictionnary.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.data_root","title":"<code>data_root: str</code>  <code>property</code>","text":"<p>Get the path to the root of the data folder. See <code>reset()</code> to know how the data path is initialized.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.mode","title":"<code>mode: Union[Mode, str]</code>  <code>property</code> <code>writable</code>","text":"<p>Get the currently set mode for the OneCode Project. A string is returned in case of custom modes. See Mode and Extending OneCode for more information.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.registered_elements","title":"<code>registered_elements: Set[str]</code>  <code>property</code>","text":"<p>Get the list of registered elements (<code>InputElement</code> and <code>OutputElement</code>). Once a library is registered, it is required to register the elements that need to be processed.</p> <p>By default, it returns all Input/Output Elements of <code>onecode</code> library.</p> <p>See Extending OneCode for more information.</p>"},{"location":"reference/base/project/#onecode.base.project.Project._set_data_root","title":"<code>_set_data_root(data_path)</code>","text":"<p>Protected method to set the data root path. It is unsafe to use this method and change the data path while running the OneCode project.</p> <p>Parameters:</p> Name Type Description Default <code>data_path</code> <code>str</code> <p>Path to the data root.</p> required <p>Raises:</p> Type Description <code>NotADirectoryError</code> <p>if the data path does not exist or is not a directory.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.add_data","title":"<code>add_data(key, value)</code>","text":"<p>Add a key-value pair to the data dictionnary.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Unique key to set the attach the value to.</p> required <code>value</code> <code>Any</code> <p>Value corresponding to the given key.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the key is empty or None.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.get_config","title":"<code>get_config(key)</code>","text":"<p>Get the value corresponding to the key config.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Union[ConfigOption, str]</code> <p>Unique key to get the value from.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the key does not exists.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.get_input_path","title":"<code>get_input_path(filepath)</code>","text":"<p>Get the constructed input path for the given file path. If the file path is absolute or null, the path is left unchanged, otherwise the path is considered relative to the data root path.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>filename of file path to construct the input path from.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The constructed input path to the file.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.get_output_manifest","title":"<code>get_output_manifest()</code>","text":"<p>Get the path to the current flow manifest file, typically <code>&lt;data_root&gt;/outputs/&lt;flow&gt;/MANIFEST.txt</code>. If the path does not exist, it is automatically created.</p> <p>The manifest file is a collection of output data attributes: there would typically be one entry per output file, each entry containing attributes information. Each line is a JSON entry but the entire file is not a JSON.</p> <p>Example</p> <pre><code>{\"key\": \"x\", \"value\": \"file1.csv\", \"kind\": \"CsvOutput\", \"tags\": [\"CSV\"] }\n{\"key\": \"y\", \"value\": \"file2.txt\", \"kind\": \"TextOutput\", \"tags\": [\"TXT\"] }\n...\n</code></pre> <p>Returns:</p> Type Description <code>str</code> <p>Path to the output MANIFEST.txt file for the currently running flow.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.get_output_path","title":"<code>get_output_path(filepath)</code>","text":"<p>Get the constructed output path for the given file path. If the file path is absolute or null, the path is left unchanged, otherwise the path is considered relative to the data output path (typically <code>&lt;data_root&gt;/outputs/</code>).</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>filename of file path to construct the output path from.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The constructed output path to the file.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.register_element","title":"<code>register_element(element_name)</code>","text":"<p>Register the given element as part of the elements to be processed. The element must be of the form '.', e.g. <code>onecode_ext.MyInput</code> <p>See Extending OneCode for more information.</p> <p>Parameters:</p> Name Type Description Default <code>element_name</code> <code>str</code> <p>Python name of the element (i-e class name).</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if element is not of the form '.' of if the class name is already snake case."},{"location":"reference/base/project/#onecode.base.project.Project.reset","title":"<code>reset()</code>","text":"<p>Reset the project to its default values: - the data path is initialized in priority to <code>ONECODE_PROJECT_DATA</code> if provided in the Environment variables, otherwise to the <code>data</code> folder located in the same directory from where the project is run if existing (typically the OneCode project data folder), otherwise to the current working directory. - mode is <code>Mode.CONSOLE</code>. - currently running flow and data are None. - registered elements default to the OneCode ones.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.set_config","title":"<code>set_config(key, value)</code>","text":"<p>Add a key-value pair to the config dictionnary.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Union[ConfigOption, str]</code> <p>Unique key to set the attach the value to.</p> required <code>value</code> <code>Any</code> <p>Value corresponding to the given key.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the key is empty or None.</p>"},{"location":"reference/base/project/#onecode.base.project.Project.write_output","title":"<code>write_output(output)</code>","text":"<p>Write data to the output manifest file corresponding to the currently running flow. This function is thread and process-safe, i-e if there is concurrent writing to the manifest file (e.g. parallelization through multiprocessing), writing will be queued so that there is no overwrite or other side-effect. The file will therefore be valid and without data loss.</p> <p>Although typically this function is automatically called during the OutputElement execution, it is possible to manully call it too to output custom data.</p> <p>Parameters:</p> Name Type Description Default <code>output</code> <code>Dict</code> <p>Output data to write to the manifest file.</p> required"},{"location":"reference/cli/add/","title":"Add a flow to a project","text":""},{"location":"reference/cli/add/#onecode.cli.add.add","title":"<code>add(project_path, name, before=None, cli=True)</code>","text":"<p>Add a new flow to the given OneCode project.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>str</code> <p>Path to the root of the existing OneCode project.</p> required <code>name</code> <code>str</code> <p>Name of the new flow to add.</p> required <code>before</code> <code>str</code> <p>Insert the new flow before this flow id. Set it to None to put it in last position.</p> <code>None</code> <code>cli</code> <code>bool</code> <p>Set to False for no interaction.</p> <code>True</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if the project path is incorrect (i-e OneCode config file not found).</p>"},{"location":"reference/cli/add/#onecode.cli.add.main","title":"<code>main()</code>","text":"<p>Start a user-interactive CLI to add a new flow to an existing OneCode project. <pre><code>onecode-add\n</code></pre></p>"},{"location":"reference/cli/cli/","title":"CLI","text":""},{"location":"reference/cli/cli/#create-a-new-project","title":"Create a new project","text":"<p>Start a user-interactive CLI to create a new OneCode project. <pre><code>onecode-create\n</code></pre></p> <p>Example</p> <pre><code>? Enter the path where to create OneCode project /path/to/examples\n? Enter your OneCode project name: HelloWorld\n? Pick a name for your main flow: hello_world\n\u280b Creating new OneCode project\nInitialized empty Git repository in /path/to/examples/HelloWorld/.git/\n\n\u2705 Created HelloWorld OneCode project\n</code></pre>"},{"location":"reference/cli/cli/#add-a-flow-to-a-project","title":"Add a flow to a project","text":"<p>Start a user-interactive CLI to add a new flow to an existing OneCode project. <pre><code>onecode-add\n</code></pre></p> <p>Example</p> <pre><code>? Enter the path of the existing OneCode project /path/to/examples/HelloWorld\n? Enter the name of the new flow to add: second_step\n? Choose before which flow:\n  hello_world\n\u276f Put at the end\n\u280b Adding new flow\n\u2705 Added second_step flow\n</code></pre>"},{"location":"reference/cli/cli/#start-a-project-with-streamlit","title":"Start a project with Streamlit","text":"<pre><code>usage: onecode-start [-h] [--modules [MODULES [MODULES ...]]] [--dump] [--verbose]\n\nStart the OneCode Project in Streamlit mode.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --modules [MODULES [MODULES ...]]\n                        Optional list of modules to import first\n  --dump                Only generate the app.py file\n  --verbose             Print verbose information when processing files\n</code></pre> <p>Example</p> <pre><code># start project from the root folder\nonecode-start\n\n# in case of libraries extending OneCode\nonecode-start --module &lt;library_name&gt;\n</code></pre>"},{"location":"reference/cli/cli/#extract-project-parameters","title":"Extract project parameters","text":"<pre><code>usage: onecode-extract [-h] [--all] [--modules [MODULES [MODULES ...]]] [--path PATH]\n    [--verbose] output_file\n\nExtract OneCode project parameters to JSON file\n\npositional arguments:\n  output_file           Path to the output JSON file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --all                 Extract parameters with their full info set\n  --modules [MODULES [MODULES ...]]\n                        Optional list of modules to import first\n  --path PATH           Path to the project root directory if not the current working directory\n  --verbose             Print verbose information when processing files\n</code></pre> <p>Example</p> <pre><code># extract project parameters from the root folder\nonecode-extract params.json\n\n# in case of libraries extending OneCode\nonecode-extract params.json --module &lt;library_name&gt;\n</code></pre>"},{"location":"reference/cli/cli/#how-to-reorganize-flows","title":"How to reorganize flows?","text":"<p>This step can be done manually: open an issue if you feel like it is necessary to have it as a CLI command. Open the <code>.onecode.json</code> file located at the root of the OneCode project in your favorite text editor. You should see a fairly simple to understand JSON file: <pre><code>[\n    {\n        \"file\": \"hello_world\",\n        \"label\": \"hello_world\",\n        \"attributes\": {}\n    },\n    {\n        \"file\": \"second_step\",\n        \"label\": \"second_step\",\n        \"attributes\": {}\n    }\n]\n</code></pre></p> <p>Manually re-order the flows, that's it!</p> <p>Danger</p> <p>Do not change the <code>file</code> attribute of the flows, it will break the OneCode project. This name is synchronized with the Python filename in the <code>flows</code> folder.</p>"},{"location":"reference/cli/create/","title":"Create a project","text":""},{"location":"reference/cli/create/#onecode.cli.create.create","title":"<code>create(project_path, name, main_flow_name=None, cli=True)</code>","text":"<p>Create a new OneCode project.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>str</code> <p>Path to the folder where to put the new OneCode project.</p> required <code>name</code> <code>str</code> <p>Name of the new OneCode project.</p> required <code>main_flow_name</code> <code>str</code> <p>Name of the main flow: if None, it will be constructed from the name of the OneCode project.</p> <code>None</code> <code>cli</code> <code>bool</code> <p>Set to False for no interaction.</p> <code>True</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>if the project path already exists.</p>"},{"location":"reference/cli/create/#onecode.cli.create.main","title":"<code>main()</code>","text":"<p>Start a user-interactive CLI to create a new OneCode project. <pre><code>onecode-create\n</code></pre></p>"},{"location":"reference/cli/extract/","title":"Extract project parameters","text":""},{"location":"reference/cli/extract/#onecode.cli.extract.extract_json","title":"<code>extract_json(project_path, to_file, all=False, verbose=False)</code>","text":"<p>Extract the input parameter out of the given OneCode project and dump it to the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>str</code> <p>Path to the root of the OneCode project.</p> required <code>to_file</code> <code>str</code> <p>Path of the output file to dump the JSON to.</p> required <code>all</code> <code>Optional[bool]</code> <p>If False, extract only the values of the parameter, otherwise extract values and associated data such as <code>label</code>, <code>kind</code>, etc.</p> <code>False</code>"},{"location":"reference/cli/extract/#onecode.cli.extract.main","title":"<code>main(cli=True)</code>","text":"<pre><code>usage: onecode-extract [-h] [--all] [--modules [MODULES [MODULES ...]]] [--path PATH]\n    [--verbose] output_file\n\nExtract OneCode project parameters to JSON file\n\npositional arguments:\n  output_file           Path to the output JSON file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --all                 Extract parameters with their full info set\n  --modules [MODULES [MODULES ...]]\n                        Optional list of modules to import first\n  --path PATH           Path to the project root directory if not the current working directory\n  --verbose             Print verbose information when processing files\n</code></pre>"},{"location":"reference/cli/extract/#onecode.cli.extract.process","title":"<code>process(calls)</code>","text":"<p>Evaluate the given calls such as: - only <code>ElementType.INPUT</code> are considered. - result of evaluation is interpreted as (key, value) and aggregated in the final     dictionnary returned by this function.</p> <p>Ensure the proper <code>Project().mode</code> is set before calling this function (as it will control the evaluation of the code call). This function is typically used for <code>InputElement</code> JSON extraction. Although the <code>extract_json()</code> function directly pipes the calls from the code call graph (through <code>process_call_graph()</code>), you may input your own code calls (see example below).</p> <p>Parameters:</p> Name Type Description Default <code>calls</code> <code>List[Dict[str, str]]</code> <p>List of <code>{\"func\": &lt;function_name&gt;, \"loc\": &lt;code_to_eval&gt;}</code> where <code>func</code> is the name of the function corresponding to the <code>InputElement</code> (i-e its snake case form - see the element developer section for more info), and <code>loc</code> is the \"line of code\" to evaluate through the Python interpreter.</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>A dictionnary containing the results of the code evaluation associated to their key id.</p> <p>Example</p> <pre><code>Project().mode = Mode.EXTRACT_ALL\n\n# processing a single call of Slider element\nprocess([{\"func\": \"onecode.slider\", \"loc\": \"onecode.slider('my_slider', 0.4)\"}])\n# =&gt; returns the JSON for this parameter, i-e:\n# { kind: Slider, value: 0.4, label: 'my_slider', ... }\n\n# processing a single call of a custom MyBox element\nprocess([{\"func\": \"onecode_ext.my_box\", \"loc\": \"onecode_ext.my_box('my_box', 'X')\"}])\n# =&gt; returns the JSON for this parameter, i-e:\n# { kind: MyBox, value: 'X', label: 'my_box', ... }\n\n# piping the entire call graph of a OneCode Project\nstatements = process_call_graph(project_path)\nfor v in statements.values():\n    p = process(v[\"calls\"])\n    # ...\n</code></pre>"},{"location":"reference/cli/start/","title":"Run a project with Streamlit","text":""},{"location":"reference/cli/start/#onecode.cli.start.get_import_statements","title":"<code>get_import_statements(calls)</code>","text":"<p>Get the import and init statements from the elements called.</p> <p>Parameters:</p> Name Type Description Default <code>calls</code> <code>List[Dict[str, str]]</code> <p>List of <code>{\"func\": &lt;function_name&gt;, \"loc\": &lt;code_to_eval&gt;}</code> where <code>func</code> is the name of the function corresponding to the <code>InputElement</code> (i-e its snake case form - see the element developer section for more info), and <code>loc</code> is the \"line of code\" to evaluate through the Python interpreter.</p> required <p>Returns:</p> Type Description <code>Tuple[Set[str], Set[str]]</code> <p>The pair of two sets containing respectively imports statements and init statements.</p> <p>Example</p> <pre><code># getting statements from a single call of FileInput element\nget_import_statements(\n    [{\"func\": \"onecode.file_input\", \"loc\": \"onecode.file_input('file', 'a.txt')\"}]\n)\n</code></pre> Output<pre><code>{\"import tkinter as tk\", \"from tkinter import filedialog\"}, {'_root = tk.Tk()\n\n_root.withdraw()\n\n_root.wm_attributes('-topmost', 1)'}\n</code></pre>"},{"location":"reference/cli/start/#onecode.cli.start.main","title":"<code>main()</code>","text":"<pre><code>usage: onecode-start [-h] [--modules [MODULES [MODULES ...]]] [--dump] [--verbose]\n\nStart the OneCode Project in Streamlit mode.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --modules [MODULES [MODULES ...]]\n                        Optional list of modules to import first\n  --dump                Only generate the app.py file\n  --verbose             Print verbose information when processing files\n</code></pre>"},{"location":"reference/cli/start/#onecode.cli.start.prepare_streamlit_file","title":"<code>prepare_streamlit_file(project_path, to_file, verbose=False)</code>","text":"<p>Prepare the Streamlit App Python file from the given OneCode project and dump it to the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>str</code> <p>Path to the root of the OneCode project.</p> required <code>to_file</code> <code>str</code> <p>Path of the output file to dump the Streamlit Python code to.</p> required"},{"location":"reference/cli/start/#onecode.cli.start.process","title":"<code>process(calls)</code>","text":"<p>Evaluate the given calls such as: - result of evaluation is interpreted as a code block. - resulting code block is appended to the list of their corresponding element type     (i-e input code block list for <code>InputElement</code> and output code block list for     <code>OutputElement</code>).</p> <p>Ensure the proper <code>Project().mode</code> is set before calling this function (as it will control the evaluation of the code call). This function is typically used for Streamlit code generation. Although the <code>prepare_streamlit_file()</code> function directly pipes the calls from the code call graph (through <code>process_call_graph()</code>), you may input your own code calls (see example below).</p> <p>Parameters:</p> Name Type Description Default <code>calls</code> <code>List[Dict[str, str]]</code> <p>List of <code>{\"func\": &lt;function_name&gt;, \"loc\": &lt;code_to_eval&gt;}</code> where <code>func</code> is the name of the function corresponding to the <code>InputElement</code> (i-e its snake case form - see the element developer section for more info), and <code>loc</code> is the \"line of code\" to evaluate through the Python interpreter.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>The pair of two lists: one containing the code evaluation for the <code>InputElement</code> and one</p> <code>List[str]</code> <p>containing the code evaluation for the <code>OutputElement</code>.</p> <p>Example</p> <pre><code>Project().mode = Mode.STREAMLIT\n\n# processing a single call of Slider element\nprocess([{\"func\": \"onecode.slider\", \"loc\": \"onecode.slider('My Slider', 0.4)\"}])\n# =&gt; returns the streamlit code for this parameter, i-e:\n# Slider {self.key}\n# my_slider = st.slider(\n#     'My Slider',\n#     min_value=0.,\n#     max_value=1.,\n#     value=0.4,\n#     step=0.1,\n#     disabled=False,\n#     key='my_slider'\n# )\n\n# piping the entire call graph of a OneCode Project\nstatements = process_call_graph(project_path)\nfor v in statements.values():\n    inputs, outputs = process(v[\"calls\"])\n    # ...\n</code></pre>"},{"location":"reference/cli/utils/","title":"CLI Utils","text":""},{"location":"reference/cli/utils/#onecode.cli.utils._add_flow","title":"<code>_add_flow(project_path, name, before=None)</code>","text":"<p>Internal function to add a flow to an existing OneCode project.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>str</code> <p>Path to the root of the OneCode project.</p> required <code>name</code> <code>str</code> <p>Name of the new flow to add. Note that the name will be slugified, i-e all special characters and whitespaces will be converted to \"_\". See <code>slugify</code> for more information.</p> required <code>before</code> <code>str</code> <p>Insert the new flow before this flow id. Set it to None to put it in last position.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the flow name is empty or is already used.</p>"},{"location":"reference/cli/utils/#onecode.cli.utils._get_flow_choices","title":"<code>_get_flow_choices(project_path)</code>","text":"<p>Internal function for CLI commands to get the existing OneCode project's flows as interactive Choice for InquirerPy.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>str</code> <p>Path to the root of the OneCode project.</p> required <p>Returns:</p> Type Description <code>List[Choice]</code> <p>Flow id and label as InquirerPy Choices.</p>"},{"location":"reference/cli/utils/#onecode.cli.utils.extract_calls","title":"<code>extract_calls(entry_point, graph, calls, verbose=False)</code>","text":"<p>Given a code Call Graph, extract only the code calls related to OneCode-like elements. This includes built-in input/output elements from OneCode and also any registered element coming from <code>onecode_ext</code> as well as derived OneCode packages. See Extending OneCode for more information on how to register new element.</p> <p>Parameters:</p> Name Type Description Default <code>entry_point</code> <code>str</code> <p>Call Graph function name from which to start the extraction from, e.g. <code>flows.my_flow.run</code>.</p> required <code>graph</code> <code>Dict</code> <p>Call Graph typically constructed by the DeepLime forked PyCG. Check out PyCG for more information about the graph structure or directly the forked repository at https://github.com/deeplime-io/PyCG/tree/onecode</p> required <code>calls</code> <code>List[Dict[str, str]]</code> <p>List of calls as <code>{\"func\": &lt;function_name&gt;, \"loc\": &lt;code_to_eval&gt;}</code> where results are aggregated. These <code>calls</code> are typically piped to the <code>process</code> functions for JSON extraction or Streamlit code generation.</p> required <code>verbose</code> <code>bool</code> <p>If True, print out debug information such as elements being processed.</p> <code>False</code>"},{"location":"reference/cli/utils/#onecode.cli.utils.get_flows","title":"<code>get_flows(project_path)</code>","text":"<p>Get the flows configuration as stored at the OneCode project's root (filename is given by the variable <code>Env.ONECODE_CONFIG_FILE</code>).</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>str</code> <p>Path to the root of the OneCode project.</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>The JSON content of the OneCode project flow configuration as a dictionnary.</p>"},{"location":"reference/cli/utils/#onecode.cli.utils.process_call_graph","title":"<code>process_call_graph(project_path=None, verbose=False)</code>","text":"<p>Process a OneCode project to extract the code calls related to OneCode-like elements.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>str</code> <p>Path to the root of the OneCode project.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>If True, print out debug information such as elements being processed.</p> <code>False</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if the OneCode project configuration file is not found.</p> <p>Returns:</p> Type Description <code>OrderedDict</code> <p>The list of OneCode-like elements code statements ready to be evaluated.</p>"},{"location":"reference/elements/input_element/","title":"InputElement","text":"<p>             Bases: <code>ABC</code></p> <p>An element is an object that will be interpreted based on the Project's mode (script execution, extraction, streamlit code generation, etc.). OneCode projects should not directly call the <code>InputElement</code> but its corresponding static function defined as the snake case of the element class name. For instance:</p> <p>Failure</p> <pre><code># wrong\nx = MyInputElement(key, value, label)\n</code></pre> <p>Success</p> <pre><code># correct\nx = my_input_element(key, value, label)\n</code></pre> <p><code>InputElement</code> is the base class for input type parameter. By inheriting it, it is mandatory to define:</p> <ul> <li><code>_value_type</code>: internal attribute to ensure the type of     the value is correct at runtime.</li> <li><code>_validate()</code>: internal method to ensure the value checks     out at runtime.</li> <li><code>streamlit()</code>: method returning the Streamlit code to be     generated.</li> </ul> <p>Note</p> <p>Depending on your case, you may need to subclass <code>value</code> too (e.g. like CsvReader and FileInput).</p> <p>Tip</p> <p>Don't forget that the Python filename of an element should correspond to the snake case form of the element class name (e.g. <code>FileInput</code> -&gt; <code>file_input.py</code>). You may use <code>pydash</code> functions <code>snake_case()</code> and <code>pascal_case()</code> to find the right conversion between the two forms.</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>str</code> <p>Human readable name typically used by <code>streamlit()</code> for display.</p> <code>value</code> <code>Optional[Any]</code> <p>Actual value of the element.</p> <code>disabled</code> <code>str</code> <p>The string condition typically used by <code>streamlit</code> for disabling the widget.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._value_type","title":"<code>_value_type: type</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>You must re-implement this function to return the expected <code>type</code> for the value. This <code>_value_type</code> is used to check to the proper type at runtime.</p> <p>Returns:</p> Type Description <code>type</code> <p>The type of the value (built-in type or typing).</p> <p>Example</p> <pre><code>@property\ndef _value_type(self) -&gt; type:\n    return Union[str, bool]\n</code></pre>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.disabled","title":"<code>disabled: str</code>  <code>property</code>","text":"<p>Get the whether the element is disabled as a string. It is primarly meant to be directly used in the Streamlit generated code for the <code>disabled</code> parameter. See <code>streamlit()</code> for more information.</p> <p>Returns:</p> Type Description <code>str</code> <p>The conditional string to be used in <code>streamlit()</code> for the <code>disabled</code> parameter.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.kind","title":"<code>kind: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The element class name.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.label","title":"<code>label: str</code>  <code>property</code>","text":"<p>Get the label with triple-quotes and escaped to handle human-readable string. It is primarly meant to be directly used in the Streamlit generated code for the <code>label</code> parameter. See <code>streamlit()</code> for more information.</p> <p>Returns:</p> Type Description <code>str</code> <p>The string to be used in <code>streamlit()</code> for the <code>label</code> parameter.</p> <p>Example</p> <pre><code>from onecode import Mode, Project, slider\n\nProject().mode = Mode.CONSOLE\nx = slider(\"Hello l'aspirateur!\", None, optional=True)\n\nassert x.label == \"'''Hello l\\'aspirateur!'''\"\n</code></pre>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.value","title":"<code>value: Optional[Any]</code>  <code>property</code>","text":"<p>Get the value of the element. By default this value is the one provided during at the initialization. Feel free to overwrite this property as required. For instance, FileInput and CsvReader re-implement it for their own purpose.</p> <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>By default, the same as the initial value.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.__call__","title":"<code>__call__()</code>","text":"<p>Internal cornerstone for OneCode to distribute the action to perform according to the Project mode.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the Project mode is unknown, e.g. if there is no method matching the mode name.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Any]</code> <p>Initial value for the parameter. This value may be transformed depending on the element.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>Only used by Streamlit: if element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra arguments to populate the element with. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._build_streamlit","title":"<code>_build_streamlit()</code>","text":"<p>Function called when Project mode is <code>Mode.STREAMLIT</code>. The Streamlit block code will be prepared using the element parameters (such as <code>count</code>, <code>optional</code>, <code>hide_when_disabled</code>, etc.) as well as the block code returned by the <code>streamlit()</code> function. This function makes it easy to extend the <code>InputElement</code> without worrying about the <code>count</code>, <code>optional</code> and <code>hide_when_disabled</code> attributes.</p> <p>Returns:</p> Type Description <code>str</code> <p>The full block code generated by this <code>InputElement</code> to be written out to the generated</p> <code>str</code> <p>Streamlit app code.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._console","title":"<code>_console()</code>","text":"<p>Function called when Project mode is <code>Mode.CONSOLE</code>.</p> <p>Returns:</p> Type Description <code>InputElement</code> <p>This <code>InputElement</code> object.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._execute","title":"<code>_execute()</code>","text":"<p>Function called when Project mode is <code>Mode.EXECUTE</code>. The value will first be collected, prepared, validated then added to the <code>Project().data</code> before being returned.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The value of this element after resolution (collection, preparation and validation).</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._extract","title":"<code>_extract()</code>","text":"<p>Function called when Project mode is <code>Mode.EXTRACT</code>. The value will be collected and added to the <code>Project().data</code> before returning it as key-value object.</p> <p>Returns:</p> Type Description <code>Tuple[str, Any]</code> <p>The pair <code>{ key: value }</code> of this element.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._extract_all","title":"<code>_extract_all()</code>","text":"<p>Function called when Project mode is <code>Mode.EXTRACT_ALL</code>. The value will be collected and added to the <code>Project().data</code> before returning it as key-value object along with all other element parameters, such as <code>key</code>, <code>kind</code>, <code>label</code>, etc.</p> <p>Returns:</p> Type Description <code>Tuple[str, Any]</code> <p>The full parameter set constituting this element as a dictionnary.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._load_then_execute","title":"<code>_load_then_execute()</code>","text":"<p>Function called when Project mode is <code>Mode.LOAD_THEN_EXECUTE</code>. The value will first be collected, prepared, validated then added to the <code>Project().data</code> before being returned.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The value of this element after resolution (collection, preparation and validation).</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._prepare_and_validate","title":"<code>_prepare_and_validate(value)</code>","text":"<p>Internal function used in <code>Mode.EXECUTE</code> and <code>Mode.LOAD_THEN_EXECUTE</code> to prepare the value, check is type, then validate it before returning it.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[Any]</code> <p>Value to be prepared and validated.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the value is None but is not optional or the value is of incorrect type.</p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement._validate","title":"<code>_validate(value)</code>  <code>abstractmethod</code>","text":"<p>You must re-implement this function to validate at runtime the value before being returned during the OneCode project execution. This function must raise an error in case the value is incorrect/inconsistent wrt the element parameters.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Prepared value to be checked (do not use <code>self.value</code>).</p> required <p>Example</p> <p>For instance, a slider value will fail to validate if it is outside its range: <pre><code>def _validate(\n    self,\n    value: Union[float, int]\n) -&gt; None:\n    if self.min &gt; self.max:\n        raise ValueError(\n            f'''[{self.key}] Minimum cannot be greater than maximum:\n            {self.min} &gt; {self.max}'''\n        )\n\n    elif value &lt; self.min:\n        raise ValueError(\n            f'''[{self.key}] Value lower than minimum:\n            {value} &lt; {self.min}'''\n        )\n\n    elif value &gt; self.max:\n        raise ValueError(\n            f'[{self.key}] Value greater than maximum: {value} &gt; {self.max}'\n        )\n</code></pre></p>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.imports","title":"<code>imports()</code>  <code>staticmethod</code>","text":"<p>Re-implement this function in case your Streamlit code requires specific Python package import. This function should return a list of import statement as string.</p> <p>Note that the following packages are already imported (not needed to return them in that list): <code>os</code>, <code>json</code>, <code>uuid</code>, <code>pydash</code>, <code>streamlit as st</code>.</p> <p>Example</p> <pre><code>@staticmethod\ndef imports() -&gt; List[str]:\n    return [\n        \"import numpy as np\",\n        \"import plotly\"\n    ]\n</code></pre>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.init","title":"<code>init()</code>  <code>staticmethod</code>","text":"<p>Re-implement this function in case your Streamlit code requires specific initialization statements. Note that all variables starting with a <code>_</code> are reserved.</p> <p>Example</p> <pre><code>@staticmethod\ndef init() -&gt; str:\n    return '''\n        def x(angle):\n            return np.deg2rad(angle%360)\n    '''\n</code></pre>"},{"location":"reference/elements/input_element/#onecode.elements.InputElement.streamlit","title":"<code>streamlit(id)</code>  <code>abstractmethod</code>","text":"<p>You must re-implement this function to return the expected Streamlit block code for this element. This block code will be written out to the generated Streamlit App code.</p> <p>Typical attributes that will be useful: - <code>label</code>: can be directly piped to the Streamlit widget <code>label</code> parameter. This attribute     has been automatically setup for you to use and will properly escape the potential     troublesome characters.</p> <ul> <li> <p><code>disabled</code>: can be directly piped to the Streamlit <code>disabled</code> widget parameters. This     attribute has been automatically setup for you to use and will properly take the     <code>optional</code> argument into account regardless of <code>optional</code> being an expression, a     boolean or None. Therefore, do not use <code>optional</code> or <code>hide_when_disabled</code>, use     <code>disabled</code> directly.</p> </li> <li> <p><code>key</code>: it must be used as the variable name for the Streamlit widget.</p> </li> <li> <p>all other attributes that are specific to your widget, e.g. <code>min</code>, <code>max</code>, <code>step</code> for     a Slider, etc.</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Must be used as the <code>id</code> parameter of the Streamlit widget. This variable is automatically setup to take uniqueness wrt <code>count</code>.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The Streamlit block code to be output in the generated Streamlit App code.</p> <p>Example</p> <pre><code>    def streamlit(\n        self,\n        id: str\n    ) -&gt; str:\n\n        return f'''\n# Slider\n{self.key} = st.slider(\n    {self.label},\n    min_value={self.min},\n    max_value={self.max},\n    value={self.value},\n    step={self.step},\n    disabled={self.disabled},\n    key={id}\n)\n\n'''\n</code></pre> <p>Tip</p> <p>Remember: no need to use <code>optional</code>, <code>hide_when_disabled</code> and <code>count</code>, they are already automatically taken into account to make your life easier. Use <code>disabled</code>, <code>label</code>, <code>key</code> and <code>id</code></p>"},{"location":"reference/elements/input_element_list/","title":"Input Elements","text":"<p>Available input elements for OneCode projects:</p> <ul> <li>checkbox</li> <li>csv_reader</li> <li>dropdown</li> <li>file_input</li> <li>folder_input</li> <li>number_input</li> <li>radio_button</li> <li>section_header</li> <li>slider</li> <li>text_input</li> </ul>"},{"location":"reference/elements/input_element_list/#checkbox","title":"checkbox","text":"<p><pre><code>def checkbox(\n    key: str,\n    value: Optional[Union[bool, List[bool]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False\n)\n</code></pre> </p> <p>A simple checkbox with a label. Value is either True, False or None.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[bool, List[bool]]]</code> <p>Initial check status: True, False or None.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display next to the checkbox.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import checkbox, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = checkbox(\n    key=\"Checkbox\",\n    value=True,\n    label=\"My Checkbox\"\n)\nprint(widget)\n</code></pre> Output<pre><code>True\n</code></pre>"},{"location":"reference/elements/input_element_list/#csv_reader","title":"csv_reader","text":"<p><pre><code>def csv_reader(\n    key: str,\n    value: Optional[Union[str, List[str]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>A CSV-file reader returning a Pandas DataFrame and displayed as a table in Streamlit.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Path to the CSV file. CSV file must exists, even for the Streamlit mode.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the table.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used by the <code>Mode.EXTRACT_ALL</code> when dumping attributes to JSON.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import pandas as pd\nfrom onecode import csv_reader, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = csv_reader(\n    key=\"CsvReader\",\n    value=\"/path/to/file.csv\",\n    label=\"My CSV Reader\",\n    tags=['CSV']\n)\n\npd.testing.assert_frame_equal(widget, pd.read_csv(\"/path/to/file.csv\"))\n</code></pre>"},{"location":"reference/elements/input_element_list/#dropdown","title":"dropdown","text":"<p><pre><code>def dropdown(\n    key: str,\n    value: Optional[Union[str, List[str], List[List[str]]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    options: Union[List, str] = [],\n    multiple: bool = False\n)\n</code></pre> </p> <p>A single or multipe choice dropdown menu.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[Union[str, int, float], List[Union[str, int, float]], List[List[Union[str, int, float]]]]]</code> <p>Pre-selected value(s) among the options.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display left of the dropdown menu.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>options</code> <code>Union[List, str]</code> <p>List all possible options available in the dropdown menu. This list may either be fixed or dynamic (to a certain extent): in the latter case, use Expressions in a similar way as <code>optional</code> and <code>count</code>. See example below.</p> <code>[]</code> <code>multiple</code> <code>bool</code> <p>Set to True if multiple choice is allowed, otherwise only a single element can be selected.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <p>Fixed options: <pre><code>from onecode import dropdown, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = dropdown(\n    key=\"Dropdown\",\n    value=[\"A\", \"C\"],\n    options=[\"A\", \"B\", \"C\"],\n    multiple=True\n)\nprint(widget)\n</code></pre></p> Output<pre><code>[\"A\", \"C\"]\n</code></pre> <p>Dynamic options: <pre><code>from onecode import csv_reader, dropdown, Mode, Project\n\nProject().mode = Mode.EXECUTE\n\ndf = csv_reader(\"csv\", \"/path/to/file.csv\")\n\nwidget = dropdown(\n    key=\"Dynamic Dropdown\",\n    value=None,\n    options='$csv$.columns',\n    optional=True\n)\nprint(widget)\n</code></pre></p> Output<pre><code>None\n</code></pre>"},{"location":"reference/elements/input_element_list/#file_input","title":"file_input","text":"<p><pre><code>def file_input(\n    key: str,\n    value: Optional[Union[str, List[str], List[List[str]]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    types: List[Tuple[str, str]] = None,\n    multiple: bool = False,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>A single or multiple file selector.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str], List[List[str]]]]</code> <p>Path to file(s). Provided file(s) don't necessarily have to exist for the Streamlit mode, however their existence will be checked at execution time. If paths are not absolute, then they are considered relative to the data root folder. See Best Practices With Data for more information.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display left of the file selector.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>types</code> <code>List[Tuple[str, str]]</code> <p>List of filters allowing to narrow file selection within Streamlit. Each filter must be a pair of (name, list of allowed extensions), e.g. <code>(\"Image\", \".jpg .png .jpeg\")</code>. You may use the FileFilter enums for convenience.</p> <code>None</code> <code>multiple</code> <code>bool</code> <p>Set to True if multiple choice is allowed, otherwise only a single element can be selected.</p> <code>False</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used by the <code>Mode.EXTRACT_ALL</code> when dumping attributes to JSON.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import file_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = file_input(\n    key=\"FileInput\",\n    value=[\"/path/to/file1.txt\", \"/path/to/file2.csv\"],\n    multiple=True,\n    tags=['MyTags']\n)\nprint(widget)\n</code></pre> Output<pre><code>[\"/path/to/file1.txt\", \"/path/to/file2.csv\"]\n</code></pre>"},{"location":"reference/elements/input_element_list/#folder_input","title":"folder_input","text":"<p><pre><code>def folder_input(\n    key: str,\n    value: Optional[Union[str, List[str]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False\n)\n</code></pre> </p> <p>A single folder selector.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Path to folder. Provided folder doesn't necessarily have to exist for the Streamlit mode, however its existence will be checked at execution time. If path is not absolute, then it is considered relative to the data root folder. See Best Practices With Data for more information.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display left of the folder selector.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import folder_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = folder_input(\n    key=\"FolderInput\",\n    value=\"/path/to/\"\n)\nprint(widget)\n</code></pre> Output<pre><code>\"/path/to/\"\n</code></pre>"},{"location":"reference/elements/input_element_list/#number_input","title":"number_input","text":"<p><pre><code>def number_input(\n    key: str,\n    value: Optional[Union[float, List[float]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    min: float = None,\n    max: float = None,\n    step: float = None\n)\n</code></pre> </p> <p>A field for numerical values.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[float, List[float]]]</code> <p>Initial numerical value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>min</code> <code>float</code> <p>Optionally limit the possible values with a lower bound.</p> <code>None</code> <code>max</code> <code>float</code> <p>Optionally limit the possible values with an upper bound.</p> <code>None</code> <code>step</code> <code>float</code> <p>Optionally set a step used when increment/decrement button are used.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import number_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = number_input(\n    key=\"Number Input\",\n    value=5.1,\n    min=5,\n    max=6\n)\nprint(widget)\n</code></pre> Output<pre><code>5.1\n</code></pre>"},{"location":"reference/elements/input_element_list/#radio_button","title":"radio_button","text":"<p><pre><code>def radio_button(\n    key: str,\n    value: Optional[Union[str, List[str]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    options: List[str] = [],\n    horizontal: bool = False\n)\n</code></pre> </p> <p>A single choice represented as a group of exclusive radio buttons.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Radio button initially selected.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>options</code> <code>List[str]</code> <p>List all possible options available. This list may either be fixed or dynamic (to a certain extent): in the latter case, use expressions in a similar  way as <code>optional</code> and <code>count</code>. See example below.</p> <code>[]</code> <code>horizontal</code> <code>bool</code> <p>Set to True to have radio buttons displayed horizontally, otherwise radio buttons will be displayed vertically.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <p>Fixed options: <pre><code>from onecode import radio_button, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = radio_button(\n    key=\"RadioButton\",\n    value=\"A\",\n    options=[\"A\", \"B\", \"C\"]\n)\nprint(widget)\n</code></pre></p> Output<pre><code>\"A\"\n</code></pre> <p>Dynamic options: <pre><code>from onecode import csv_reader, radio_button, Mode, Project\n\nProject().mode = Mode.EXECUTE\n\ndf = csv_reader(\"csv\", \"/path/to/file.csv\")\n\nwidget = radio_button(\n    key=\"Dynamic RadioButton\",\n    value=None,\n    options='$csv$.columns',\n    optional=True\n)\n\nassert widget is None\n</code></pre></p>"},{"location":"reference/elements/input_element_list/#section_header","title":"section_header","text":"<p><pre><code>def section_header(\n    key: str,\n    value: str\n)\n</code></pre> </p> <p>A simple header.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import section_header, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = section_header(\n    value=\"My SectionHeader\"\n)\n</code></pre> Output<pre><code>\"OneCode rocks!\"\n</code></pre>"},{"location":"reference/elements/input_element_list/#slider","title":"slider","text":"<p><pre><code>def slider(\n    key: str,\n    value: Optional[Union[float, List[float]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    min: float = 0.,\n    max: float = 1.,\n    step: float = 0.1\n)\n</code></pre> </p> <p>A slider for numerical values.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[float, List[float]]]</code> <p>Initial numerical value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>min</code> <code>float</code> <p>Mandatory lower bound, defaults to 0.</p> <code>0.0</code> <code>max</code> <code>float</code> <p>Mandatory upper bound, defaults to 1.</p> <code>1.0</code> <code>step</code> <code>float</code> <p>Mandatory step used when incrementing/decrementing the slider, defaults to 0.1.</p> <code>0.1</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import slider, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = slider(\n    key=\"Slider\",\n    value=5.1,\n    min=5,\n    max=6\n)\nprint(widget)\n</code></pre> Output<pre><code>5.1\n</code></pre>"},{"location":"reference/elements/input_element_list/#text_input","title":"text_input","text":"<p><pre><code>def text_input(\n    key: str,\n    value: Optional[Union[str, List[str]]],\n    label: Optional[str] = None,\n    count: Optional[Union[int, str]] = None,\n    optional: Union[bool, str] = False,\n    hide_when_disabled: bool = False,\n    max_chars: int = None,\n    placeholder: str = None\n)\n</code></pre> </p> <p>A simple text field.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Initial text value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the text area.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>max_chars</code> <code>int</code> <p>Maximum number of characters allowed for this text field.</p> <code>None</code> <code>placeholder</code> <code>str</code> <p>Placeholder text shown whenever there is no value.</p> <code>None</code> <code>multiline</code> <code>Union[bool, int]</code> <p>Set to True or a height in pixels to make it multiline text area.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import text_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = text_input(\n    key=\"TextInput\",\n    value=\"OneCode rocks!\",\n    label=\"My TextInput\"\n)\nprint(widget)\n</code></pre> Output<pre><code>\"OneCode rocks!\"\n</code></pre>"},{"location":"reference/elements/output_element/","title":"OutputElement","text":"<p>             Bases: <code>ABC</code></p> <p>An element is an object that will be interpreted based on the Project's mode (script execution, extraction, streamlit code generation, etc.). OneCode projects should not directly call the <code>OutputElement</code> but its corresponding static function defined as the snake case of the element class name. For instance:</p> <p>Failure</p> <pre><code># wrong\nx = MyOutputElement(key, value, label)\n</code></pre> <p>Success</p> <pre><code># correct\nx = my_output_element(key, value, label)\n</code></pre> <p><code>OutputElement</code> is the base class for outputs. By inheriting it, it is mandatory to define:</p> <ul> <li><code>_validate()</code>: internal method to ensure the value checks     out at runtime.</li> <li><code>streamlit()</code>: method returning the Streamlit code to be     generated.</li> </ul> <p>Note</p> <p>Depending on your case, you may need to subclass <code>value</code> too (e.g. like CsvOutput and FileOutput).</p> <p>Tip</p> <p>Don't forget that the Python filename of an element should correspond to the snake case form of the element class name (e.g. <code>FileOutput</code> -&gt; <code>file_output.py</code>). You may use <code>pydash</code> functions <code>snake_case()</code> and <code>pascal_case()</code> to find the right conversion between the two forms.</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>str</code> <p>Human readable name typically used by <code>streamlit()</code> for display.</p> <code>value</code> <code>Any</code> <p>Actual value of the element.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.kind","title":"<code>kind: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The element class name.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.label","title":"<code>label: str</code>  <code>property</code>","text":"<p>Get the label with triple-quotes and escaped to handle human-readable string. It is primarly meant to be directly used in the Streamlit generated code for the <code>label</code> parameter. See <code>streamlit()</code> for more information.</p> <p>Returns:</p> Type Description <code>str</code> <p>The string to be used in <code>streamlit()</code> for the <code>label</code> parameter.</p> <p>Example</p> <pre><code>from onecode import Mode, Project, text_output\n\nProject().mode = Mode.CONSOLE\nx = text_output(\"Hello l'aspirateur!\", None)\n\nassert x.label == \"'''Hello l\\'aspirateur!'''\"\n</code></pre>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.value","title":"<code>value: Any</code>  <code>property</code>","text":"<p>Get the value of the element. By default this value is the one provided during at the initialization. Feel free to overwrite this property as required. For instance, FileOutput and CsvOutput re-implement it for their own purpose.</p> <p>Returns:</p> Type Description <code>Any</code> <p>By default, the same as the initial value.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.__call__","title":"<code>__call__()</code>","text":"<p>Directly returns static_call().</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.__init__","title":"<code>__init__(key, value, label=None, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Any</code> <p>Initial value for the parameter. This value may be transformed depending on the element.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra arguments to populate the element with. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement._build_streamlit","title":"<code>_build_streamlit()</code>  <code>classmethod</code>","text":"<p>Function called when Project mode is <code>Mode.STREAMLIT</code>. This will generate the output static function called when the corresponding output file is selected in the Streamlit App file tree. The function signature is made of the internal attributes and any other custom attributes.</p> <p>Note</p> <p>See <code>streamlit()</code> for more information.</p> <p>Returns:</p> Type Description <code>str</code> <p>The block code generated by this <code>OutputElement</code> to be written out to the generated</p> <code>str</code> <p>Streamlit app code.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement._console","title":"<code>_console()</code>","text":"<p>Function called when Project mode is <code>Mode.CONSOLE</code>.</p> <p>Returns:</p> Type Description <code>OutputElement</code> <p>This <code>OutputElement</code> object.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement._execute","title":"<code>_execute()</code>","text":"<p>Function called when Project mode is <code>Mode.EXECUTE</code>. The value will first be prepared, validated then all element attributes will be output to the manifest file (see <code>Project.write_output()</code>).</p> <p>Returns:</p> Type Description <code>Any</code> <p>The value of this element after resolution (preparation and validation).</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement._extract","title":"<code>_extract()</code>","text":"<p>Nothing is performed: <code>OutputElement</code> attributes are not extracted as the actual output attributes will be dumped into a manifest file.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement._extract_all","title":"<code>_extract_all()</code>","text":"<p>Nothing is performed: <code>OutputElement</code> attributes are not extracted as the actual output attributes will be dumped into a manifest file.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement._load_then_execute","title":"<code>_load_then_execute()</code>","text":"<p>Directly returns _execute().</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement._validate","title":"<code>_validate(value)</code>  <code>abstractmethod</code>","text":"<p>You must re-implement this function to validate at runtime the value before being returned during the OneCode project execution. This function must raise an error in case the value is incorrect/inconsistent wrt the element parameters.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Prepared value to be checked (do not use <code>self.value</code>).</p> required <p>Example</p> <p>For instance, an image output value will fail to validate if the file extension is not a valid/known extension such as jpeg, png, etc. <pre><code>def _validate(\n    self,\n    value: str\n) -&gt; None:\n    _, ext = os.path.splitext(self.value)\n    valid_ext = [\n        '.jpg',\n        '.jpeg',\n        '.png',\n        '.svg',\n    ]\n\n    if ext.lower() not in valid_ext:\n        raise ValueError(\n            f'''[{self.key}] Invalid image extension:\n            {ext} (accepted: {', '.join(valid_ext)})'''\n        )\n</code></pre></p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.imports","title":"<code>imports()</code>  <code>staticmethod</code>","text":"<p>Re-implement this function in case your Streamlit code requires specific Python package import. This function should return a list of import statement as string.</p> <p>Note that the following packages are already imported (not needed to return them in that list): <code>os</code>, <code>json</code>, <code>uuid</code>, <code>pydash</code>, <code>streamlit as st</code>.</p> <p>Example</p> <pre><code>@staticmethod\ndef imports() -&gt; List[str]:\n    return [\n        \"import numpy as np\",\n        \"import plotly\"\n    ]\n</code></pre>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.init","title":"<code>init()</code>  <code>staticmethod</code>","text":"<p>Re-implement this function in case your Streamlit code requires specific initialization statements. Note that all variables starting with a <code>_</code> are reserved.</p> <p>Example</p> <pre><code>@staticmethod\ndef init() -&gt; str:\n    return '''\n        def x(angle):\n            return np.deg2rad(angle%360)\n    '''\n</code></pre>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.static_call","title":"<code>static_call()</code>  <code>staticmethod</code>","text":"<p>Internal cornerstone for OneCode to distribute the action to perform according to the Project mode.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the Project mode is unknown, e.g. if there is no method matching the mode name.</p>"},{"location":"reference/elements/output_element/#onecode.elements.OutputElement.streamlit","title":"<code>streamlit()</code>  <code>abstractmethod</code> <code>staticmethod</code>","text":"<p>You must re-implement this function to return the expected Streamlit block code for this element. This block code will be written out to the generated Streamlit App code.</p> <p>You should write this block code as the body of a static function yielding all internal attributes (such as <code>key</code>, <code>label</code>, <code>value</code> and <code>kind</code>) and any other custom attributes provided in this <code>OutputElement</code> initialization function's signature. For instance: <pre><code>class MyOutputElement(OutputElement):\n    def __init__(\n        self,\n        key: str,\n        value: Any,\n        label: Optional[str],\n        my_extra_1: int,\n        my_extra_2: str\n    ):\n        # ...\n</code></pre> will generated the following static function signature <pre><code>function _MyOutputElement(key, label, value, kind, my_extra_1, my_extra_2)\n</code></pre></p> <p>Returns:</p> Type Description <code>str</code> <p>The Streamlit block code to be output in the generated Streamlit App code.</p> <p>Example</p> <pre><code>    def streamlit() -&gt; str:\n        return '''\nst.write(f'{key} - {label} - {value} - {kind}: {my_extra_1} | {my_extra_2}')\n'''\n</code></pre> <p>will write out to the Streamlit App file: <pre><code># static function called when the corresponding file is selected in the tree\nfunction _MyOutputElement(key, label, value, kind, my_extra_1, my_extra_2)\n    st.write(f'{key} - {label} - {value} - {kind}: {my_extra_1} | {my_extra_2}')\n</code></pre></p>"},{"location":"reference/elements/output_element_list/","title":"Output Elements","text":"<p>Available output elements for OneCode projects:</p> <ul> <li>csv_output</li> <li>file_output</li> <li>html_output</li> <li>image_output</li> <li>plotly_output</li> <li>pyvista_vrml_output</li> <li>text_output</li> <li>video_output</li> </ul>"},{"location":"reference/elements/output_element_list/#csv_output","title":"csv_output","text":"<p><pre><code>def csv_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>A CSV table with a label on top.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output CSV file which must have a <code>.csv</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import pandas as pd\nfrom onecode import csv_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\ncsv_file = csv_output(\n    key=\"CsvOutput\",\n    value=\"/path/to/file.csv\",\n    label=\"My CsvOutput\",\n    tags=['CSV']\n)\n\ndf = pd.DataFrame([[0, 1, 2], [3, 4, 5]], columns=['A', 'B', 'C'])\ndf.to_csv(csv_file, index=False)\nprint(csv_file)\n</code></pre> Output<pre><code>\"/path/to/file.csv\"\n</code></pre>"},{"location":"reference/elements/output_element_list/#file_output","title":"file_output","text":"<p><pre><code>def file_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>Basic information about the file, such as size and file path.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output file. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import file_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nfile = file_output(\n    key=\"FileOutput\",\n    value=\"/path/to/file.txt\",\n    label=\"My FileOutput\",\n    tags=['TXT']\n)\n\nwith open(file, 'w') as f:\n    f.write('Hello OneCode!')\n\nprint(file)\n</code></pre> Output<pre><code>\"/path/to/file.txt\"\n</code></pre>"},{"location":"reference/elements/output_element_list/#file_output_1","title":"file_output","text":"<p><pre><code>def html_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>Link to HTML file opening in a new tab.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output file. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import html_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nfile = html_output(\n    key=\"HtmlOutput\",\n    value=\"/path/to/file.html\",\n    label=\"My HtmlOutput\",\n    tags=['HTML']\n)\n\nwith open(file, 'w') as f:\n    f.write('&lt;html&gt;&lt;body&gt;Hello OneCode!&lt;/body&gt;&lt;/html&gt;')\n\nprint(file)\n</code></pre> Output<pre><code>\"/path/to/file.html\"\n</code></pre>"},{"location":"reference/elements/output_element_list/#image_output","title":"image_output","text":"<p><pre><code>def image_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>An image as part of the image carousel.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output image file which must have a <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code> or <code>.svg</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nfrom onecode import image_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nimage_file = image_output(\n    key=\"ImageOutput\",\n    value=\"/path/to/file.jpg\",\n    label=\"My ImageOutput\",\n    tags=['Image']\n)\n\nt = np.arange(0.0, 2.0, 0.01)\ns = 1 + np.sin(2 * np.pi * t)\nfig, ax = plt.subplots()\nax.plot(t, s)\nax.set(xlabel='time (s)', ylabel='voltage (mV)')\nax.grid()\n\nfig.savefig(image_file)\nprint(image_file)\n</code></pre> Output<pre><code>\"/path/to/file.jpg\"\n</code></pre>"},{"location":"reference/elements/output_element_list/#plotly_output","title":"plotly_output","text":"<p><pre><code>def plotly_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>A Plotly chart with a label on top.</p> <p>Warning</p> <p>Required package: <code>plotly</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output Plotly JSON file which must have a <code>.json</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import plotly\nimport plotly.graph_objects as go\nfrom onecode import plotly_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nplot_file = plotly_output(\n    key=\"PlotlyOutput\",\n    value=\"/path/to/file.json\",\n    label=\"My PlotlyOutput\",\n    tags=['Graph']\n)\n\nfig = go.Figure(\n    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],\n    layout=go.Layout(\n        title=go.layout.Title(text=\"A Figure Specified By A Graph Object\")\n    )\n)\nplotly.io.write_json(fig, plot_file)\nprint(plot_file)\n</code></pre> Output<pre><code>\"/path/to/file.json\"\n</code></pre>"},{"location":"reference/elements/output_element_list/#pyvista_vrml_output","title":"pyvista_vrml_output","text":"<p><pre><code>def pyvista_vrml_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>A Pyvista 3D scene using a VRML output. See <code>pyvista.export_vrml()</code> for more information. See example <code>PyVistaViz</code>.</p> <p>Warning</p> <p>Required packages: <code>pyvista</code>, <code>stpyvista</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output Plotly JSON file which must have a <code>.json</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import pyvista as pv\nfrom onecode import pyvista_vrml_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nvrml_file = pyvista_vrml_output(\n    key=\"PyvistaVrmlOutput\",\n    value=\"/path/to/file.vrml\",\n    label=\"My PyvistaVrmlOutput\",\n    tags=['Graph']\n)\n\nplotter = pv.Plotter(window_size=[600,600])\nmesh = pv.Cube(center=(0,0,0))\nmesh['myscalar'] = mesh.points[:, 2] * mesh.points[:, 0]\nplotter.add_mesh(mesh, scalars='myscalar', cmap='bwr', line_width=1)\nplotter.view_isometric()\nplotter.background_color = 'white'\n\nplotter.export_vrml(vrml_file)\nprint(vrml_file)\n</code></pre> Output<pre><code>\"/path/to/file.vrml\"\n</code></pre>"},{"location":"reference/elements/output_element_list/#text_output","title":"text_output","text":"<p><pre><code>def text_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None,\n    truncate_at: int = 50000\n)\n</code></pre> </p> <p>A text file preview.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output CSV file which must have a <code>.csv</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>truncate_at</code> <code>int</code> <p>Truncate the preview at the specified number of characters.</p> <code>50000</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import text_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\ntext_file = text_output(\n    key=\"TextOutput\",\n    value=\"/path/to/file.txt\",\n    label=\"My TextOutput\",\n    tags=['Text'],\n    truncate_at=1000\n)\n\nwith open(text_file, 'w') as f:\n    f.write('Hello OneCode!')\nprint(widget)\n</code></pre> Output<pre><code>\"/path/to/file.txt\"\n</code></pre>"},{"location":"reference/elements/output_element_list/#video_output","title":"video_output","text":"<p><pre><code>def video_output(\n    key: str,\n    value: str,\n    label: Optional[str] = None,\n    tags: Optional[List[str]] = None\n)\n</code></pre> </p> <p>An embedded video player.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output video file which must have a <code>.mp4</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import matplotlib.pyplot as plt\nfrom onecode import video_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nvideo_file = video_output(\n    key=\"VideoOutput\",\n    value=\"/path/to/file.mp4\",\n    label=\"My VideoOutput\",\n    tags=['Video']\n)\n\n# define your animation here, for instance, with matplotlib\n# https://matplotlib.org/stable/api/animation_api.html\n\nprint(video_file)\n</code></pre> Output<pre><code>\"/path/to/file.mp4\"\n</code></pre>"},{"location":"reference/elements/input/checkbox/","title":"Checkbox","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/checkbox/#onecode.elements.input.checkbox.Checkbox._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the Checkbox value type: boolean <code>bool</code>.</p>"},{"location":"reference/elements/input/checkbox/#onecode.elements.input.checkbox.Checkbox.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, **kwargs)</code>","text":"<p>A simple checkbox with a label. Value is either True, False or None.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[bool, List[bool]]]</code> <p>Initial check status: True, False or None.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display next to the checkbox.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import checkbox, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = checkbox(\n    key=\"Checkbox\",\n    value=True,\n    label=\"My Checkbox\"\n)\nprint(widget)\n</code></pre> Output<pre><code>True\n</code></pre>"},{"location":"reference/elements/input/checkbox/#onecode.elements.input.checkbox.Checkbox._validate","title":"<code>_validate(value)</code>","text":"<p>No validation is performed.</p>"},{"location":"reference/elements/input/checkbox/#onecode.elements.input.checkbox.Checkbox.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a checkbox (<code>st.checkbox</code>).</p>"},{"location":"reference/elements/input/csv_reader/","title":"CsvReader","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the CsvReader value type: Pandas DataFrame <code>pd.DataFrame</code>.</p>"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader.value","title":"<code>value: Optional[pd.DataFrame]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[DataFrame]</code> <p>The Pandas DataFrame loaded from the provided file path, otherwise None if the</p> <code>Optional[DataFrame]</code> <p>file does not exists.</p>"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, tags=None, **kwargs)</code>","text":"<p>A CSV-file reader returning a Pandas DataFrame and displayed as a table in Streamlit.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Path to the CSV file. CSV file must exists, even for the Streamlit mode.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the table.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used by the <code>Mode.EXTRACT_ALL</code> when dumping attributes to JSON.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import pandas as pd\nfrom onecode import csv_reader, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = csv_reader(\n    key=\"CsvReader\",\n    value=\"/path/to/file.csv\",\n    label=\"My CSV Reader\",\n    tags=['CSV']\n)\n\npd.testing.assert_frame_equal(widget, pd.read_csv(\"/path/to/file.csv\"))\n</code></pre>"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the DataFrame is empty.</p>"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader.imports","title":"<code>imports()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>List[str]</code> <p>Python import statements required by the Streamlit code.</p>"},{"location":"reference/elements/input/csv_reader/#onecode.elements.input.csv_reader.CsvReader.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a Pandas DataFrame (<code>st.dataframe</code>).</p> <p>Note</p> <p>A file selector (<code>st.file_uploader</code>) is provided on top of the table.</p>"},{"location":"reference/elements/input/dropdown/","title":"Dropdown","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the Dropdown value type: either a list of string <code>list[str]</code> when the Dropdown is multiple choice, otherwise a single string <code>str</code>.</p>"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, options=[], multiple=False, **kwargs)</code>","text":"<p>A single or multipe choice dropdown menu.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[Union[str, int, float], List[Union[str, int, float]], List[List[Union[str, int, float]]]]]</code> <p>Pre-selected value(s) among the options.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display left of the dropdown menu.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>options</code> <code>Union[List, str]</code> <p>List all possible options available in the dropdown menu. This list may either be fixed or dynamic (to a certain extent): in the latter case, use Expressions in a similar way as <code>optional</code> and <code>count</code>. See example below.</p> <code>[]</code> <code>multiple</code> <code>bool</code> <p>Set to True if multiple choice is allowed, otherwise only a single element can be selected.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <p>Fixed options: <pre><code>from onecode import dropdown, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = dropdown(\n    key=\"Dropdown\",\n    value=[\"A\", \"C\"],\n    options=[\"A\", \"B\", \"C\"],\n    multiple=True\n)\nprint(widget)\n</code></pre></p> Output<pre><code>[\"A\", \"C\"]\n</code></pre> <p>Dynamic options: <pre><code>from onecode import csv_reader, dropdown, Mode, Project\n\nProject().mode = Mode.EXECUTE\n\ndf = csv_reader(\"csv\", \"/path/to/file.csv\")\n\nwidget = dropdown(\n    key=\"Dynamic Dropdown\",\n    value=None,\n    options='$csv$.columns',\n    optional=True\n)\nprint(widget)\n</code></pre></p> Output<pre><code>None\n</code></pre>"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown._validate","title":"<code>_validate(value)</code>","text":"<p>Validate the selected value (see <code>_validate_option_value()</code> ). In case of multipe choice, each choice is validated individually.</p>"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown._validate_option_value","title":"<code>_validate_option_value(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the value is not part of the possible options.</p> <p>Note</p> <p>This validation is not performed when the option list is dynamic.</p>"},{"location":"reference/elements/input/dropdown/#onecode.elements.input.dropdown.Dropdown.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a dropdown menu (<code>st.multiselect</code> | <code>selectbox</code>).</p>"},{"location":"reference/elements/input/file_input/","title":"FileInput","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the FileInput value type: either a list of string <code>list[str]</code> when the FileInput is multiple file selection, otherwise a single string <code>str</code>.</p>"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput.value","title":"<code>value: Optional[Union[List[str], str]]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[Union[List[str], str]]</code> <p>The path or list of paths for the selected file(s): if paths are not absolute, then</p> <code>Optional[Union[List[str], str]]</code> <p>they are considered relative to the data root folder. See</p> <code>Optional[Union[List[str], str]]</code> <p>Best Practices With Data for more information.</p>"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, types=None, multiple=False, tags=None, **kwargs)</code>","text":"<p>A single or multiple file selector.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str], List[List[str]]]]</code> <p>Path to file(s). Provided file(s) don't necessarily have to exist for the Streamlit mode, however their existence will be checked at execution time. If paths are not absolute, then they are considered relative to the data root folder. See Best Practices With Data for more information.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display left of the file selector.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>types</code> <code>List[Tuple[str, str]]</code> <p>List of filters allowing to narrow file selection within Streamlit. Each filter must be a pair of (name, list of allowed extensions), e.g. <code>(\"Image\", \".jpg .png .jpeg\")</code>. You may use the FileFilter enums for convenience.</p> <code>None</code> <code>multiple</code> <code>bool</code> <p>Set to True if multiple choice is allowed, otherwise only a single element can be selected.</p> <code>False</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used by the <code>Mode.EXTRACT_ALL</code> when dumping attributes to JSON.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import file_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = file_input(\n    key=\"FileInput\",\n    value=[\"/path/to/file1.txt\", \"/path/to/file2.csv\"],\n    multiple=True,\n    tags=['MyTags']\n)\nprint(widget)\n</code></pre> Output<pre><code>[\"/path/to/file1.txt\", \"/path/to/file2.csv\"]\n</code></pre>"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput._validate","title":"<code>_validate(value)</code>","text":"<p>Validate the selected value (see _validate_option_value()). In case of multipe file selection, each choice is validated individually.</p>"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput._validate_file_value","title":"<code>_validate_file_value(value)</code>","text":"<p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if the path does not exist or is not a file.</p>"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput.imports","title":"<code>imports()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>List[str]</code> <p>Python import statements required by the Streamlit code.</p>"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput.init","title":"<code>init()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Python statements that must be initialized before being used by the Streamlit code.</p>"},{"location":"reference/elements/input/file_input/#onecode.elements.input.file_input.FileInput.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a file selection (<code>st.text_input</code> for the path combined with a</p> <code>str</code> <p><code>tkinter.filedialog.askopenfilename</code> for the file selection).</p>"},{"location":"reference/elements/input/folder_input/","title":"FolderInput","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/folder_input/#onecode.elements.input.folder_input.FolderInput._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the FolderInput value type: a single string <code>str</code>.</p>"},{"location":"reference/elements/input/folder_input/#onecode.elements.input.folder_input.FolderInput.value","title":"<code>value: Optional[str]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[str]</code> <p>The path or list of paths for the selected folder: if paths are not absolute, then</p> <code>Optional[str]</code> <p>they are considered relative to the data root folder. See</p> <code>Optional[str]</code> <p>Best Practices With Data for more information.</p>"},{"location":"reference/elements/input/folder_input/#onecode.elements.input.folder_input.FolderInput.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, **kwargs)</code>","text":"<p>A single folder selector.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Path to folder. Provided folder doesn't necessarily have to exist for the Streamlit mode, however its existence will be checked at execution time. If path is not absolute, then it is considered relative to the data root folder. See Best Practices With Data for more information.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display left of the folder selector.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import folder_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = folder_input(\n    key=\"FolderInput\",\n    value=\"/path/to/\"\n)\nprint(widget)\n</code></pre> Output<pre><code>\"/path/to/\"\n</code></pre>"},{"location":"reference/elements/input/folder_input/#onecode.elements.input.folder_input.FolderInput._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if the path does not exist or is not a folder.</p>"},{"location":"reference/elements/input/folder_input/#onecode.elements.input.folder_input.FolderInput.imports","title":"<code>imports()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>List[str]</code> <p>Python import statements required by the Streamlit code.</p>"},{"location":"reference/elements/input/folder_input/#onecode.elements.input.folder_input.FolderInput.init","title":"<code>init()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Python statements that must be initialized before being used by the Streamlit code.</p>"},{"location":"reference/elements/input/folder_input/#onecode.elements.input.folder_input.FolderInput.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a folder selection (<code>st.text_input</code> for the path combined with a</p> <code>str</code> <p><code>tkinter.filedialog.askdirectory</code> for the file selection).</p>"},{"location":"reference/elements/input/number_input/","title":"NumberInput","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/number_input/#onecode.elements.input.number_input.NumberInput._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the NumberInput value type: floating point number <code>float</code>.</p>"},{"location":"reference/elements/input/number_input/#onecode.elements.input.number_input.NumberInput.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, min=None, max=None, step=None, **kwargs)</code>","text":"<p>A field for numerical values.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[float, List[float]]]</code> <p>Initial numerical value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>min</code> <code>float</code> <p>Optionally limit the possible values with a lower bound.</p> <code>None</code> <code>max</code> <code>float</code> <p>Optionally limit the possible values with an upper bound.</p> <code>None</code> <code>step</code> <code>float</code> <p>Optionally set a step used when increment/decrement button are used.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import number_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = number_input(\n    key=\"Number Input\",\n    value=5.1,\n    min=5,\n    max=6\n)\nprint(widget)\n</code></pre> Output<pre><code>5.1\n</code></pre>"},{"location":"reference/elements/input/number_input/#onecode.elements.input.number_input.NumberInput._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the value is out of bound (min/max) or if the minimum is greather than the maximum.</p>"},{"location":"reference/elements/input/number_input/#onecode.elements.input.number_input.NumberInput.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a number input field (<code>st.number_input</code>).</p>"},{"location":"reference/elements/input/radio_button/","title":"RadioButton","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/radio_button/#onecode.elements.input.radio_button.RadioButton._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the RadioButton value type: string <code>str</code>.</p>"},{"location":"reference/elements/input/radio_button/#onecode.elements.input.radio_button.RadioButton.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, options=[], horizontal=False, **kwargs)</code>","text":"<p>A single choice represented as a group of exclusive radio buttons.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Radio button initially selected.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>options</code> <code>List[str]</code> <p>List all possible options available. This list may either be fixed or dynamic (to a certain extent): in the latter case, use expressions in a similar  way as <code>optional</code> and <code>count</code>. See example below.</p> <code>[]</code> <code>horizontal</code> <code>bool</code> <p>Set to True to have radio buttons displayed horizontally, otherwise radio buttons will be displayed vertically.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <p>Fixed options: <pre><code>from onecode import radio_button, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = radio_button(\n    key=\"RadioButton\",\n    value=\"A\",\n    options=[\"A\", \"B\", \"C\"]\n)\nprint(widget)\n</code></pre></p> Output<pre><code>\"A\"\n</code></pre> <p>Dynamic options: <pre><code>from onecode import csv_reader, radio_button, Mode, Project\n\nProject().mode = Mode.EXECUTE\n\ndf = csv_reader(\"csv\", \"/path/to/file.csv\")\n\nwidget = radio_button(\n    key=\"Dynamic RadioButton\",\n    value=None,\n    options='$csv$.columns',\n    optional=True\n)\n\nassert widget is None\n</code></pre></p>"},{"location":"reference/elements/input/radio_button/#onecode.elements.input.radio_button.RadioButton._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the choice is not part of possible options.</p>"},{"location":"reference/elements/input/radio_button/#onecode.elements.input.radio_button.RadioButton.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a group of radio buttons (<code>st.radio</code>).</p>"},{"location":"reference/elements/input/section_header/","title":"SectionHeader","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/section_header/#onecode.elements.input.section_header.SectionHeader._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the SectionHeader value type: string <code>str</code>.</p>"},{"location":"reference/elements/input/section_header/#onecode.elements.input.section_header.SectionHeader.__init__","title":"<code>__init__(key, value, **kwargs)</code>","text":"<p>A simple header.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import section_header, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = section_header(\n    value=\"My SectionHeader\"\n)\n</code></pre> Output<pre><code>\"OneCode rocks!\"\n</code></pre>"},{"location":"reference/elements/input/section_header/#onecode.elements.input.section_header.SectionHeader._validate","title":"<code>_validate(value)</code>","text":"<p>No validation is performed.</p>"},{"location":"reference/elements/input/section_header/#onecode.elements.input.section_header.SectionHeader.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a header section (<code>st.header</code>).</p>"},{"location":"reference/elements/input/slider/","title":"Slider","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/slider/#onecode.elements.input.slider.Slider._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the Slider value type: floating point or integer number <code>float|int</code>.</p>"},{"location":"reference/elements/input/slider/#onecode.elements.input.slider.Slider.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, min=0.0, max=1.0, step=0.1, **kwargs)</code>","text":"<p>A slider for numerical values.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[float, List[float]]]</code> <p>Initial numerical value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the field.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>min</code> <code>float</code> <p>Mandatory lower bound, defaults to 0.</p> <code>0.0</code> <code>max</code> <code>float</code> <p>Mandatory upper bound, defaults to 1.</p> <code>1.0</code> <code>step</code> <code>float</code> <p>Mandatory step used when incrementing/decrementing the slider, defaults to 0.1.</p> <code>0.1</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import slider, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = slider(\n    key=\"Slider\",\n    value=5.1,\n    min=5,\n    max=6\n)\nprint(widget)\n</code></pre> Output<pre><code>5.1\n</code></pre>"},{"location":"reference/elements/input/slider/#onecode.elements.input.slider.Slider._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the value is out of bound (min/max) or if the minimum is greather than the maximum.</p>"},{"location":"reference/elements/input/slider/#onecode.elements.input.slider.Slider.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a slider (<code>st.slider</code>).</p>"},{"location":"reference/elements/input/text_input/","title":"TextInput","text":"<p>             Bases: <code>InputElement</code></p>"},{"location":"reference/elements/input/text_input/#onecode.elements.input.text_input.TextInput._value_type","title":"<code>_value_type: type</code>  <code>property</code>","text":"<p>Get the TextInput value type: string <code>str</code>.</p>"},{"location":"reference/elements/input/text_input/#onecode.elements.input.text_input.TextInput.__init__","title":"<code>__init__(key, value, label=None, count=None, optional=False, hide_when_disabled=False, max_chars=None, placeholder=None, multiline=False, **kwargs)</code>","text":"<p>A simple text field.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>Optional[Union[str, List[str]]]</code> <p>Initial text value.</p> required <code>label</code> <code>Optional[str]</code> <p>Label to display on top of the text area.</p> <code>None</code> <code>count</code> <code>Optional[Union[int, str]]</code> <p>Specify the number of occurence of the widget. OneCode typically uses it for the streamlit case. Note that if <code>count</code> is defined, the expected <code>value</code> should always be a list, even if the <code>count</code> is <code>1</code>. <code>count</code> can either be a fixed number (e.g. <code>3</code>) or an expression dependent of other elements (see Using Expressions for more information).</p> <code>None</code> <code>optional</code> <code>Union[bool, str]</code> <p>Specify whether the value may be None. <code>optional</code> can either be a fixed boolean (<code>False</code> or <code>True</code>) or a conditional expression dependent of other elements (see Using Expressions for more information).</p> <code>False</code> <code>hide_when_disabled</code> <code>bool</code> <p>If element is optional, set it to True to hide it from the interface, otherwise it will be shown disabled.</p> <code>False</code> <code>max_chars</code> <code>int</code> <p>Maximum number of characters allowed for this text field.</p> <code>None</code> <code>placeholder</code> <code>str</code> <p>Placeholder text shown whenever there is no value.</p> <code>None</code> <code>multiline</code> <code>Union[bool, int]</code> <p>Set to True or a height in pixels to make it multiline text area.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import text_input, Mode, Project\n\nProject().mode = Mode.EXECUTE\nwidget = text_input(\n    key=\"TextInput\",\n    value=\"OneCode rocks!\",\n    label=\"My TextInput\"\n)\nprint(widget)\n</code></pre> Output<pre><code>\"OneCode rocks!\"\n</code></pre>"},{"location":"reference/elements/input/text_input/#onecode.elements.input.text_input.TextInput._validate","title":"<code>_validate(value)</code>","text":"<p>No validation is performed.</p>"},{"location":"reference/elements/input/text_input/#onecode.elements.input.text_input.TextInput.streamlit","title":"<code>streamlit(id)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code for a text input field (<code>st.text</code>).</p>"},{"location":"reference/elements/output/csv_output/","title":"CsvOutput","text":"<p>             Bases: <code>OutputElement</code></p>"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput.value","title":"<code>value: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The path to the output file: if path are not absolute, then it is considered relative</p> <code>str</code> <p>to the data output folder. See Best Practices With Data</p> <code>str</code> <p>for more information.</p>"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput.__init__","title":"<code>__init__(key, value, label=None, tags=None, **kwargs)</code>","text":"<p>A CSV table with a label on top.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output CSV file which must have a <code>.csv</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import pandas as pd\nfrom onecode import csv_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\ncsv_file = csv_output(\n    key=\"CsvOutput\",\n    value=\"/path/to/file.csv\",\n    label=\"My CsvOutput\",\n    tags=['CSV']\n)\n\ndf = pd.DataFrame([[0, 1, 2], [3, 4, 5]], columns=['A', 'B', 'C'])\ndf.to_csv(csv_file, index=False)\nprint(csv_file)\n</code></pre> Output<pre><code>\"/path/to/file.csv\"\n</code></pre>"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the file does not have a CSV extension <code>.csv</code>.</p>"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput.imports","title":"<code>imports()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>List[str]</code> <p>Python import statements required by the Streamlit code.</p>"},{"location":"reference/elements/output/csv_output/#onecode.elements.output.csv_output.CsvOutput.streamlit","title":"<code>streamlit()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code to show a table corresponding to the output CSV file.</p>"},{"location":"reference/elements/output/file_output/","title":"FileOutput","text":"<p>             Bases: <code>OutputElement</code></p>"},{"location":"reference/elements/output/file_output/#onecode.elements.output.file_output.FileOutput.value","title":"<code>value: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The path to the output file: if path are not absolute, then it is considered relative</p> <code>str</code> <p>to the data output folder. See Best Practices With Data</p> <code>str</code> <p>for more information.</p>"},{"location":"reference/elements/output/file_output/#onecode.elements.output.file_output.FileOutput.__init__","title":"<code>__init__(key, value, label=None, tags=None, **kwargs)</code>","text":"<p>Basic information about the file, such as size and file path.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output file. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import file_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nfile = file_output(\n    key=\"FileOutput\",\n    value=\"/path/to/file.txt\",\n    label=\"My FileOutput\",\n    tags=['TXT']\n)\n\nwith open(file, 'w') as f:\n    f.write('Hello OneCode!')\n\nprint(file)\n</code></pre> Output<pre><code>\"/path/to/file.txt\"\n</code></pre>"},{"location":"reference/elements/output/file_output/#onecode.elements.output.file_output.FileOutput._validate","title":"<code>_validate(value)</code>","text":"<p>No validation is performed.</p>"},{"location":"reference/elements/output/file_output/#onecode.elements.output.file_output.FileOutput.streamlit","title":"<code>streamlit()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code to show the basic output file information as text.</p>"},{"location":"reference/elements/output/html_output/","title":"HtmlOutput","text":"<p>             Bases: <code>OutputElement</code></p>"},{"location":"reference/elements/output/html_output/#onecode.elements.output.html_output.HtmlOutput.value","title":"<code>value: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The path to the output file: if path are not absolute, then it is considered relative</p> <code>str</code> <p>to the data output folder. See Best Practices With Data</p> <code>str</code> <p>for more information.</p>"},{"location":"reference/elements/output/html_output/#onecode.elements.output.html_output.HtmlOutput.__init__","title":"<code>__init__(key, value, label=None, tags=None, **kwargs)</code>","text":"<p>Link to HTML file opening in a new tab.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output file. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import html_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nfile = html_output(\n    key=\"HtmlOutput\",\n    value=\"/path/to/file.html\",\n    label=\"My HtmlOutput\",\n    tags=['HTML']\n)\n\nwith open(file, 'w') as f:\n    f.write('&lt;html&gt;&lt;body&gt;Hello OneCode!&lt;/body&gt;&lt;/html&gt;')\n\nprint(file)\n</code></pre> Output<pre><code>\"/path/to/file.html\"\n</code></pre>"},{"location":"reference/elements/output/html_output/#onecode.elements.output.html_output.HtmlOutput._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the file does not have a HTML extension, i-e: <code>.html</code>.</p>"},{"location":"reference/elements/output/html_output/#onecode.elements.output.html_output.HtmlOutput.streamlit","title":"<code>streamlit()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code to show the filename with a hyperlink.</p>"},{"location":"reference/elements/output/image_output/","title":"ImageOutput","text":"<p>             Bases: <code>OutputElement</code></p>"},{"location":"reference/elements/output/image_output/#onecode.elements.output.image_output.ImageOutput.value","title":"<code>value: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The path to the output file: if path are not absolute, then it is considered relative</p> <code>str</code> <p>to the data output folder. See Best Practices With Data</p> <code>str</code> <p>for more information.</p>"},{"location":"reference/elements/output/image_output/#onecode.elements.output.image_output.ImageOutput.__init__","title":"<code>__init__(key, value, label=None, tags=None, **kwargs)</code>","text":"<p>An image as part of the image carousel.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output image file which must have a <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code> or <code>.svg</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nfrom onecode import image_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nimage_file = image_output(\n    key=\"ImageOutput\",\n    value=\"/path/to/file.jpg\",\n    label=\"My ImageOutput\",\n    tags=['Image']\n)\n\nt = np.arange(0.0, 2.0, 0.01)\ns = 1 + np.sin(2 * np.pi * t)\nfig, ax = plt.subplots()\nax.plot(t, s)\nax.set(xlabel='time (s)', ylabel='voltage (mV)')\nax.grid()\n\nfig.savefig(image_file)\nprint(image_file)\n</code></pre> Output<pre><code>\"/path/to/file.jpg\"\n</code></pre>"},{"location":"reference/elements/output/image_output/#onecode.elements.output.image_output.ImageOutput._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the file does not have an image-like extension, i-e: <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.svg</code>.</p>"},{"location":"reference/elements/output/image_output/#onecode.elements.output.image_output.ImageOutput.streamlit","title":"<code>streamlit()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code to show an image as part of the image carousel.</p> <p>Tip</p> <p>A static function <code>_show_img(filepath: str)</code> is available for any Streamlit code to use. It will automatically add the given image to the carousel without you needing to deal with the carousel.</p>"},{"location":"reference/elements/output/plotly_output/","title":"PlotlyOutput","text":"<p>             Bases: <code>OutputElement</code></p>"},{"location":"reference/elements/output/plotly_output/#onecode.elements.output.plotly_output.PlotlyOutput.value","title":"<code>value: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The path to the output file: if path are not absolute, then it is considered relative</p> <code>str</code> <p>to the data output folder. See Best Practices With Data</p> <code>str</code> <p>for more information.</p>"},{"location":"reference/elements/output/plotly_output/#onecode.elements.output.plotly_output.PlotlyOutput.__init__","title":"<code>__init__(key, value, label=None, tags=None, **kwargs)</code>","text":"<p>A Plotly chart with a label on top.</p> <p>Warning</p> <p>Required package: <code>plotly</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output Plotly JSON file which must have a <code>.json</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>import plotly\nimport plotly.graph_objects as go\nfrom onecode import plotly_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\nplot_file = plotly_output(\n    key=\"PlotlyOutput\",\n    value=\"/path/to/file.json\",\n    label=\"My PlotlyOutput\",\n    tags=['Graph']\n)\n\nfig = go.Figure(\n    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],\n    layout=go.Layout(\n        title=go.layout.Title(text=\"A Figure Specified By A Graph Object\")\n    )\n)\nplotly.io.write_json(fig, plot_file)\nprint(plot_file)\n</code></pre> Output<pre><code>\"/path/to/file.json\"\n</code></pre>"},{"location":"reference/elements/output/plotly_output/#onecode.elements.output.plotly_output.PlotlyOutput._validate","title":"<code>_validate(value)</code>","text":"<p>Raises:</p> Type Description <code>ValueError</code> <p>if the file does not have a JSON extension <code>.json</code>.</p>"},{"location":"reference/elements/output/plotly_output/#onecode.elements.output.plotly_output.PlotlyOutput.imports","title":"<code>imports()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>List[str]</code> <p>Python import statements required by the Streamlit code.</p>"},{"location":"reference/elements/output/plotly_output/#onecode.elements.output.plotly_output.PlotlyOutput.streamlit","title":"<code>streamlit()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code to show a figure corresponding to the output Plotly file.</p>"},{"location":"reference/elements/output/text_output/","title":"TextOutput","text":"<p>             Bases: <code>OutputElement</code></p>"},{"location":"reference/elements/output/text_output/#onecode.elements.output.text_output.TextOutput.value","title":"<code>value: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The path to the output file: if path are not absolute, then it is considered relative</p> <code>str</code> <p>to the data output folder. See Best Practices With Data</p> <code>str</code> <p>for more information.</p>"},{"location":"reference/elements/output/text_output/#onecode.elements.output.text_output.TextOutput.__init__","title":"<code>__init__(key, value, label=None, tags=None, truncate_at=50000, **kwargs)</code>","text":"<p>A text file preview.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>ID of the element. It must be unique as it is the key used to store data in Project(), otherwise it will lead to conflicts at runtime in both execution and Streamlit modes. The key will be transformed into snake case and slugified to avoid any special character or whitespace. Note that an ID cannot start with <code>_</code>. Try to choose a key that is meaningful for your context (see examples projects).</p> required <code>value</code> <code>str</code> <p>Path to the output CSV file which must have a <code>.csv</code> extension. Unless absolute, a path is relative to the <code>outputs</code> folder of the flow currently running.</p> required <code>label</code> <code>Optional[str]</code> <p>Typically to be used by Streamlit for display purpose only. If not defined, it will default to the <code>key</code>.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional meta-data information about the expected file. This information is only used when the JSON output attributes are written to the output manifest.</p> <code>None</code> <code>truncate_at</code> <code>int</code> <p>Truncate the preview at the specified number of characters.</p> <code>50000</code> <code>**kwargs</code> <code>Any</code> <p>Extra user meta-data to attach to the element. Argument names cannot overwrite existing attributes or methods name such as <code>streamlit</code>, <code>_value</code>, etc.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the <code>key</code> is empty or starts with <code>_</code>.</p> <code>AttributeError</code> <p>if one the <code>kwargs</code> conflicts with an existing attribute or method.</p> <p>Example</p> <pre><code>from onecode import text_output, Mode, Project\n\nProject().mode = Mode.EXECUTE\nProject().current_flow = 'test'\n\ntext_file = text_output(\n    key=\"TextOutput\",\n    value=\"/path/to/file.txt\",\n    label=\"My TextOutput\",\n    tags=['Text'],\n    truncate_at=1000\n)\n\nwith open(text_file, 'w') as f:\n    f.write('Hello OneCode!')\nprint(widget)\n</code></pre> Output<pre><code>\"/path/to/file.txt\"\n</code></pre>"},{"location":"reference/elements/output/text_output/#onecode.elements.output.text_output.TextOutput._validate","title":"<code>_validate(value)</code>","text":"<p>No validation is performed.</p>"},{"location":"reference/elements/output/text_output/#onecode.elements.output.text_output.TextOutput.streamlit","title":"<code>streamlit()</code>  <code>staticmethod</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The Streamlit code to preview text of a file.</p>"},{"location":"reference/utils/utils/","title":"Utilities","text":""},{"location":"reference/utils/utils/#onecode.utils.format.convert_expr","title":"<code>convert_expr(expr)</code>","text":"<p>Replace instances of a pattern in a given expression with a keyword and slugified values.</p> <p>Parameters:</p> Name Type Description Default <code>expr</code> <code>Optional[str]</code> <p>The expression to be converted.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The converted expression.</p>"},{"location":"reference/utils/utils/#onecode.utils.format.indent_block","title":"<code>indent_block(code, indent=4)</code>","text":"<p>Indent a code block by a given number of spaces.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>Union[str, List[str]]</code> <p>The code block to be indented.</p> required <code>indent</code> <code>int</code> <p>The number of spaces to be indented.</p> <code>4</code> <p>Returns:</p> Type Description <code>str</code> <p>The indented code block.</p>"}]}